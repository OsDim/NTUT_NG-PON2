/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include <omnetpp.h>
#include "innerclasses.h"
#include "JSimpleModule.h"
#include "JMessage.h"

// for debugging:
#include <stdio.h>
#define LOG_JNI_CALL() (void)0
//#define LOG_JNI_CALL() {printf("DEBUG: entered JNI method %s, jarg1=%lx\n", __FUNCTION__, (long)jarg1);fflush(stdout);}
//jlong jarg1 = -1; // fallback for LOG_JNI_CALL() in JNI functions with no jarg1 arg


#include <stdexcept>


#include <string>


#include <map>
#include <algorithm>
#include <stdexcept>


#include <vector>
#include <stdexcept>


//#include "bigdecimal.h"
//#include "jprogressmonitor.h"


#if OMNETPP_VERSION == 0x0400
#define GET_FIELD_AS_STRING(desc,self,fieldId,index) \
    char buf[200]; desc->getFieldAsString(self, fieldId, index, buf, 200); return buf;
#else
#define GET_FIELD_AS_STRING(desc,self,fieldId,index) \
    return desc->getFieldAsString(self, fieldId, index);
#endif


  static cClassDescriptor *findDescriptor(cObject *p)
  {
      cClassDescriptor *desc = p->getDescriptor();
      if (!desc)
          opp_error("no descriptor for class %s", p->getClassName());
      return desc;
  }

  static int findField(cClassDescriptor *desc, void *object, const char *fieldName)
  {
      int n = desc->getFieldCount(object);
      for (int i=0; i<n; i++)
          if (!strcmp(desc->getFieldName(object, i), fieldName))
              return i;
      return -1;
  }

  static int getFieldID(cClassDescriptor *desc, void *object, const char *fieldName)
  {
      int id = findField(desc, object, fieldName);
      if (id==-1)
          opp_error("no `%s' field in class %s", fieldName, desc->getName());
      return id;
  }

SWIGINTERN std::string std_map_Sl_std_string_Sc_std_string_Sg__get(std::map< std::string,std::string > *self,std::string key){
                std::map<std::string,std::string >::iterator i = self->find(key);
                if (i != self->end())
                    return i->second;
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN void std_map_Sl_std_string_Sc_std_string_Sg__set(std::map< std::string,std::string > *self,std::string key,std::string x){
                (*self)[key] = x;
            }
SWIGINTERN void std_map_Sl_std_string_Sc_std_string_Sg__del(std::map< std::string,std::string > *self,std::string key){
                std::map<std::string,std::string >::iterator i = self->find(key);
                if (i != self->end())
                    self->erase(i);
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN bool std_map_Sl_std_string_Sc_std_string_Sg__has_key(std::map< std::string,std::string > *self,std::string key){
                std::map<std::string,std::string >::iterator i = self->find(key);
                return i != self->end();
            }
SWIGINTERN std::vector< cXMLElement * >::const_reference std_vector_Sl_cXMLElement_Sm__Sg__get(std::vector< cXMLElement * > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN char const *std_vector_Sl_char_SS_const_Sm__Sg__get(std::vector< char const * > *self,int i){return self->at(i);}
 inline cEnvir *getEv() {return &ev;} 

cDefaultList& getDefaultList() {return defaultList;}
cRegistrationList *getRegisteredComponentTypes() {return componentTypes.getInstance();}
cRegistrationList *getRegisteredNedFunctions() {return nedFunctions.getInstance();}
cRegistrationList *getRegisteredClasses() {return classes.getInstance();}
cRegistrationList *getRegisteredEnums() {return enums.getInstance();}
cRegistrationList *getRegisteredClassDescriptors() {return classDescriptors.getInstance();}
cRegistrationList *getRegisteredConfigOptions() {return configOptions.getInstance();}

 inline cSimulation *getSimulation() {return &simulation;} 
SWIGINTERN SimTime const SimTime_add__SWIG_0(SimTime *self,SimTime const &x){return *self + x;}
SWIGINTERN SimTime const SimTime_substract__SWIG_0(SimTime *self,SimTime const &x){return *self - x;}
SWIGINTERN SimTime const SimTime_add__SWIG_1(SimTime *self,double x){return *self + x;}
SWIGINTERN SimTime const SimTime_substract__SWIG_1(SimTime *self,double x){return *self - x;}
SWIGINTERN bool cObject_hasField(cObject *self,char const *fieldName){
      cClassDescriptor *desc = findDescriptor(self);
      return findField(desc, self, fieldName)!=-1;
  }
SWIGINTERN std::string cObject_getField(cObject *self,char const *fieldName){
      cClassDescriptor *desc = findDescriptor(self);
      int fieldId = getFieldID(desc, self, fieldName);
      GET_FIELD_AS_STRING(desc,self,fieldId,0);
  }
SWIGINTERN std::string cObject_getArrayField(cObject *self,char const *fieldName,int index){
      cClassDescriptor *desc = findDescriptor(self);
      int fieldId = getFieldID(desc, self, fieldName);
      GET_FIELD_AS_STRING(desc,self,fieldId,index);
  }
SWIGINTERN void cObject_setField(cObject *self,char const *fieldName,char const *value){
      cClassDescriptor *desc = findDescriptor(self);
      int fieldId = getFieldID(desc, self, fieldName);
      desc->setFieldAsString(self, fieldId, 0, value);
  }
SWIGINTERN void cObject_setArrayField(cObject *self,char const *fieldName,int index,char const *value){
      cClassDescriptor *desc = findDescriptor(self);
      int fieldId = getFieldID(desc, self, fieldName);
      desc->setFieldAsString(self, fieldId, index, value); //XXX check out of bounds!!!
  }
SWIGINTERN bool cObject_isFieldArray(cObject *self,char const *fieldName){
      cClassDescriptor *desc = findDescriptor(self);
      int fieldId = getFieldID(desc, self, fieldName);
      return desc->getFieldIsArray(self, fieldId);
  }
SWIGINTERN bool cObject_isFieldCompound(cObject *self,char const *fieldName){
      cClassDescriptor *desc = findDescriptor(self);
      int fieldId = getFieldID(desc, self, fieldName);
      return desc->getFieldIsCompound(self, fieldId);
  }
SWIGINTERN cObject *cObject_cast(cObject *obj){return dynamic_cast<cObject *>(obj);}
SWIGINTERN cDefaultList *cDefaultList_cast(cObject *obj){return dynamic_cast<cDefaultList *>(obj);}
SWIGINTERN cComponent *cComponent_cast(cObject *obj){return dynamic_cast<cComponent *>(obj);}
SWIGINTERN cChannel *cChannel_cast(cObject *obj){return dynamic_cast<cChannel *>(obj);}
SWIGINTERN cIdealChannel *cIdealChannel_cast(cObject *obj){return dynamic_cast<cIdealChannel *>(obj);}
SWIGINTERN cDelayChannel *cDelayChannel_cast(cObject *obj){return dynamic_cast<cDelayChannel *>(obj);}
SWIGINTERN cDatarateChannel *cDatarateChannel_cast(cObject *obj){return dynamic_cast<cDatarateChannel *>(obj);}
SWIGINTERN cModule *cModule_cast(cObject *obj){return dynamic_cast<cModule *>(obj);}
SWIGINTERN cSimpleModule *cSimpleModule_cast(cObject *obj){return dynamic_cast<cSimpleModule *>(obj);}
SWIGINTERN cComponentType *cComponentType_cast(cObject *obj){return dynamic_cast<cComponentType *>(obj);}
SWIGINTERN cModuleType *cModuleType_cast(cObject *obj){return dynamic_cast<cModuleType *>(obj);}
SWIGINTERN cChannelType *cChannelType_cast(cObject *obj){return dynamic_cast<cChannelType *>(obj);}
SWIGINTERN cArray *cArray_cast(cObject *obj){return dynamic_cast<cArray *>(obj);}
SWIGINTERN cQueue *cQueue_cast(cObject *obj){return dynamic_cast<cQueue *>(obj);}
SWIGINTERN cStatistic *cStatistic_cast(cObject *obj){return dynamic_cast<cStatistic *>(obj);}
SWIGINTERN cStdDev *cStdDev_cast(cObject *obj){return dynamic_cast<cStdDev *>(obj);}
SWIGINTERN void cEnvir_puts(cEnvir *self,char const *s){printf("%s", s);}
SWIGINTERN cRuntimeError *cRuntimeError_cast(cException *obj){return dynamic_cast<cRuntimeError *>(obj);}
SWIGINTERN cGate *cGate_cast(cObject *obj){return dynamic_cast<cGate *>(obj);}
SWIGINTERN cMessage *cMessage_cast(cObject *obj){return dynamic_cast<cMessage *>(obj);}
SWIGINTERN cPacket *cPacket_cast(cObject *obj){return dynamic_cast<cPacket *>(obj);}
SWIGINTERN cMsgPar *cMsgPar_cast(cObject *obj){return dynamic_cast<cMsgPar *>(obj);}
SWIGINTERN cOutVector *cOutVector_cast(cObject *obj){return dynamic_cast<cOutVector *>(obj);}
SWIGINTERN cPar *cPar_cast(cObject *obj){return dynamic_cast<cPar *>(obj);}
SWIGINTERN cProperty *cProperty_cast(cObject *obj){return dynamic_cast<cProperty *>(obj);}
SWIGINTERN cProperties *cProperties_cast(cObject *obj){return dynamic_cast<cProperties *>(obj);}
SWIGINTERN cSimulation *cSimulation_cast(cObject *obj){return dynamic_cast<cSimulation *>(obj);}
SWIGINTERN cObject *cClassDescriptor_getFieldAsCObject(cClassDescriptor *self,void *object,int field,int index){
       return self->getFieldIsCObject(object,field) ? (cObject *)self->getFieldStructPointer(object,field,index) : NULL;
   }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_HAVE_1STDINT_1H_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  result = (int) 0;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_INT8_1MIN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  result = (int) (-128);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_INT16_1MIN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  result = (int) (-32767-1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_INT32_1MIN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  result = (int) (-2147483647-1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_INT64_1MIN_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  long long result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  result = (long long) (-9223372036854775807LL-1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_INT8_1MAX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  result = (int) (127);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_INT16_1MAX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  result = (int) (32767);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_INT32_1MAX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  result = (int) (2147483647);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_INT64_1MAX_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  long long result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  result = (long long) (9223372036854775807LL);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_UINT8_1MAX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  result = (int) (255);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_UINT16_1MAX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  result = (int) (65535);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_UINT32_1MAX_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  result = (unsigned int) (4294967295U);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jobject Java_org_omnetpp_simkernel_SimkernelJNI_UINT64_1MAX_1get(JNIEnv *jenv, jclass jcls) {
  jobject jresult = 0 ;
  unsigned long long result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  result = (unsigned long long) (18446744073709551615ULL);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_INT64_1PRINTF_1FORMAT_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  result = (char *) "ll";
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_LONGLONG_1PRINTF_1FORMAT_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  result = (char *) "ll";
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1StringMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::map< std::string,std::string > *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      result = (std::map< std::string,std::string > *)new std::map< std::string,std::string >();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(std::map< std::string,std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1StringMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< std::string,std::string > *arg1 = 0 ;
  std::map< std::string,std::string > *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,std::string > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (std::map< std::string,std::string > *)new std::map< std::string,std::string >((std::map< std::string,std::string > const &)*arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(std::map< std::string,std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_StringMap_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  unsigned int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  {
    try {
      result = (unsigned int)((std::map< std::string,std::string > const *)arg1)->size();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_StringMap_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  {
    try {
      result = (bool)((std::map< std::string,std::string > const *)arg1)->empty();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_StringMap_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_StringMap_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string arg2 ;
  std::string result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      try {
        result = std_map_Sl_std_string_Sc_std_string_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_StringMap_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      std_map_Sl_std_string_Sc_std_string_Sg__set(arg1,arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_StringMap_1del(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string arg2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      try {
        std_map_Sl_std_string_Sc_std_string_Sg__del(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_StringMap_1has_1key(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string arg2 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (bool)std_map_Sl_std_string_Sc_std_string_Sg__has_key(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_delete_1StringMap(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cXMLElementVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< cXMLElement * > *arg1 = (std::vector< cXMLElement * > *) 0 ;
  std::vector< cXMLElement * >::size_type result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cXMLElement * > **)&jarg1; 
  {
    try {
      result = ((std::vector< cXMLElement * > const *)arg1)->size();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cXMLElementVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< cXMLElement * > *arg1 = (std::vector< cXMLElement * > *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cXMLElement * > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< cXMLElement * > const *)arg1)->empty();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cXMLElementVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< cXMLElement * > *arg1 = (std::vector< cXMLElement * > *) 0 ;
  std::vector< cXMLElement * >::value_type *arg2 = 0 ;
  std::vector< cXMLElement * >::value_type temp2 = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< cXMLElement * > **)&jarg1; 
  temp2 = *(std::vector< cXMLElement * >::value_type *)&jarg2;
  arg2 = &temp2; 
  {
    try {
      (arg1)->push_back((std::vector< cXMLElement * >::value_type const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cXMLElementVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< cXMLElement * > *arg1 = (std::vector< cXMLElement * > *) 0 ;
  int arg2 ;
  std::vector< cXMLElement * >::value_type *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< cXMLElement * > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< cXMLElement * >::value_type *) &std_vector_Sl_cXMLElement_Sm__Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(std::vector< cXMLElement * >::value_type *)&jresult = *result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_delete_1cXMLElementVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< cXMLElement * > *arg1 = (std::vector< cXMLElement * > *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = *(std::vector< cXMLElement * > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_StringVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< char const * > *arg1 = (std::vector< char const * > *) 0 ;
  std::vector< char const * >::size_type result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char const * > **)&jarg1; 
  {
    try {
      result = ((std::vector< char const * > const *)arg1)->size();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_StringVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< char const * > *arg1 = (std::vector< char const * > *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char const * > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< char const * > const *)arg1)->empty();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_StringVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::vector< char const * > *arg1 = (std::vector< char const * > *) 0 ;
  std::vector< char const * >::value_type *arg2 = 0 ;
  std::vector< char const * >::value_type temp2 = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char const * > **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    temp2 = (std::vector< char const * >::value_type)jenv->GetStringUTFChars(jarg2, 0);
    if (!temp2) return ;
  }
  arg2 = &temp2;
  {
    try {
      (arg1)->push_back((std::vector< char const * >::value_type const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
  if (arg2 && *arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)*arg2);
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_StringVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  std::vector< char const * > *arg1 = (std::vector< char const * > *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char const * > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (char *)std_vector_Sl_char_SS_const_Sm__Sg__get(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_delete_1StringVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< char const * > *arg1 = (std::vector< char const * > *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = *(std::vector< char const * > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_getEv(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cEnvir *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      result = (cEnvir *)getEv();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cEnvir **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_getDefaultList(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cDefaultList *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      result = (cDefaultList *) &getDefaultList();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cDefaultList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_getRegisteredComponentTypes(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cRegistrationList *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      result = (cRegistrationList *)getRegisteredComponentTypes();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cRegistrationList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_getRegisteredNedFunctions(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cRegistrationList *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      result = (cRegistrationList *)getRegisteredNedFunctions();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cRegistrationList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_getRegisteredClasses(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cRegistrationList *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      result = (cRegistrationList *)getRegisteredClasses();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cRegistrationList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_getRegisteredEnums(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cRegistrationList *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      result = (cRegistrationList *)getRegisteredEnums();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cRegistrationList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_getRegisteredClassDescriptors(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cRegistrationList *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      result = (cRegistrationList *)getRegisteredClassDescriptors();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cRegistrationList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_getRegisteredConfigOptions(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cRegistrationList *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      result = (cRegistrationList *)getRegisteredConfigOptions();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cRegistrationList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_getSimulation(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cSimulation *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      result = (cSimulation *)getSimulation();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cSimulation **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cModule_1GateIterator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cModule *arg1 = (cModule *) 0 ;
  cModule_GateIterator *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cModule **)&jarg1; 
  {
    try {
      result = (cModule_GateIterator *)new cModule_GateIterator((cModule const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cModule_GateIterator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cModule_1GateIterator_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cModule_GateIterator *arg1 = (cModule_GateIterator *) 0 ;
  cGate *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cModule_GateIterator **)&jarg1; 
  {
    try {
      result = (cGate *)((cModule_GateIterator const *)arg1)->get();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cGate **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cModule_1GateIterator_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cModule_GateIterator *arg1 = (cModule_GateIterator *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cModule_GateIterator **)&jarg1; 
  {
    try {
      result = (bool)((cModule_GateIterator const *)arg1)->end();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cModule_1GateIterator_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cModule_GateIterator *arg1 = (cModule_GateIterator *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cModule_GateIterator **)&jarg1; 
  {
    try {
      (arg1)->next();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cModule_1GateIterator_1advance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  cModule_GateIterator *arg1 = (cModule_GateIterator *) 0 ;
  int arg2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cModule_GateIterator **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->advance(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_delete_1cModule_1GateIterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cModule_GateIterator *arg1 = (cModule_GateIterator *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = *(cModule_GateIterator **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cModule_1SubmoduleIterator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cModule *arg1 = (cModule *) 0 ;
  cModule_SubmoduleIterator *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cModule **)&jarg1; 
  {
    try {
      result = (cModule_SubmoduleIterator *)new cModule_SubmoduleIterator((cModule const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cModule_SubmoduleIterator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cModule_1SubmoduleIterator_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cModule_SubmoduleIterator *arg1 = (cModule_SubmoduleIterator *) 0 ;
  cModule *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cModule_SubmoduleIterator **)&jarg1; 
  {
    try {
      result = (cModule *)((cModule_SubmoduleIterator const *)arg1)->get();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cModule **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cModule_1SubmoduleIterator_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cModule_SubmoduleIterator *arg1 = (cModule_SubmoduleIterator *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cModule_SubmoduleIterator **)&jarg1; 
  {
    try {
      result = (bool)((cModule_SubmoduleIterator const *)arg1)->end();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cModule_1SubmoduleIterator_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cModule_SubmoduleIterator *arg1 = (cModule_SubmoduleIterator *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cModule_SubmoduleIterator **)&jarg1; 
  {
    try {
      (arg1)->next();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_delete_1cModule_1SubmoduleIterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cModule_SubmoduleIterator *arg1 = (cModule_SubmoduleIterator *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = *(cModule_SubmoduleIterator **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cModule_1ChannelIterator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cModule *arg1 = (cModule *) 0 ;
  cModule_ChannelIterator *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cModule **)&jarg1; 
  {
    try {
      result = (cModule_ChannelIterator *)new cModule_ChannelIterator((cModule const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cModule_ChannelIterator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cModule_1ChannelIterator_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cModule_ChannelIterator *arg1 = (cModule_ChannelIterator *) 0 ;
  cChannel *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cModule_ChannelIterator **)&jarg1; 
  {
    try {
      result = (cChannel *)((cModule_ChannelIterator const *)arg1)->get();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cChannel **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cModule_1ChannelIterator_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cModule_ChannelIterator *arg1 = (cModule_ChannelIterator *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cModule_ChannelIterator **)&jarg1; 
  {
    try {
      result = (bool)((cModule_ChannelIterator const *)arg1)->end();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cModule_1ChannelIterator_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cModule_ChannelIterator *arg1 = (cModule_ChannelIterator *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cModule_ChannelIterator **)&jarg1; 
  {
    try {
      (arg1)->next();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_delete_1cModule_1ChannelIterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cModule_ChannelIterator *arg1 = (cModule_ChannelIterator *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = *(cModule_ChannelIterator **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_OMNETPP_1VERSION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  result = (int) 0x0406;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_NULL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  result = (int) 0;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_PI_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  result = (double) 3.141592653589793;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_INT64_1MAX_1DBL_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  result = (double) 9.22337203685e18;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_SIMTIME_1S_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SimTimeUnit result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      result = (SimTimeUnit)SIMTIME_S;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_SIMTIME_1MS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SimTimeUnit result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      result = (SimTimeUnit)SIMTIME_MS;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_SIMTIME_1US_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SimTimeUnit result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      result = (SimTimeUnit)SIMTIME_US;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_SIMTIME_1NS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SimTimeUnit result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      result = (SimTimeUnit)SIMTIME_NS;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_SIMTIME_1PS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SimTimeUnit result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      result = (SimTimeUnit)SIMTIME_PS;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_SIMTIME_1FS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SimTimeUnit result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      result = (SimTimeUnit)SIMTIME_FS;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_SimTime_1SCALEEXP_1S_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  result = (int)(int)SimTime::SCALEEXP_S;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_SimTime_1SCALEEXP_1MS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  result = (int)(int)SimTime::SCALEEXP_MS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_SimTime_1SCALEEXP_1US_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  result = (int)(int)SimTime::SCALEEXP_US;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_SimTime_1SCALEEXP_1NS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  result = (int)(int)SimTime::SCALEEXP_NS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_SimTime_1SCALEEXP_1PS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  result = (int)(int)SimTime::SCALEEXP_PS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_SimTime_1SCALEEXP_1FS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  result = (int)(int)SimTime::SCALEEXP_FS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_SimTime_1SCALEEXP_1UNINITIALIZED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  result = (int)SimTime::SCALEEXP_UNINITIALIZED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1SimTime_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SimTime *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      result = (SimTime *)new SimTime();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(SimTime **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1SimTime_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jlong jresult = 0 ;
  double arg1 ;
  SimTime *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = (double)jarg1; 
  {
    try {
      result = (SimTime *)new SimTime(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(SimTime **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1SimTime_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cPar *arg1 = 0 ;
  SimTime *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cPar **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cPar & reference is null");
    return 0;
  } 
  {
    try {
      result = (SimTime *)new SimTime(*arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(SimTime **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1SimTime_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  int64_t arg1 ;
  int arg2 ;
  SimTime *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = (int64_t)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (SimTime *)new SimTime(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(SimTime **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_SimTime_1assign_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  SimTime *arg1 = (SimTime *) 0 ;
  double arg2 ;
  SimTime *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SimTime **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      result = (SimTime *) &(arg1)->operator =(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(SimTime **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_SimTime_1assign_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  SimTime *arg1 = (SimTime *) 0 ;
  cPar *arg2 = 0 ;
  SimTime *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SimTime **)&jarg1; 
  arg2 = *(cPar **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cPar const & reference is null");
    return 0;
  } 
  {
    try {
      result = (SimTime *) &(arg1)->operator =((cPar const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(SimTime **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_SimTime_1dbl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  SimTime *arg1 = (SimTime *) 0 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SimTime **)&jarg1; 
  {
    try {
      result = (double)((SimTime const *)arg1)->dbl();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_SimTime_1inUnit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  SimTime *arg1 = (SimTime *) 0 ;
  int arg2 ;
  int64_t result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SimTime **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (int64_t)((SimTime const *)arg1)->inUnit(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_SimTime_1trunc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  SimTime *arg1 = (SimTime *) 0 ;
  int arg2 ;
  SimTime result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SimTime **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = ((SimTime const *)arg1)->trunc(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(SimTime **)&jresult = new SimTime((const SimTime &)result); 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_SimTime_1remainderForUnit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  SimTime *arg1 = (SimTime *) 0 ;
  int arg2 ;
  SimTime result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SimTime **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = ((SimTime const *)arg1)->remainderForUnit(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(SimTime **)&jresult = new SimTime((const SimTime &)result); 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_SimTime_1split(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4, jobject jarg4_) {
  SimTime *arg1 = (SimTime *) 0 ;
  int arg2 ;
  int64_t *arg3 = 0 ;
  SimTime *arg4 = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(SimTime **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int64_t **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int64_t & reference is null");
    return ;
  } 
  arg4 = *(SimTime **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SimTime & reference is null");
    return ;
  } 
  {
    try {
      ((SimTime const *)arg1)->split(arg2,*arg3,*arg4);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_SimTime_1str_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  SimTime *arg1 = (SimTime *) 0 ;
  std::string result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SimTime **)&jarg1; 
  {
    try {
      result = ((SimTime const *)arg1)->str();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_SimTime_1str_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  SimTime *arg1 = (SimTime *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SimTime **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (char *)((SimTime const *)arg1)->str(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_SimTime_1raw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SimTime *arg1 = (SimTime *) 0 ;
  int64_t result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SimTime **)&jarg1; 
  {
    try {
      result = (int64_t)((SimTime const *)arg1)->raw();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_SimTime_1setRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  SimTime *arg1 = (SimTime *) 0 ;
  int64_t arg2 ;
  SimTime *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SimTime **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  {
    try {
      result = (SimTime *) &(arg1)->setRaw(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(SimTime **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_SimTime_1getMaxTime(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SimTime result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      result = SimTime::getMaxTime();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(SimTime **)&jresult = new SimTime((const SimTime &)result); 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_SimTime_1getScale(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  int64_t result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      result = (int64_t)SimTime::getScale();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_SimTime_1getScaleExp(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      result = (int)SimTime::getScaleExp();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_SimTime_1setScaleExp(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = (int)jarg1; 
  {
    try {
      SimTime::setScaleExp(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_SimTime_1parse(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  SimTime result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    try {
      result = SimTime::parse((char const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(SimTime **)&jresult = new SimTime((const SimTime &)result); 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_SimTime_1add_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  SimTime *arg1 = (SimTime *) 0 ;
  SimTime *arg2 = 0 ;
  SimTime result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SimTime **)&jarg1; 
  arg2 = *(SimTime **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SimTime const & reference is null");
    return 0;
  } 
  {
    try {
      result = SimTime_add__SWIG_0(arg1,(SimTime const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(SimTime **)&jresult = new SimTime((const SimTime &)result); 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_SimTime_1substract_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  SimTime *arg1 = (SimTime *) 0 ;
  SimTime *arg2 = 0 ;
  SimTime result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SimTime **)&jarg1; 
  arg2 = *(SimTime **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SimTime const & reference is null");
    return 0;
  } 
  {
    try {
      result = SimTime_substract__SWIG_0(arg1,(SimTime const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(SimTime **)&jresult = new SimTime((const SimTime &)result); 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_SimTime_1add_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  SimTime *arg1 = (SimTime *) 0 ;
  double arg2 ;
  SimTime result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SimTime **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      result = SimTime_add__SWIG_1(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(SimTime **)&jresult = new SimTime((const SimTime &)result); 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_SimTime_1substract_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  SimTime *arg1 = (SimTime *) 0 ;
  double arg2 ;
  SimTime result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SimTime **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      result = SimTime_substract__SWIG_1(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(SimTime **)&jresult = new SimTime((const SimTime &)result); 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_delete_1SimTime(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SimTime *arg1 = (SimTime *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = *(SimTime **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI__1i64mod(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  int64_t *arg1 = 0 ;
  int64_t *arg2 = 0 ;
  int64_t temp1 ;
  int64_t temp2 ;
  int64_t result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  temp1 = (int64_t)jarg1; 
  arg1 = &temp1; 
  temp2 = (int64_t)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = (int64_t)_i64mod((long long const &)*arg1,(long long const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_floor_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SimTime *arg1 = 0 ;
  SimTime result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SimTime **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SimTime const & reference is null");
    return 0;
  } 
  {
    try {
      result = floor((SimTime const &)*arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(SimTime **)&jresult = new SimTime((const SimTime &)result); 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_floor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  SimTime *arg1 = 0 ;
  SimTime *arg2 = 0 ;
  SimTime *arg3 = 0 ;
  SimTime result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(SimTime **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SimTime const & reference is null");
    return 0;
  } 
  arg2 = *(SimTime **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SimTime const & reference is null");
    return 0;
  } 
  arg3 = *(SimTime **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SimTime const & reference is null");
    return 0;
  } 
  {
    try {
      result = floor((SimTime const &)*arg1,(SimTime const &)*arg2,(SimTime const &)*arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(SimTime **)&jresult = new SimTime((const SimTime &)result); 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_floor_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  SimTime *arg1 = 0 ;
  SimTime *arg2 = 0 ;
  SimTime result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SimTime **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SimTime const & reference is null");
    return 0;
  } 
  arg2 = *(SimTime **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SimTime const & reference is null");
    return 0;
  } 
  {
    try {
      result = floor((SimTime const &)*arg1,(SimTime const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(SimTime **)&jresult = new SimTime((const SimTime &)result); 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_ceil_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SimTime *arg1 = 0 ;
  SimTime result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SimTime **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SimTime const & reference is null");
    return 0;
  } 
  {
    try {
      result = ceil((SimTime const &)*arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(SimTime **)&jresult = new SimTime((const SimTime &)result); 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_ceil_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  SimTime *arg1 = 0 ;
  SimTime *arg2 = 0 ;
  SimTime *arg3 = 0 ;
  SimTime result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(SimTime **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SimTime const & reference is null");
    return 0;
  } 
  arg2 = *(SimTime **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SimTime const & reference is null");
    return 0;
  } 
  arg3 = *(SimTime **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SimTime const & reference is null");
    return 0;
  } 
  {
    try {
      result = ceil((SimTime const &)*arg1,(SimTime const &)*arg2,(SimTime const &)*arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(SimTime **)&jresult = new SimTime((const SimTime &)result); 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_ceil_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  SimTime *arg1 = 0 ;
  SimTime *arg2 = 0 ;
  SimTime result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SimTime **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SimTime const & reference is null");
    return 0;
  } 
  arg2 = *(SimTime **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SimTime const & reference is null");
    return 0;
  } 
  {
    try {
      result = ceil((SimTime const &)*arg1,(SimTime const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(SimTime **)&jresult = new SimTime((const SimTime &)result); 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_fabs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SimTime *arg1 = 0 ;
  SimTime result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SimTime **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SimTime const & reference is null");
    return 0;
  } 
  {
    try {
      result = fabs((SimTime const &)*arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(SimTime **)&jresult = new SimTime((const SimTime &)result); 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_fmod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  SimTime *arg1 = 0 ;
  SimTime *arg2 = 0 ;
  SimTime result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SimTime **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SimTime const & reference is null");
    return 0;
  } 
  arg2 = *(SimTime **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SimTime const & reference is null");
    return 0;
  } 
  {
    try {
      result = fmod((SimTime const &)*arg1,(SimTime const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(SimTime **)&jresult = new SimTime((const SimTime &)result); 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cObject(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cObject *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      result = (cObject *)new cObject();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cObject **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_delete_1cObject(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cObject *arg1 = (cObject *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = *(cObject **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cObject_1getClassName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cObject *arg1 = (cObject *) 0 ;
  char *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cObject **)&jarg1; 
  {
    try {
      result = (char *)((cObject const *)arg1)->getClassName();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cObject_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cObject *arg1 = (cObject *) 0 ;
  char *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cObject **)&jarg1; 
  {
    try {
      result = (char *)((cObject const *)arg1)->getName();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cObject_1isName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  cObject *arg1 = (cObject *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cObject **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (bool)((cObject const *)arg1)->isName((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cObject_1getFullName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cObject *arg1 = (cObject *) 0 ;
  char *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cObject **)&jarg1; 
  {
    try {
      result = (char *)((cObject const *)arg1)->getFullName();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cObject_1getFullPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cObject *arg1 = (cObject *) 0 ;
  std::string result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cObject **)&jarg1; 
  {
    try {
      result = ((cObject const *)arg1)->getFullPath();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cObject_1info(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cObject *arg1 = (cObject *) 0 ;
  std::string result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cObject **)&jarg1; 
  {
    try {
      result = ((cObject const *)arg1)->info();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cObject_1detailedInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cObject *arg1 = (cObject *) 0 ;
  std::string result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cObject **)&jarg1; 
  {
    try {
      result = ((cObject const *)arg1)->detailedInfo();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cObject_1dup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cObject *arg1 = (cObject *) 0 ;
  cObject *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cObject **)&jarg1; 
  {
    try {
      result = (cObject *)((cObject const *)arg1)->dup();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cObject **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cObject_1getOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cObject *arg1 = (cObject *) 0 ;
  cObject *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cObject **)&jarg1; 
  {
    try {
      result = (cObject *)((cObject const *)arg1)->getOwner();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cObject **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cObject_1isOwnedObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cObject *arg1 = (cObject *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cObject **)&jarg1; 
  {
    try {
      result = (bool)((cObject const *)arg1)->isOwnedObject();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cObject_1forEachChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  cObject *arg1 = (cObject *) 0 ;
  cVisitor *arg2 = (cVisitor *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cObject **)&jarg1; 
  arg2 = *(cVisitor **)&jarg2; 
  {
    try {
      (arg1)->forEachChild(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cObject_1findObject_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  cObject *arg1 = (cObject *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  cObject *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cObject **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  {
    try {
      result = (cObject *)(arg1)->findObject((char const *)arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cObject **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cObject_1findObject_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  cObject *arg1 = (cObject *) 0 ;
  char *arg2 = (char *) 0 ;
  cObject *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cObject **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (cObject *)(arg1)->findObject((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cObject **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cObject_1copyNotSupported(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cObject *arg1 = (cObject *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cObject **)&jarg1; 
  {
    try {
      ((cObject const *)arg1)->copyNotSupported();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cObject_1hasField(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  cObject *arg1 = (cObject *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cObject **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (bool)cObject_hasField(arg1,(char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cObject_1getField(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  cObject *arg1 = (cObject *) 0 ;
  char *arg2 = (char *) 0 ;
  std::string result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cObject **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = cObject_getField(arg1,(char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cObject_1getArrayField(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jstring jresult = 0 ;
  cObject *arg1 = (cObject *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  std::string result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cObject **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  {
    try {
      result = cObject_getArrayField(arg1,(char const *)arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cObject_1setField(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  cObject *arg1 = (cObject *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cObject **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  {
    try {
      cObject_setField(arg1,(char const *)arg2,(char const *)arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cObject_1setArrayField(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jstring jarg4) {
  cObject *arg1 = (cObject *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cObject **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (int)jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  {
    try {
      cObject_setArrayField(arg1,(char const *)arg2,arg3,(char const *)arg4);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cObject_1isFieldArray(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  cObject *arg1 = (cObject *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cObject **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (bool)cObject_isFieldArray(arg1,(char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cObject_1isFieldCompound(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  cObject *arg1 = (cObject *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cObject **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (bool)cObject_isFieldCompound(arg1,(char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cObject_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cObject *arg1 = (cObject *) 0 ;
  cObject *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cObject **)&jarg1; 
  {
    try {
      result = (cObject *)cObject_cast(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cObject **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cNamedObject_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cNamedObject *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      result = (cNamedObject *)new cNamedObject();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cNamedObject **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cNamedObject_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  cNamedObject *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = jarg2 ? true : false; 
  {
    try {
      result = (cNamedObject *)new cNamedObject((char const *)arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cNamedObject **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cNamedObject_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  cNamedObject *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    try {
      result = (cNamedObject *)new cNamedObject((char const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cNamedObject **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cNamedObject_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cNamedObject *arg1 = 0 ;
  cNamedObject *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cNamedObject **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cNamedObject const & reference is null");
    return 0;
  } 
  {
    try {
      result = (cNamedObject *)new cNamedObject((cNamedObject const &)*arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cNamedObject **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_delete_1cNamedObject(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cNamedObject *arg1 = (cNamedObject *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = *(cNamedObject **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cNamedObject_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cNamedObject *arg1 = (cNamedObject *) 0 ;
  cNamedObject *arg2 = 0 ;
  cNamedObject *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cNamedObject **)&jarg1; 
  arg2 = *(cNamedObject **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cNamedObject const & reference is null");
    return 0;
  } 
  {
    try {
      result = (cNamedObject *) &(arg1)->operator =((cNamedObject const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cNamedObject **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cNamedObject_1setName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  cNamedObject *arg1 = (cNamedObject *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cNamedObject **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    try {
      (arg1)->setName((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cNamedObject_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cNamedObject *arg1 = (cNamedObject *) 0 ;
  char *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cNamedObject **)&jarg1; 
  {
    try {
      result = (char *)((cNamedObject const *)arg1)->getName();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cNamedObject_1setNamePooling(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  cNamedObject *arg1 = (cNamedObject *) 0 ;
  bool arg2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cNamedObject **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setNamePooling(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cNamedObject_1getNamePooling(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cNamedObject *arg1 = (cNamedObject *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cNamedObject **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->getNamePooling();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cOwnedObject_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cOwnedObject *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      result = (cOwnedObject *)new cOwnedObject();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cOwnedObject **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cOwnedObject_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  cOwnedObject *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = jarg2 ? true : false; 
  {
    try {
      result = (cOwnedObject *)new cOwnedObject((char const *)arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cOwnedObject **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cOwnedObject_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  cOwnedObject *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    try {
      result = (cOwnedObject *)new cOwnedObject((char const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cOwnedObject **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cOwnedObject_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cOwnedObject *arg1 = 0 ;
  cOwnedObject *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cOwnedObject **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cOwnedObject const & reference is null");
    return 0;
  } 
  {
    try {
      result = (cOwnedObject *)new cOwnedObject((cOwnedObject const &)*arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cOwnedObject **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_delete_1cOwnedObject(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cOwnedObject *arg1 = (cOwnedObject *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = *(cOwnedObject **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cOwnedObject_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cOwnedObject *arg1 = (cOwnedObject *) 0 ;
  cOwnedObject *arg2 = 0 ;
  cOwnedObject *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cOwnedObject **)&jarg1; 
  arg2 = *(cOwnedObject **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cOwnedObject const & reference is null");
    return 0;
  } 
  {
    try {
      result = (cOwnedObject *) &(arg1)->operator =((cOwnedObject const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cOwnedObject **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cOwnedObject_1getOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cOwnedObject *arg1 = (cOwnedObject *) 0 ;
  cObject *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cOwnedObject **)&jarg1; 
  {
    try {
      result = (cObject *)((cOwnedObject const *)arg1)->getOwner();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cObject **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cOwnedObject_1isOwnedObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cOwnedObject *arg1 = (cOwnedObject *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cOwnedObject **)&jarg1; 
  {
    try {
      result = (bool)((cOwnedObject const *)arg1)->isOwnedObject();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cOwnedObject_1isSoftOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cOwnedObject *arg1 = (cOwnedObject *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cOwnedObject **)&jarg1; 
  {
    try {
      result = (bool)((cOwnedObject const *)arg1)->isSoftOwner();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cOwnedObject_1getDefaultOwner(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cDefaultList *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      result = (cDefaultList *)cOwnedObject::getDefaultOwner();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cDefaultList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cOwnedObject_1getTotalObjectCount(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  long result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      result = (long)cOwnedObject::getTotalObjectCount();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cOwnedObject_1getLiveObjectCount(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  long result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      result = (long)cOwnedObject::getLiveObjectCount();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cOwnedObject_1resetObjectCounters(JNIEnv *jenv, jclass jcls) {
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      cOwnedObject::resetObjectCounters();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cNoncopyableOwnedObject_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  cNoncopyableOwnedObject *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = jarg2 ? true : false; 
  {
    try {
      result = (cNoncopyableOwnedObject *)new cNoncopyableOwnedObject((char const *)arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cNoncopyableOwnedObject **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cNoncopyableOwnedObject_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  cNoncopyableOwnedObject *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    try {
      result = (cNoncopyableOwnedObject *)new cNoncopyableOwnedObject((char const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cNoncopyableOwnedObject **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cNoncopyableOwnedObject_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cNoncopyableOwnedObject *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      result = (cNoncopyableOwnedObject *)new cNoncopyableOwnedObject();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cNoncopyableOwnedObject **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cNoncopyableOwnedObject_1dup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cNoncopyableOwnedObject *arg1 = (cNoncopyableOwnedObject *) 0 ;
  cNoncopyableOwnedObject *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cNoncopyableOwnedObject **)&jarg1; 
  {
    try {
      result = (cNoncopyableOwnedObject *)((cNoncopyableOwnedObject const *)arg1)->dup();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cNoncopyableOwnedObject **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_delete_1cNoncopyableOwnedObject(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cNoncopyableOwnedObject *arg1 = (cNoncopyableOwnedObject *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = *(cNoncopyableOwnedObject **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cDefaultList_1takeAllObjectsFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  cDefaultList *arg1 = (cDefaultList *) 0 ;
  cDefaultList *arg2 = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cDefaultList **)&jarg1; 
  arg2 = *(cDefaultList **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cDefaultList & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->takeAllObjectsFrom(*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cDefaultList_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  cDefaultList *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    try {
      result = (cDefaultList *)new cDefaultList((char const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cDefaultList **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cDefaultList_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cDefaultList *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      result = (cDefaultList *)new cDefaultList();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cDefaultList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_delete_1cDefaultList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cDefaultList *arg1 = (cDefaultList *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = *(cDefaultList **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cDefaultList_1isSoftOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cDefaultList *arg1 = (cDefaultList *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDefaultList **)&jarg1; 
  {
    try {
      result = (bool)((cDefaultList const *)arg1)->isSoftOwner();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cDefaultList_1info(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cDefaultList *arg1 = (cDefaultList *) 0 ;
  std::string result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDefaultList **)&jarg1; 
  {
    try {
      result = ((cDefaultList const *)arg1)->info();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cDefaultList_1forEachChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  cDefaultList *arg1 = (cDefaultList *) 0 ;
  cVisitor *arg2 = (cVisitor *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cDefaultList **)&jarg1; 
  arg2 = *(cVisitor **)&jarg2; 
  {
    try {
      (arg1)->forEachChild(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cDefaultList_1getPerformFinalGC(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cDefaultList *arg1 = (cDefaultList *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDefaultList **)&jarg1; 
  {
    try {
      result = (bool)((cDefaultList const *)arg1)->getPerformFinalGC();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cDefaultList_1setPerformFinalGC(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  cDefaultList *arg1 = (cDefaultList *) 0 ;
  bool arg2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDefaultList **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setPerformFinalGC(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cDefaultList_1defaultListSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cDefaultList *arg1 = (cDefaultList *) 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDefaultList **)&jarg1; 
  {
    try {
      result = (int)((cDefaultList const *)arg1)->defaultListSize();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cDefaultList_1defaultListGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  cDefaultList *arg1 = (cDefaultList *) 0 ;
  int arg2 ;
  cOwnedObject *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDefaultList **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (cOwnedObject *)(arg1)->defaultListGet(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cOwnedObject **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cDefaultList_1defaultListContains(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cDefaultList *arg1 = (cDefaultList *) 0 ;
  cOwnedObject *arg2 = (cOwnedObject *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cDefaultList **)&jarg1; 
  arg2 = *(cOwnedObject **)&jarg2; 
  {
    try {
      result = (bool)((cDefaultList const *)arg1)->defaultListContains(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cDefaultList_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cObject *arg1 = (cObject *) 0 ;
  cDefaultList *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cObject **)&jarg1; 
  {
    try {
      result = (cDefaultList *)cDefaultList_cast(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cDefaultList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cComponent_1setEvEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  cComponent *arg1 = (cComponent *) 0 ;
  bool arg2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cComponent **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setEvEnabled(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cComponent_1isEvEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cComponent *arg1 = (cComponent *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cComponent **)&jarg1; 
  {
    try {
      result = (bool)((cComponent const *)arg1)->isEvEnabled();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cComponent_1setComponentType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  cComponent *arg1 = (cComponent *) 0 ;
  cComponentType *arg2 = (cComponentType *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cComponent **)&jarg1; 
  arg2 = *(cComponentType **)&jarg2; 
  {
    try {
      (arg1)->setComponentType(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cComponent_1reallocParamv(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  cComponent *arg1 = (cComponent *) 0 ;
  int arg2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cComponent **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->reallocParamv(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cComponent_1recordParametersAsScalars(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cComponent *arg1 = (cComponent *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cComponent **)&jarg1; 
  {
    try {
      (arg1)->recordParametersAsScalars();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cComponent_1parametersFinalized(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cComponent *arg1 = (cComponent *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cComponent **)&jarg1; 
  {
    try {
      result = (bool)((cComponent const *)arg1)->parametersFinalized();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cComponent_1initialized(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cComponent *arg1 = (cComponent *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cComponent **)&jarg1; 
  {
    try {
      result = (bool)((cComponent const *)arg1)->initialized();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cComponent_1hasDisplayString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cComponent *arg1 = (cComponent *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cComponent **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->hasDisplayString();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cComponent_1checkLocalSignalConsistency(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cComponent *arg1 = (cComponent *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cComponent **)&jarg1; 
  {
    try {
      ((cComponent const *)arg1)->checkLocalSignalConsistency();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cComponent_1checkSignalConsistency(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cComponent *arg1 = (cComponent *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cComponent **)&jarg1; 
  {
    try {
      ((cComponent const *)arg1)->checkSignalConsistency();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cComponent_1clearSignalState(JNIEnv *jenv, jclass jcls) {
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      cComponent::clearSignalState();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cComponent_1clearSignalRegistrations(JNIEnv *jenv, jclass jcls) {
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      cComponent::clearSignalRegistrations();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jobject Java_org_omnetpp_simkernel_SimkernelJNI_cComponent_1getSignalMask(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jobject jresult = 0 ;
  simsignal_t arg1 ;
  simsignal_t *argp1 ;
  uint64_t result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  argp1 = *(simsignal_t **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null simsignal_t");
    return 0;
  }
  arg1 = *argp1; 
  {
    try {
      result = (uint64_t)cComponent::getSignalMask(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cComponent_1setCheckSignals(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  bool arg1 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  {
    try {
      cComponent::setCheckSignals(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cComponent_1getCheckSignals(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      result = (bool)cComponent::getCheckSignals();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_delete_1cComponent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cComponent *arg1 = (cComponent *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = *(cComponent **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cComponent_1forEachChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  cComponent *arg1 = (cComponent *) 0 ;
  cVisitor *arg2 = (cVisitor *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cComponent **)&jarg1; 
  arg2 = *(cVisitor **)&jarg2; 
  {
    try {
      (arg1)->forEachChild(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cComponent_1finalizeParameters(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cComponent *arg1 = (cComponent *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cComponent **)&jarg1; 
  {
    try {
      (arg1)->finalizeParameters();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cComponent_1getProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cComponent *arg1 = (cComponent *) 0 ;
  cProperties *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cComponent **)&jarg1; 
  {
    try {
      result = (cProperties *)((cComponent const *)arg1)->getProperties();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cProperties **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cComponent_1getComponentType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cComponent *arg1 = (cComponent *) 0 ;
  cComponentType *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cComponent **)&jarg1; 
  {
    try {
      result = (cComponentType *)((cComponent const *)arg1)->getComponentType();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cComponentType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cComponent_1getNedTypeName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cComponent *arg1 = (cComponent *) 0 ;
  char *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cComponent **)&jarg1; 
  {
    try {
      result = (char *)((cComponent const *)arg1)->getNedTypeName();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cComponent_1isModule(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cComponent *arg1 = (cComponent *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cComponent **)&jarg1; 
  {
    try {
      result = (bool)((cComponent const *)arg1)->isModule();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cComponent_1isChannel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cComponent *arg1 = (cComponent *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cComponent **)&jarg1; 
  {
    try {
      result = (bool)((cComponent const *)arg1)->isChannel();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cComponent_1getParentModule(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cComponent *arg1 = (cComponent *) 0 ;
  cModule *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cComponent **)&jarg1; 
  {
    try {
      result = (cModule *)((cComponent const *)arg1)->getParentModule();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cModule **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cComponent_1getRNG(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  cComponent *arg1 = (cComponent *) 0 ;
  int arg2 ;
  cRNG *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cComponent **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (cRNG *)((cComponent const *)arg1)->getRNG(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cRNG **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cComponent_1callInitialize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cComponent *arg1 = (cComponent *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cComponent **)&jarg1; 
  {
    try {
      (arg1)->callInitialize();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cComponent_1callInitialize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  cComponent *arg1 = (cComponent *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cComponent **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (bool)(arg1)->callInitialize(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cComponent_1callFinish(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cComponent *arg1 = (cComponent *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cComponent **)&jarg1; 
  {
    try {
      (arg1)->callFinish();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cComponent_1getNumParams(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cComponent *arg1 = (cComponent *) 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cComponent **)&jarg1; 
  {
    try {
      result = (int)((cComponent const *)arg1)->getNumParams();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cComponent_1par_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  cComponent *arg1 = (cComponent *) 0 ;
  int arg2 ;
  cPar *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cComponent **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (cPar *) &(arg1)->par(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cPar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cComponent_1par_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  cComponent *arg1 = (cComponent *) 0 ;
  char *arg2 = (char *) 0 ;
  cPar *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cComponent **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (cPar *) &(arg1)->par((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cPar **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cComponent_1findPar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  cComponent *arg1 = (cComponent *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cComponent **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (int)((cComponent const *)arg1)->findPar((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cComponent_1hasPar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  cComponent *arg1 = (cComponent *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cComponent **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (bool)((cComponent const *)arg1)->hasPar((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cComponent_1registerSignal(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  simsignal_t result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    try {
      result = cComponent::registerSignal((char const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(simsignal_t **)&jresult = new simsignal_t((const simsignal_t &)result); 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cComponent_1getSignalName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  simsignal_t arg1 ;
  simsignal_t *argp1 ;
  char *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  argp1 = *(simsignal_t **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null simsignal_t");
    return 0;
  }
  arg1 = *argp1; 
  {
    try {
      result = (char *)cComponent::getSignalName(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cComponent_1emit_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  cComponent *arg1 = (cComponent *) 0 ;
  simsignal_t arg2 ;
  bool arg3 ;
  simsignal_t *argp2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cComponent **)&jarg1; 
  argp2 = *(simsignal_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null simsignal_t");
    return ;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->emit(arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cComponent_1emit_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  cComponent *arg1 = (cComponent *) 0 ;
  simsignal_t arg2 ;
  long arg3 ;
  simsignal_t *argp2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cComponent **)&jarg1; 
  argp2 = *(simsignal_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null simsignal_t");
    return ;
  }
  arg2 = *argp2; 
  arg3 = (long)jarg3; 
  {
    try {
      (arg1)->emit(arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cComponent_1emit_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  cComponent *arg1 = (cComponent *) 0 ;
  simsignal_t arg2 ;
  unsigned long arg3 ;
  simsignal_t *argp2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cComponent **)&jarg1; 
  argp2 = *(simsignal_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null simsignal_t");
    return ;
  }
  arg2 = *argp2; 
  arg3 = (unsigned long)jarg3; 
  {
    try {
      (arg1)->emit(arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cComponent_1emit_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdouble jarg3) {
  cComponent *arg1 = (cComponent *) 0 ;
  simsignal_t arg2 ;
  double arg3 ;
  simsignal_t *argp2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cComponent **)&jarg1; 
  argp2 = *(simsignal_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null simsignal_t");
    return ;
  }
  arg2 = *argp2; 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->emit(arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cComponent_1emit_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  cComponent *arg1 = (cComponent *) 0 ;
  simsignal_t arg2 ;
  SimTime *arg3 = 0 ;
  simsignal_t *argp2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(cComponent **)&jarg1; 
  argp2 = *(simsignal_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null simsignal_t");
    return ;
  }
  arg2 = *argp2; 
  arg3 = *(SimTime **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SimTime const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->emit(arg2,(SimTime const &)*arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cComponent_1emit_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  cComponent *arg1 = (cComponent *) 0 ;
  simsignal_t arg2 ;
  char *arg3 = (char *) 0 ;
  simsignal_t *argp2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cComponent **)&jarg1; 
  argp2 = *(simsignal_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null simsignal_t");
    return ;
  }
  arg2 = *argp2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  {
    try {
      (arg1)->emit(arg2,(char const *)arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cComponent_1emit_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  cComponent *arg1 = (cComponent *) 0 ;
  simsignal_t arg2 ;
  cObject *arg3 = (cObject *) 0 ;
  simsignal_t *argp2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(cComponent **)&jarg1; 
  argp2 = *(simsignal_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null simsignal_t");
    return ;
  }
  arg2 = *argp2; 
  arg3 = *(cObject **)&jarg3; 
  {
    try {
      (arg1)->emit(arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cComponent_1emit_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jchar jarg3) {
  cComponent *arg1 = (cComponent *) 0 ;
  simsignal_t arg2 ;
  char arg3 ;
  simsignal_t *argp2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cComponent **)&jarg1; 
  argp2 = *(simsignal_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null simsignal_t");
    return ;
  }
  arg2 = *argp2; 
  arg3 = (char)jarg3; 
  {
    try {
      (arg1)->emit(arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cComponent_1emit_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jshort jarg3) {
  cComponent *arg1 = (cComponent *) 0 ;
  simsignal_t arg2 ;
  unsigned char arg3 ;
  simsignal_t *argp2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cComponent **)&jarg1; 
  argp2 = *(simsignal_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null simsignal_t");
    return ;
  }
  arg2 = *argp2; 
  arg3 = (unsigned char)jarg3; 
  {
    try {
      (arg1)->emit(arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cComponent_1emit_1_1SWIG_114(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jfloat jarg3) {
  cComponent *arg1 = (cComponent *) 0 ;
  simsignal_t arg2 ;
  float arg3 ;
  simsignal_t *argp2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cComponent **)&jarg1; 
  argp2 = *(simsignal_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null simsignal_t");
    return ;
  }
  arg2 = *argp2; 
  arg3 = (float)jarg3; 
  {
    try {
      (arg1)->emit(arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cComponent_1emit_1_1SWIG_115(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  cComponent *arg1 = (cComponent *) 0 ;
  simsignal_t arg2 ;
  long double arg3 ;
  simsignal_t *argp2 ;
  long double *argp3 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cComponent **)&jarg1; 
  argp2 = *(simsignal_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null simsignal_t");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(long double **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null long double");
    return ;
  }
  arg3 = *argp3; 
  {
    try {
      (arg1)->emit(arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cComponent_1mayHaveListeners(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  cComponent *arg1 = (cComponent *) 0 ;
  simsignal_t arg2 ;
  simsignal_t *argp2 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cComponent **)&jarg1; 
  argp2 = *(simsignal_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null simsignal_t");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)((cComponent const *)arg1)->mayHaveListeners(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cComponent_1hasListeners(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  cComponent *arg1 = (cComponent *) 0 ;
  simsignal_t arg2 ;
  simsignal_t *argp2 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cComponent **)&jarg1; 
  argp2 = *(simsignal_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null simsignal_t");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)((cComponent const *)arg1)->hasListeners(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cComponent_1subscribe_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  cComponent *arg1 = (cComponent *) 0 ;
  simsignal_t arg2 ;
  cIListener *arg3 = (cIListener *) 0 ;
  simsignal_t *argp2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cComponent **)&jarg1; 
  argp2 = *(simsignal_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null simsignal_t");
    return ;
  }
  arg2 = *argp2; 
  arg3 = *(cIListener **)&jarg3; 
  {
    try {
      (arg1)->subscribe(arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cComponent_1subscribe_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  cComponent *arg1 = (cComponent *) 0 ;
  char *arg2 = (char *) 0 ;
  cIListener *arg3 = (cIListener *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cComponent **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = *(cIListener **)&jarg3; 
  {
    try {
      (arg1)->subscribe((char const *)arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cComponent_1unsubscribe_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  cComponent *arg1 = (cComponent *) 0 ;
  simsignal_t arg2 ;
  cIListener *arg3 = (cIListener *) 0 ;
  simsignal_t *argp2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cComponent **)&jarg1; 
  argp2 = *(simsignal_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null simsignal_t");
    return ;
  }
  arg2 = *argp2; 
  arg3 = *(cIListener **)&jarg3; 
  {
    try {
      (arg1)->unsubscribe(arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cComponent_1unsubscribe_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  cComponent *arg1 = (cComponent *) 0 ;
  char *arg2 = (char *) 0 ;
  cIListener *arg3 = (cIListener *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cComponent **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = *(cIListener **)&jarg3; 
  {
    try {
      (arg1)->unsubscribe((char const *)arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cComponent_1isSubscribed_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  cComponent *arg1 = (cComponent *) 0 ;
  simsignal_t arg2 ;
  cIListener *arg3 = (cIListener *) 0 ;
  simsignal_t *argp2 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cComponent **)&jarg1; 
  argp2 = *(simsignal_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null simsignal_t");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = *(cIListener **)&jarg3; 
  {
    try {
      result = (bool)((cComponent const *)arg1)->isSubscribed(arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cComponent_1isSubscribed_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  cComponent *arg1 = (cComponent *) 0 ;
  char *arg2 = (char *) 0 ;
  cIListener *arg3 = (cIListener *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cComponent **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(cIListener **)&jarg3; 
  {
    try {
      result = (bool)((cComponent const *)arg1)->isSubscribed((char const *)arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cComponent_1getLocalListenedSignals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cComponent *arg1 = (cComponent *) 0 ;
  SwigValueWrapper< std::vector< simsignal_t > > result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cComponent **)&jarg1; 
  {
    try {
      result = ((cComponent const *)arg1)->getLocalListenedSignals();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(std::vector< simsignal_t > **)&jresult = new std::vector< simsignal_t >((const std::vector< simsignal_t > &)result); 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cComponent_1getLocalSignalListeners(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  cComponent *arg1 = (cComponent *) 0 ;
  simsignal_t arg2 ;
  simsignal_t *argp2 ;
  SwigValueWrapper< std::vector< cIListener * > > result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cComponent **)&jarg1; 
  argp2 = *(simsignal_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null simsignal_t");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = ((cComponent const *)arg1)->getLocalSignalListeners(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(std::vector< cIListener * > **)&jresult = new std::vector< cIListener * >((const std::vector< cIListener * > &)result); 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cComponent_1getDisplayString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cComponent *arg1 = (cComponent *) 0 ;
  cDisplayString *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cComponent **)&jarg1; 
  {
    try {
      result = (cDisplayString *) &(arg1)->getDisplayString();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cDisplayString **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cComponent_1setDisplayString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  cComponent *arg1 = (cComponent *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cComponent **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    try {
      (arg1)->setDisplayString((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cComponent_1bubble(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  cComponent *arg1 = (cComponent *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cComponent **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    try {
      (arg1)->bubble((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cComponent_1recordScalar_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jstring jarg4) {
  cComponent *arg1 = (cComponent *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  char *arg4 = (char *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cComponent **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (double)jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  {
    try {
      (arg1)->recordScalar((char const *)arg2,arg3,(char const *)arg4);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cComponent_1recordScalar_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3) {
  cComponent *arg1 = (cComponent *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cComponent **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->recordScalar((char const *)arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cComponent_1recordScalar_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jstring jarg4) {
  cComponent *arg1 = (cComponent *) 0 ;
  char *arg2 = (char *) 0 ;
  SimTime arg3 ;
  char *arg4 = (char *) 0 ;
  SimTime *argp3 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(cComponent **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  argp3 = *(SimTime **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SimTime");
    return ;
  }
  arg3 = *argp3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  {
    try {
      (arg1)->recordScalar((char const *)arg2,arg3,(char const *)arg4);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cComponent_1recordScalar_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  cComponent *arg1 = (cComponent *) 0 ;
  char *arg2 = (char *) 0 ;
  SimTime arg3 ;
  SimTime *argp3 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(cComponent **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  argp3 = *(SimTime **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SimTime");
    return ;
  }
  arg3 = *argp3; 
  {
    try {
      (arg1)->recordScalar((char const *)arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cComponent_1recordStatistic_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  cComponent *arg1 = (cComponent *) 0 ;
  cStatistic *arg2 = (cStatistic *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cComponent **)&jarg1; 
  arg2 = *(cStatistic **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  {
    try {
      (arg1)->recordStatistic(arg2,(char const *)arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cComponent_1recordStatistic_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  cComponent *arg1 = (cComponent *) 0 ;
  cStatistic *arg2 = (cStatistic *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cComponent **)&jarg1; 
  arg2 = *(cStatistic **)&jarg2; 
  {
    try {
      (arg1)->recordStatistic(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cComponent_1recordStatistic_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jstring jarg4) {
  cComponent *arg1 = (cComponent *) 0 ;
  char *arg2 = (char *) 0 ;
  cStatistic *arg3 = (cStatistic *) 0 ;
  char *arg4 = (char *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(cComponent **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = *(cStatistic **)&jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  {
    try {
      (arg1)->recordStatistic((char const *)arg2,arg3,(char const *)arg4);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cComponent_1recordStatistic_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  cComponent *arg1 = (cComponent *) 0 ;
  char *arg2 = (char *) 0 ;
  cStatistic *arg3 = (cStatistic *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(cComponent **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = *(cStatistic **)&jarg3; 
  {
    try {
      (arg1)->recordStatistic((char const *)arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cComponent_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cObject *arg1 = (cObject *) 0 ;
  cComponent *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cObject **)&jarg1; 
  {
    try {
      result = (cComponent *)cComponent_cast(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cComponent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cChannel_1setSourceGate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  cChannel *arg1 = (cChannel *) 0 ;
  cGate *arg2 = (cGate *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cChannel **)&jarg1; 
  arg2 = *(cGate **)&jarg2; 
  {
    try {
      (arg1)->setSourceGate(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cChannel_1setNedConnectionElementId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  cChannel *arg1 = (cChannel *) 0 ;
  int arg2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cChannel **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->setNedConnectionElementId(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cChannel_1getNedConnectionElementId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cChannel *arg1 = (cChannel *) 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cChannel **)&jarg1; 
  {
    try {
      result = (int)(arg1)->getNedConnectionElementId();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cChannel_1initializeChannel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  cChannel *arg1 = (cChannel *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cChannel **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (bool)(arg1)->initializeChannel(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cChannel_1finalizeParameters(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cChannel *arg1 = (cChannel *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cChannel **)&jarg1; 
  {
    try {
      (arg1)->finalizeParameters();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_delete_1cChannel(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cChannel *arg1 = (cChannel *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = *(cChannel **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cChannel_1info(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cChannel *arg1 = (cChannel *) 0 ;
  std::string result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cChannel **)&jarg1; 
  {
    try {
      result = ((cChannel const *)arg1)->info();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cChannel_1forEachChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  cChannel *arg1 = (cChannel *) 0 ;
  cVisitor *arg2 = (cVisitor *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cChannel **)&jarg1; 
  arg2 = *(cVisitor **)&jarg2; 
  {
    try {
      (arg1)->forEachChild(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cChannel_1callInitialize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cChannel *arg1 = (cChannel *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cChannel **)&jarg1; 
  {
    try {
      (arg1)->callInitialize();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cChannel_1callInitialize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  cChannel *arg1 = (cChannel *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cChannel **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (bool)(arg1)->callInitialize(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cChannel_1callFinish(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cChannel *arg1 = (cChannel *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cChannel **)&jarg1; 
  {
    try {
      (arg1)->callFinish();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cChannel_1getParentModule(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cChannel *arg1 = (cChannel *) 0 ;
  cModule *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cChannel **)&jarg1; 
  {
    try {
      result = (cModule *)((cChannel const *)arg1)->getParentModule();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cModule **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cChannel_1getChannelType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cChannel *arg1 = (cChannel *) 0 ;
  cChannelType *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cChannel **)&jarg1; 
  {
    try {
      result = (cChannelType *)((cChannel const *)arg1)->getChannelType();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cChannelType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cChannel_1getProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cChannel *arg1 = (cChannel *) 0 ;
  cProperties *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cChannel **)&jarg1; 
  {
    try {
      result = (cProperties *)((cChannel const *)arg1)->getProperties();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cProperties **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cChannel_1getSourceGate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cChannel *arg1 = (cChannel *) 0 ;
  cGate *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cChannel **)&jarg1; 
  {
    try {
      result = (cGate *)((cChannel const *)arg1)->getSourceGate();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cGate **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cChannel_1isTransmissionChannel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cChannel *arg1 = (cChannel *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cChannel **)&jarg1; 
  {
    try {
      result = (bool)((cChannel const *)arg1)->isTransmissionChannel();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_cChannel_1getNominalDatarate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  cChannel *arg1 = (cChannel *) 0 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cChannel **)&jarg1; 
  {
    try {
      result = (double)((cChannel const *)arg1)->getNominalDatarate();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cChannel_1calculateDuration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cChannel *arg1 = (cChannel *) 0 ;
  cMessage *arg2 = (cMessage *) 0 ;
  simtime_t result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cChannel **)&jarg1; 
  arg2 = *(cMessage **)&jarg2; 
  {
    try {
      result = ((cChannel const *)arg1)->calculateDuration(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(simtime_t **)&jresult = new simtime_t((const simtime_t &)result); 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cChannel_1getTransmissionFinishTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cChannel *arg1 = (cChannel *) 0 ;
  simtime_t result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cChannel **)&jarg1; 
  {
    try {
      result = ((cChannel const *)arg1)->getTransmissionFinishTime();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(simtime_t **)&jresult = new simtime_t((const simtime_t &)result); 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cChannel_1isBusy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cChannel *arg1 = (cChannel *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cChannel **)&jarg1; 
  {
    try {
      result = (bool)((cChannel const *)arg1)->isBusy();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cChannel_1forceTransmissionFinishTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  cChannel *arg1 = (cChannel *) 0 ;
  simtime_t arg2 ;
  simtime_t *argp2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cChannel **)&jarg1; 
  argp2 = *(simtime_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null simtime_t");
    return ;
  }
  arg2 = *argp2; 
  {
    try {
      (arg1)->forceTransmissionFinishTime(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cChannel_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cObject *arg1 = (cObject *) 0 ;
  cChannel *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cObject **)&jarg1; 
  {
    try {
      result = (cChannel *)cChannel_cast(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cChannel **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cIdealChannel_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  cIdealChannel *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    try {
      result = (cIdealChannel *)new cIdealChannel((char const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cIdealChannel **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cIdealChannel_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cIdealChannel *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      result = (cIdealChannel *)new cIdealChannel();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cIdealChannel **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_delete_1cIdealChannel(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cIdealChannel *arg1 = (cIdealChannel *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = *(cIdealChannel **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cIdealChannel_1create(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  cIdealChannel *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    try {
      result = (cIdealChannel *)cIdealChannel::create((char const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cIdealChannel **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_cIdealChannel_1getNominalDatarate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  cIdealChannel *arg1 = (cIdealChannel *) 0 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cIdealChannel **)&jarg1; 
  {
    try {
      result = (double)((cIdealChannel const *)arg1)->getNominalDatarate();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cIdealChannel_1isTransmissionChannel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cIdealChannel *arg1 = (cIdealChannel *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cIdealChannel **)&jarg1; 
  {
    try {
      result = (bool)((cIdealChannel const *)arg1)->isTransmissionChannel();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cIdealChannel_1calculateDuration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cIdealChannel *arg1 = (cIdealChannel *) 0 ;
  cMessage *arg2 = (cMessage *) 0 ;
  simtime_t result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cIdealChannel **)&jarg1; 
  arg2 = *(cMessage **)&jarg2; 
  {
    try {
      result = ((cIdealChannel const *)arg1)->calculateDuration(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(simtime_t **)&jresult = new simtime_t((const simtime_t &)result); 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cIdealChannel_1getTransmissionFinishTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cIdealChannel *arg1 = (cIdealChannel *) 0 ;
  simtime_t result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cIdealChannel **)&jarg1; 
  {
    try {
      result = ((cIdealChannel const *)arg1)->getTransmissionFinishTime();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(simtime_t **)&jresult = new simtime_t((const simtime_t &)result); 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cIdealChannel_1isBusy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cIdealChannel *arg1 = (cIdealChannel *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cIdealChannel **)&jarg1; 
  {
    try {
      result = (bool)((cIdealChannel const *)arg1)->isBusy();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cIdealChannel_1forceTransmissionFinishTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  cIdealChannel *arg1 = (cIdealChannel *) 0 ;
  simtime_t arg2 ;
  simtime_t *argp2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cIdealChannel **)&jarg1; 
  argp2 = *(simtime_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null simtime_t");
    return ;
  }
  arg2 = *argp2; 
  {
    try {
      (arg1)->forceTransmissionFinishTime(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cIdealChannel_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cObject *arg1 = (cObject *) 0 ;
  cIdealChannel *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cObject **)&jarg1; 
  {
    try {
      result = (cIdealChannel *)cIdealChannel_cast(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cIdealChannel **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cDelayChannel_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  cDelayChannel *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    try {
      result = (cDelayChannel *)new cDelayChannel((char const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cDelayChannel **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cDelayChannel_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cDelayChannel *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      result = (cDelayChannel *)new cDelayChannel();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cDelayChannel **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_delete_1cDelayChannel(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cDelayChannel *arg1 = (cDelayChannel *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = *(cDelayChannel **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cDelayChannel_1create(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  cDelayChannel *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    try {
      result = (cDelayChannel *)cDelayChannel::create((char const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cDelayChannel **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cDelayChannel_1isTransmissionChannel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cDelayChannel *arg1 = (cDelayChannel *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDelayChannel **)&jarg1; 
  {
    try {
      result = (bool)((cDelayChannel const *)arg1)->isTransmissionChannel();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_cDelayChannel_1getNominalDatarate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  cDelayChannel *arg1 = (cDelayChannel *) 0 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDelayChannel **)&jarg1; 
  {
    try {
      result = (double)((cDelayChannel const *)arg1)->getNominalDatarate();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cDelayChannel_1calculateDuration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cDelayChannel *arg1 = (cDelayChannel *) 0 ;
  cMessage *arg2 = (cMessage *) 0 ;
  simtime_t result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cDelayChannel **)&jarg1; 
  arg2 = *(cMessage **)&jarg2; 
  {
    try {
      result = ((cDelayChannel const *)arg1)->calculateDuration(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(simtime_t **)&jresult = new simtime_t((const simtime_t &)result); 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cDelayChannel_1getTransmissionFinishTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cDelayChannel *arg1 = (cDelayChannel *) 0 ;
  simtime_t result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDelayChannel **)&jarg1; 
  {
    try {
      result = ((cDelayChannel const *)arg1)->getTransmissionFinishTime();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(simtime_t **)&jresult = new simtime_t((const simtime_t &)result); 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cDelayChannel_1isBusy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cDelayChannel *arg1 = (cDelayChannel *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDelayChannel **)&jarg1; 
  {
    try {
      result = (bool)((cDelayChannel const *)arg1)->isBusy();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cDelayChannel_1forceTransmissionFinishTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  cDelayChannel *arg1 = (cDelayChannel *) 0 ;
  simtime_t arg2 ;
  simtime_t *argp2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cDelayChannel **)&jarg1; 
  argp2 = *(simtime_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null simtime_t");
    return ;
  }
  arg2 = *argp2; 
  {
    try {
      (arg1)->forceTransmissionFinishTime(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cDelayChannel_1setDelay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  cDelayChannel *arg1 = (cDelayChannel *) 0 ;
  double arg2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDelayChannel **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setDelay(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cDelayChannel_1setDisabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  cDelayChannel *arg1 = (cDelayChannel *) 0 ;
  bool arg2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDelayChannel **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setDisabled(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cDelayChannel_1getDelay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cDelayChannel *arg1 = (cDelayChannel *) 0 ;
  simtime_t result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDelayChannel **)&jarg1; 
  {
    try {
      result = ((cDelayChannel const *)arg1)->getDelay();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(simtime_t **)&jresult = new simtime_t((const simtime_t &)result); 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cDelayChannel_1isDisabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cDelayChannel *arg1 = (cDelayChannel *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDelayChannel **)&jarg1; 
  {
    try {
      result = (bool)((cDelayChannel const *)arg1)->isDisabled();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cDelayChannel_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cDelayChannel *arg1 = (cDelayChannel *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDelayChannel **)&jarg1; 
  {
    try {
      (arg1)->initialize();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cDelayChannel_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cObject *arg1 = (cObject *) 0 ;
  cDelayChannel *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cObject **)&jarg1; 
  {
    try {
      result = (cDelayChannel *)cDelayChannel_cast(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cDelayChannel **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cDatarateChannel_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  cDatarateChannel *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    try {
      result = (cDatarateChannel *)new cDatarateChannel((char const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cDatarateChannel **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cDatarateChannel_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cDatarateChannel *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      result = (cDatarateChannel *)new cDatarateChannel();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cDatarateChannel **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_delete_1cDatarateChannel(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cDatarateChannel *arg1 = (cDatarateChannel *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = *(cDatarateChannel **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cDatarateChannel_1create(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  cDatarateChannel *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    try {
      result = (cDatarateChannel *)cDatarateChannel::create((char const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cDatarateChannel **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cDatarateChannel_1info(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cDatarateChannel *arg1 = (cDatarateChannel *) 0 ;
  std::string result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDatarateChannel **)&jarg1; 
  {
    try {
      result = ((cDatarateChannel const *)arg1)->info();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cDatarateChannel_1isTransmissionChannel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cDatarateChannel *arg1 = (cDatarateChannel *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDatarateChannel **)&jarg1; 
  {
    try {
      result = (bool)((cDatarateChannel const *)arg1)->isTransmissionChannel();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cDatarateChannel_1setDelay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  cDatarateChannel *arg1 = (cDatarateChannel *) 0 ;
  double arg2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDatarateChannel **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setDelay(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cDatarateChannel_1setDatarate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  cDatarateChannel *arg1 = (cDatarateChannel *) 0 ;
  double arg2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDatarateChannel **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setDatarate(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cDatarateChannel_1setBitErrorRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  cDatarateChannel *arg1 = (cDatarateChannel *) 0 ;
  double arg2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDatarateChannel **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setBitErrorRate(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cDatarateChannel_1setPacketErrorRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  cDatarateChannel *arg1 = (cDatarateChannel *) 0 ;
  double arg2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDatarateChannel **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setPacketErrorRate(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cDatarateChannel_1setDisabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  cDatarateChannel *arg1 = (cDatarateChannel *) 0 ;
  bool arg2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDatarateChannel **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setDisabled(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cDatarateChannel_1getDelay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cDatarateChannel *arg1 = (cDatarateChannel *) 0 ;
  simtime_t result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDatarateChannel **)&jarg1; 
  {
    try {
      result = ((cDatarateChannel const *)arg1)->getDelay();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(simtime_t **)&jresult = new simtime_t((const simtime_t &)result); 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_cDatarateChannel_1getDatarate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  cDatarateChannel *arg1 = (cDatarateChannel *) 0 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDatarateChannel **)&jarg1; 
  {
    try {
      result = (double)((cDatarateChannel const *)arg1)->getDatarate();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_cDatarateChannel_1getBitErrorRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  cDatarateChannel *arg1 = (cDatarateChannel *) 0 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDatarateChannel **)&jarg1; 
  {
    try {
      result = (double)((cDatarateChannel const *)arg1)->getBitErrorRate();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_cDatarateChannel_1getPacketErrorRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  cDatarateChannel *arg1 = (cDatarateChannel *) 0 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDatarateChannel **)&jarg1; 
  {
    try {
      result = (double)((cDatarateChannel const *)arg1)->getPacketErrorRate();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cDatarateChannel_1isDisabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cDatarateChannel *arg1 = (cDatarateChannel *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDatarateChannel **)&jarg1; 
  {
    try {
      result = (bool)((cDatarateChannel const *)arg1)->isDisabled();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_cDatarateChannel_1getNominalDatarate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  cDatarateChannel *arg1 = (cDatarateChannel *) 0 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDatarateChannel **)&jarg1; 
  {
    try {
      result = (double)((cDatarateChannel const *)arg1)->getNominalDatarate();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cDatarateChannel_1calculateDuration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cDatarateChannel *arg1 = (cDatarateChannel *) 0 ;
  cMessage *arg2 = (cMessage *) 0 ;
  simtime_t result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cDatarateChannel **)&jarg1; 
  arg2 = *(cMessage **)&jarg2; 
  {
    try {
      result = ((cDatarateChannel const *)arg1)->calculateDuration(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(simtime_t **)&jresult = new simtime_t((const simtime_t &)result); 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cDatarateChannel_1getTransmissionFinishTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cDatarateChannel *arg1 = (cDatarateChannel *) 0 ;
  simtime_t result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDatarateChannel **)&jarg1; 
  {
    try {
      result = ((cDatarateChannel const *)arg1)->getTransmissionFinishTime();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(simtime_t **)&jresult = new simtime_t((const simtime_t &)result); 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cDatarateChannel_1isBusy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cDatarateChannel *arg1 = (cDatarateChannel *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDatarateChannel **)&jarg1; 
  {
    try {
      result = (bool)((cDatarateChannel const *)arg1)->isBusy();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cDatarateChannel_1forceTransmissionFinishTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  cDatarateChannel *arg1 = (cDatarateChannel *) 0 ;
  simtime_t arg2 ;
  simtime_t *argp2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cDatarateChannel **)&jarg1; 
  argp2 = *(simtime_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null simtime_t");
    return ;
  }
  arg2 = *argp2; 
  {
    try {
      (arg1)->forceTransmissionFinishTime(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cDatarateChannel_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cDatarateChannel *arg1 = (cDatarateChannel *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDatarateChannel **)&jarg1; 
  {
    try {
      (arg1)->initialize();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cDatarateChannel_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cObject *arg1 = (cObject *) 0 ;
  cDatarateChannel *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cObject **)&jarg1; 
  {
    try {
      result = (cDatarateChannel *)cDatarateChannel_cast(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cDatarateChannel **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cModule_1setRecordEvents(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  cModule *arg1 = (cModule *) 0 ;
  bool arg2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cModule **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setRecordEvents(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cModule_1isRecordEvents(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cModule *arg1 = (cModule *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cModule **)&jarg1; 
  {
    try {
      result = (bool)((cModule const *)arg1)->isRecordEvents();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cModule_1clearNamePools(JNIEnv *jenv, jclass jcls) {
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      cModule::clearNamePools();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cModule_1gateCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cModule *arg1 = (cModule *) 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cModule **)&jarg1; 
  {
    try {
      result = (int)((cModule const *)arg1)->gateCount();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cModule_1gateByOrdinal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  cModule *arg1 = (cModule *) 0 ;
  int arg2 ;
  cGate *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cModule **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (cGate *)((cModule const *)arg1)->gateByOrdinal(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cGate **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cModule_1getCanvasIfExists(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cModule *arg1 = (cModule *) 0 ;
  cCanvas *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cModule **)&jarg1; 
  {
    try {
      result = (cCanvas *)(arg1)->getCanvasIfExists();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cCanvas **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cModule(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cModule *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      result = (cModule *)new cModule();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cModule **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_delete_1cModule(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cModule *arg1 = (cModule *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = *(cModule **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cModule_1forEachChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  cModule *arg1 = (cModule *) 0 ;
  cVisitor *arg2 = (cVisitor *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cModule **)&jarg1; 
  arg2 = *(cVisitor **)&jarg2; 
  {
    try {
      (arg1)->forEachChild(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cModule_1setName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  cModule *arg1 = (cModule *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cModule **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    try {
      (arg1)->setName((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cModule_1getFullName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cModule *arg1 = (cModule *) 0 ;
  char *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cModule **)&jarg1; 
  {
    try {
      result = (char *)((cModule const *)arg1)->getFullName();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cModule_1getFullPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cModule *arg1 = (cModule *) 0 ;
  std::string result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cModule **)&jarg1; 
  {
    try {
      result = ((cModule const *)arg1)->getFullPath();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cModule_1info(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cModule *arg1 = (cModule *) 0 ;
  std::string result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cModule **)&jarg1; 
  {
    try {
      result = ((cModule const *)arg1)->info();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cModule_1addGate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  cModule *arg1 = (cModule *) 0 ;
  char *arg2 = (char *) 0 ;
  cGate::Type arg3 ;
  bool arg4 ;
  cGate *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cModule **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (cGate::Type)jarg3; 
  arg4 = jarg4 ? true : false; 
  {
    try {
      result = (cGate *)(arg1)->addGate((char const *)arg2,arg3,arg4);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cGate **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cModule_1addGate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jlong jresult = 0 ;
  cModule *arg1 = (cModule *) 0 ;
  char *arg2 = (char *) 0 ;
  cGate::Type arg3 ;
  cGate *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cModule **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (cGate::Type)jarg3; 
  {
    try {
      result = (cGate *)(arg1)->addGate((char const *)arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cGate **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cModule_1setGateSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  cModule *arg1 = (cModule *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cModule **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (int)jarg3; 
  {
    try {
      (arg1)->setGateSize((char const *)arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cModule_1getOrCreateFirstUnconnectedGate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jchar jarg3, jboolean jarg4, jboolean jarg5) {
  jlong jresult = 0 ;
  cModule *arg1 = (cModule *) 0 ;
  char *arg2 = (char *) 0 ;
  char arg3 ;
  bool arg4 ;
  bool arg5 ;
  cGate *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cModule **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (char)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  {
    try {
      result = (cGate *)(arg1)->getOrCreateFirstUnconnectedGate((char const *)arg2,arg3,arg4,arg5);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cGate **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cModule_1getOrCreateFirstUnconnectedGatePair(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3, jboolean jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_) {
  cModule *arg1 = (cModule *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool arg4 ;
  cGate **arg5 = 0 ;
  cGate **arg6 = 0 ;
  cGate *temp5 = 0 ;
  cGate *temp6 = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(cModule **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  temp5 = *(cGate **)&jarg5;
  arg5 = &temp5; 
  temp6 = *(cGate **)&jarg6;
  arg6 = &temp6; 
  {
    try {
      (arg1)->getOrCreateFirstUnconnectedGatePair((char const *)arg2,arg3,arg4,*arg5,*arg6);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cModule_1finalizeParameters(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cModule *arg1 = (cModule *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cModule **)&jarg1; 
  {
    try {
      (arg1)->finalizeParameters();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cModule_1buildInside(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cModule *arg1 = (cModule *) 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cModule **)&jarg1; 
  {
    try {
      result = (int)(arg1)->buildInside();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cModule_1isSimple(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cModule *arg1 = (cModule *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cModule **)&jarg1; 
  {
    try {
      result = (bool)((cModule const *)arg1)->isSimple();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cModule_1isModule(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cModule *arg1 = (cModule *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cModule **)&jarg1; 
  {
    try {
      result = (bool)((cModule const *)arg1)->isModule();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cModule_1isPlaceholder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cModule *arg1 = (cModule *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cModule **)&jarg1; 
  {
    try {
      result = (bool)((cModule const *)arg1)->isPlaceholder();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cModule_1getParentModule(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cModule *arg1 = (cModule *) 0 ;
  cModule *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cModule **)&jarg1; 
  {
    try {
      result = (cModule *)((cModule const *)arg1)->getParentModule();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cModule **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cModule_1getModuleType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cModule *arg1 = (cModule *) 0 ;
  cModuleType *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cModule **)&jarg1; 
  {
    try {
      result = (cModuleType *)((cModule const *)arg1)->getModuleType();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cModuleType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cModule_1getProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cModule *arg1 = (cModule *) 0 ;
  cProperties *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cModule **)&jarg1; 
  {
    try {
      result = (cProperties *)((cModule const *)arg1)->getProperties();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cProperties **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cModule_1getId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cModule *arg1 = (cModule *) 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cModule **)&jarg1; 
  {
    try {
      result = (int)((cModule const *)arg1)->getId();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cModule_1isVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cModule *arg1 = (cModule *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cModule **)&jarg1; 
  {
    try {
      result = (bool)((cModule const *)arg1)->isVector();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cModule_1getIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cModule *arg1 = (cModule *) 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cModule **)&jarg1; 
  {
    try {
      result = (int)((cModule const *)arg1)->getIndex();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cModule_1getVectorSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cModule *arg1 = (cModule *) 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cModule **)&jarg1; 
  {
    try {
      result = (int)((cModule const *)arg1)->getVectorSize();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cModule_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cModule *arg1 = (cModule *) 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cModule **)&jarg1; 
  {
    try {
      result = (int)((cModule const *)arg1)->size();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cModule_1hasSubmodules(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cModule *arg1 = (cModule *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cModule **)&jarg1; 
  {
    try {
      result = (bool)((cModule const *)arg1)->hasSubmodules();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cModule_1findSubmodule_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  cModule *arg1 = (cModule *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cModule **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  {
    try {
      result = (int)(arg1)->findSubmodule((char const *)arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cModule_1findSubmodule_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  cModule *arg1 = (cModule *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cModule **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (int)(arg1)->findSubmodule((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cModule_1getSubmodule_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jlong jresult = 0 ;
  cModule *arg1 = (cModule *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  cModule *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cModule **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  {
    try {
      result = (cModule *)(arg1)->getSubmodule((char const *)arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cModule **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cModule_1getSubmodule_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  cModule *arg1 = (cModule *) 0 ;
  char *arg2 = (char *) 0 ;
  cModule *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cModule **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (cModule *)(arg1)->getSubmodule((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cModule **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cModule_1getModuleByRelativePath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  cModule *arg1 = (cModule *) 0 ;
  char *arg2 = (char *) 0 ;
  cModule *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cModule **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (cModule *)(arg1)->getModuleByRelativePath((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cModule **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cModule_1getModuleByPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  cModule *arg1 = (cModule *) 0 ;
  char *arg2 = (char *) 0 ;
  cModule *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cModule **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (cModule *)(arg1)->getModuleByPath((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cModule **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cModule_1gate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jlong jresult = 0 ;
  cModule *arg1 = (cModule *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  cGate *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cModule **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  {
    try {
      result = (cGate *)(arg1)->gate((char const *)arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cGate **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cModule_1gate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  cModule *arg1 = (cModule *) 0 ;
  char *arg2 = (char *) 0 ;
  cGate *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cModule **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (cGate *)(arg1)->gate((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cGate **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cModule_1gateHalf_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jint jarg4) {
  jlong jresult = 0 ;
  cModule *arg1 = (cModule *) 0 ;
  char *arg2 = (char *) 0 ;
  cGate::Type arg3 ;
  int arg4 ;
  cGate *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cModule **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (cGate::Type)jarg3; 
  arg4 = (int)jarg4; 
  {
    try {
      result = (cGate *)(arg1)->gateHalf((char const *)arg2,arg3,arg4);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cGate **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cModule_1gateHalf_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jlong jresult = 0 ;
  cModule *arg1 = (cModule *) 0 ;
  char *arg2 = (char *) 0 ;
  cGate::Type arg3 ;
  cGate *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cModule **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (cGate::Type)jarg3; 
  {
    try {
      result = (cGate *)(arg1)->gateHalf((char const *)arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cGate **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cModule_1hasGate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  cModule *arg1 = (cModule *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cModule **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  {
    try {
      result = (bool)((cModule const *)arg1)->hasGate((char const *)arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cModule_1hasGate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  cModule *arg1 = (cModule *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cModule **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (bool)((cModule const *)arg1)->hasGate((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cModule_1findGate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  cModule *arg1 = (cModule *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cModule **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  {
    try {
      result = (int)((cModule const *)arg1)->findGate((char const *)arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cModule_1findGate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  cModule *arg1 = (cModule *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cModule **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (int)((cModule const *)arg1)->findGate((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cModule_1gate_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  cModule *arg1 = (cModule *) 0 ;
  int arg2 ;
  cGate *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cModule **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (cGate *)(arg1)->gate(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cGate **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cModule_1deleteGate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  cModule *arg1 = (cModule *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cModule **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    try {
      (arg1)->deleteGate((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cModule_1getGateNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cModule *arg1 = (cModule *) 0 ;
  std::vector< char const * > result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cModule **)&jarg1; 
  {
    try {
      result = ((cModule const *)arg1)->getGateNames();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(std::vector< char const * > **)&jresult = new std::vector< char const * >((const std::vector< char const * > &)result); 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cModule_1gateType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  cModule *arg1 = (cModule *) 0 ;
  char *arg2 = (char *) 0 ;
  cGate::Type result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cModule **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (cGate::Type)((cModule const *)arg1)->gateType((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cModule_1isGateVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  cModule *arg1 = (cModule *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cModule **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (bool)((cModule const *)arg1)->isGateVector((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cModule_1gateSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  cModule *arg1 = (cModule *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cModule **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (int)((cModule const *)arg1)->gateSize((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cModule_1gateBaseId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  cModule *arg1 = (cModule *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cModule **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (int)((cModule const *)arg1)->gateBaseId((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cModule_1checkInternalConnections(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cModule *arg1 = (cModule *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cModule **)&jarg1; 
  {
    try {
      result = (bool)((cModule const *)arg1)->checkInternalConnections();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cModule_1getAncestorPar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  cModule *arg1 = (cModule *) 0 ;
  char *arg2 = (char *) 0 ;
  cPar *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cModule **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (cPar *) &(arg1)->getAncestorPar((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cPar **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cModule_1getCanvas(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cModule *arg1 = (cModule *) 0 ;
  cCanvas *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cModule **)&jarg1; 
  {
    try {
      result = (cCanvas *)(arg1)->getCanvas();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cCanvas **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cModule_1callInitialize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cModule *arg1 = (cModule *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cModule **)&jarg1; 
  {
    try {
      (arg1)->callInitialize();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cModule_1callInitialize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  cModule *arg1 = (cModule *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cModule **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (bool)(arg1)->callInitialize(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cModule_1callFinish(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cModule *arg1 = (cModule *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cModule **)&jarg1; 
  {
    try {
      (arg1)->callFinish();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cModule_1scheduleStart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  cModule *arg1 = (cModule *) 0 ;
  simtime_t arg2 ;
  simtime_t *argp2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cModule **)&jarg1; 
  argp2 = *(simtime_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null simtime_t");
    return ;
  }
  arg2 = *argp2; 
  {
    try {
      (arg1)->scheduleStart(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cModule_1deleteModule(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cModule *arg1 = (cModule *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cModule **)&jarg1; 
  {
    try {
      (arg1)->deleteModule();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cModule_1changeParentTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  cModule *arg1 = (cModule *) 0 ;
  cModule *arg2 = (cModule *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cModule **)&jarg1; 
  arg2 = *(cModule **)&jarg2; 
  {
    try {
      (arg1)->changeParentTo(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cModule_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cObject *arg1 = (cObject *) 0 ;
  cModule *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cObject **)&jarg1; 
  {
    try {
      result = (cModule *)cModule_cast(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cModule **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cSimpleModule_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  cSimpleModule *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  {
    try {
      result = (cSimpleModule *)new cSimpleModule(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cSimpleModule **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cSimpleModule_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cSimpleModule *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      result = (cSimpleModule *)new cSimpleModule();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cSimpleModule **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cSimpleModule_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  cModule *arg2 = (cModule *) 0 ;
  unsigned int arg3 ;
  cSimpleModule *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg2_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(cModule **)&jarg2; 
  arg3 = (unsigned int)jarg3; 
  {
    try {
      result = (cSimpleModule *)new cSimpleModule((char const *)arg1,arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cSimpleModule **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_delete_1cSimpleModule(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cSimpleModule *arg1 = (cSimpleModule *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = *(cSimpleModule **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cSimpleModule_1info(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cSimpleModule *arg1 = (cSimpleModule *) 0 ;
  std::string result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cSimpleModule **)&jarg1; 
  {
    try {
      result = ((cSimpleModule const *)arg1)->info();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cSimpleModule_1forEachChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  cSimpleModule *arg1 = (cSimpleModule *) 0 ;
  cVisitor *arg2 = (cVisitor *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cSimpleModule **)&jarg1; 
  arg2 = *(cVisitor **)&jarg2; 
  {
    try {
      (arg1)->forEachChild(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cSimpleModule_1scheduleStart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  cSimpleModule *arg1 = (cSimpleModule *) 0 ;
  simtime_t arg2 ;
  simtime_t *argp2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cSimpleModule **)&jarg1; 
  argp2 = *(simtime_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null simtime_t");
    return ;
  }
  arg2 = *argp2; 
  {
    try {
      (arg1)->scheduleStart(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cSimpleModule_1deleteModule(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cSimpleModule *arg1 = (cSimpleModule *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cSimpleModule **)&jarg1; 
  {
    try {
      (arg1)->deleteModule();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cSimpleModule_1usesActivity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cSimpleModule *arg1 = (cSimpleModule *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cSimpleModule **)&jarg1; 
  {
    try {
      result = (bool)((cSimpleModule const *)arg1)->usesActivity();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cSimpleModule_1isTerminated(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cSimpleModule *arg1 = (cSimpleModule *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cSimpleModule **)&jarg1; 
  {
    try {
      result = (bool)((cSimpleModule const *)arg1)->isTerminated();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cSimpleModule_1snapshot_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jboolean jresult = 0 ;
  cSimpleModule *arg1 = (cSimpleModule *) 0 ;
  cObject *arg2 = (cObject *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cSimpleModule **)&jarg1; 
  arg2 = *(cObject **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  {
    try {
      result = (bool)(arg1)->snapshot(arg2,(char const *)arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cSimpleModule_1snapshot_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cSimpleModule *arg1 = (cSimpleModule *) 0 ;
  cObject *arg2 = (cObject *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cSimpleModule **)&jarg1; 
  arg2 = *(cObject **)&jarg2; 
  {
    try {
      result = (bool)(arg1)->snapshot(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cSimpleModule_1snapshot_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cSimpleModule *arg1 = (cSimpleModule *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cSimpleModule **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->snapshot();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cSimpleModule_1send_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  cSimpleModule *arg1 = (cSimpleModule *) 0 ;
  cMessage *arg2 = (cMessage *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cSimpleModule **)&jarg1; 
  arg2 = *(cMessage **)&jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      result = (int)(arg1)->send(arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cSimpleModule_1send_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jint jarg4) {
  jint jresult = 0 ;
  cSimpleModule *arg1 = (cSimpleModule *) 0 ;
  cMessage *arg2 = (cMessage *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cSimpleModule **)&jarg1; 
  arg2 = *(cMessage **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (int)jarg4; 
  {
    try {
      result = (int)(arg1)->send(arg2,(char const *)arg3,arg4);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cSimpleModule_1send_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jint jresult = 0 ;
  cSimpleModule *arg1 = (cSimpleModule *) 0 ;
  cMessage *arg2 = (cMessage *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cSimpleModule **)&jarg1; 
  arg2 = *(cMessage **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  {
    try {
      result = (int)(arg1)->send(arg2,(char const *)arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cSimpleModule_1send_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  cSimpleModule *arg1 = (cSimpleModule *) 0 ;
  cMessage *arg2 = (cMessage *) 0 ;
  cGate *arg3 = (cGate *) 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(cSimpleModule **)&jarg1; 
  arg2 = *(cMessage **)&jarg2; 
  arg3 = *(cGate **)&jarg3; 
  {
    try {
      result = (int)(arg1)->send(arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cSimpleModule_1sendDelayed_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4) {
  jint jresult = 0 ;
  cSimpleModule *arg1 = (cSimpleModule *) 0 ;
  cMessage *arg2 = (cMessage *) 0 ;
  simtime_t arg3 ;
  int arg4 ;
  simtime_t *argp3 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(cSimpleModule **)&jarg1; 
  arg2 = *(cMessage **)&jarg2; 
  argp3 = *(simtime_t **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null simtime_t");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (int)jarg4; 
  {
    try {
      result = (int)(arg1)->sendDelayed(arg2,arg3,arg4);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cSimpleModule_1sendDelayed_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jstring jarg4, jint jarg5) {
  jint jresult = 0 ;
  cSimpleModule *arg1 = (cSimpleModule *) 0 ;
  cMessage *arg2 = (cMessage *) 0 ;
  simtime_t arg3 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  simtime_t *argp3 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(cSimpleModule **)&jarg1; 
  arg2 = *(cMessage **)&jarg2; 
  argp3 = *(simtime_t **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null simtime_t");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = (int)jarg5; 
  {
    try {
      result = (int)(arg1)->sendDelayed(arg2,arg3,(char const *)arg4,arg5);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cSimpleModule_1sendDelayed_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jstring jarg4) {
  jint jresult = 0 ;
  cSimpleModule *arg1 = (cSimpleModule *) 0 ;
  cMessage *arg2 = (cMessage *) 0 ;
  simtime_t arg3 ;
  char *arg4 = (char *) 0 ;
  simtime_t *argp3 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(cSimpleModule **)&jarg1; 
  arg2 = *(cMessage **)&jarg2; 
  argp3 = *(simtime_t **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null simtime_t");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  {
    try {
      result = (int)(arg1)->sendDelayed(arg2,arg3,(char const *)arg4);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cSimpleModule_1sendDelayed_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jint jresult = 0 ;
  cSimpleModule *arg1 = (cSimpleModule *) 0 ;
  cMessage *arg2 = (cMessage *) 0 ;
  simtime_t arg3 ;
  cGate *arg4 = (cGate *) 0 ;
  simtime_t *argp3 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(cSimpleModule **)&jarg1; 
  arg2 = *(cMessage **)&jarg2; 
  argp3 = *(simtime_t **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null simtime_t");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = *(cGate **)&jarg4; 
  {
    try {
      result = (int)(arg1)->sendDelayed(arg2,arg3,arg4);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cSimpleModule_1sendDirect_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jstring jarg4, jint jarg5) {
  jint jresult = 0 ;
  cSimpleModule *arg1 = (cSimpleModule *) 0 ;
  cMessage *arg2 = (cMessage *) 0 ;
  cModule *arg3 = (cModule *) 0 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(cSimpleModule **)&jarg1; 
  arg2 = *(cMessage **)&jarg2; 
  arg3 = *(cModule **)&jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = (int)jarg5; 
  {
    try {
      result = (int)(arg1)->sendDirect(arg2,arg3,(char const *)arg4,arg5);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cSimpleModule_1sendDirect_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jstring jarg4) {
  jint jresult = 0 ;
  cSimpleModule *arg1 = (cSimpleModule *) 0 ;
  cMessage *arg2 = (cMessage *) 0 ;
  cModule *arg3 = (cModule *) 0 ;
  char *arg4 = (char *) 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(cSimpleModule **)&jarg1; 
  arg2 = *(cMessage **)&jarg2; 
  arg3 = *(cModule **)&jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  {
    try {
      result = (int)(arg1)->sendDirect(arg2,arg3,(char const *)arg4);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cSimpleModule_1sendDirect_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4) {
  jint jresult = 0 ;
  cSimpleModule *arg1 = (cSimpleModule *) 0 ;
  cMessage *arg2 = (cMessage *) 0 ;
  cModule *arg3 = (cModule *) 0 ;
  int arg4 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(cSimpleModule **)&jarg1; 
  arg2 = *(cMessage **)&jarg2; 
  arg3 = *(cModule **)&jarg3; 
  arg4 = (int)jarg4; 
  {
    try {
      result = (int)(arg1)->sendDirect(arg2,arg3,arg4);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cSimpleModule_1sendDirect_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  cSimpleModule *arg1 = (cSimpleModule *) 0 ;
  cMessage *arg2 = (cMessage *) 0 ;
  cGate *arg3 = (cGate *) 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(cSimpleModule **)&jarg1; 
  arg2 = *(cMessage **)&jarg2; 
  arg3 = *(cGate **)&jarg3; 
  {
    try {
      result = (int)(arg1)->sendDirect(arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cSimpleModule_1sendDirect_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jstring jarg6, jint jarg7) {
  jint jresult = 0 ;
  cSimpleModule *arg1 = (cSimpleModule *) 0 ;
  cMessage *arg2 = (cMessage *) 0 ;
  simtime_t arg3 ;
  simtime_t arg4 ;
  cModule *arg5 = (cModule *) 0 ;
  char *arg6 = (char *) 0 ;
  int arg7 ;
  simtime_t *argp3 ;
  simtime_t *argp4 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(cSimpleModule **)&jarg1; 
  arg2 = *(cMessage **)&jarg2; 
  argp3 = *(simtime_t **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null simtime_t");
    return 0;
  }
  arg3 = *argp3; 
  argp4 = *(simtime_t **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null simtime_t");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = *(cModule **)&jarg5; 
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  arg7 = (int)jarg7; 
  {
    try {
      result = (int)(arg1)->sendDirect(arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cSimpleModule_1sendDirect_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jstring jarg6) {
  jint jresult = 0 ;
  cSimpleModule *arg1 = (cSimpleModule *) 0 ;
  cMessage *arg2 = (cMessage *) 0 ;
  simtime_t arg3 ;
  simtime_t arg4 ;
  cModule *arg5 = (cModule *) 0 ;
  char *arg6 = (char *) 0 ;
  simtime_t *argp3 ;
  simtime_t *argp4 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(cSimpleModule **)&jarg1; 
  arg2 = *(cMessage **)&jarg2; 
  argp3 = *(simtime_t **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null simtime_t");
    return 0;
  }
  arg3 = *argp3; 
  argp4 = *(simtime_t **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null simtime_t");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = *(cModule **)&jarg5; 
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  {
    try {
      result = (int)(arg1)->sendDirect(arg2,arg3,arg4,arg5,(char const *)arg6);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cSimpleModule_1sendDirect_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jint jarg6) {
  jint jresult = 0 ;
  cSimpleModule *arg1 = (cSimpleModule *) 0 ;
  cMessage *arg2 = (cMessage *) 0 ;
  simtime_t arg3 ;
  simtime_t arg4 ;
  cModule *arg5 = (cModule *) 0 ;
  int arg6 ;
  simtime_t *argp3 ;
  simtime_t *argp4 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(cSimpleModule **)&jarg1; 
  arg2 = *(cMessage **)&jarg2; 
  argp3 = *(simtime_t **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null simtime_t");
    return 0;
  }
  arg3 = *argp3; 
  argp4 = *(simtime_t **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null simtime_t");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = *(cModule **)&jarg5; 
  arg6 = (int)jarg6; 
  {
    try {
      result = (int)(arg1)->sendDirect(arg2,arg3,arg4,arg5,arg6);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cSimpleModule_1sendDirect_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jint jresult = 0 ;
  cSimpleModule *arg1 = (cSimpleModule *) 0 ;
  cMessage *arg2 = (cMessage *) 0 ;
  simtime_t arg3 ;
  simtime_t arg4 ;
  cGate *arg5 = (cGate *) 0 ;
  simtime_t *argp3 ;
  simtime_t *argp4 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(cSimpleModule **)&jarg1; 
  arg2 = *(cMessage **)&jarg2; 
  argp3 = *(simtime_t **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null simtime_t");
    return 0;
  }
  arg3 = *argp3; 
  argp4 = *(simtime_t **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null simtime_t");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = *(cGate **)&jarg5; 
  {
    try {
      result = (int)(arg1)->sendDirect(arg2,arg3,arg4,arg5);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cSimpleModule_1scheduleAt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  cSimpleModule *arg1 = (cSimpleModule *) 0 ;
  simtime_t arg2 ;
  cMessage *arg3 = (cMessage *) 0 ;
  simtime_t *argp2 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(cSimpleModule **)&jarg1; 
  argp2 = *(simtime_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null simtime_t");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = *(cMessage **)&jarg3; 
  {
    try {
      result = (int)(arg1)->scheduleAt(arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cSimpleModule_1cancelEvent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cSimpleModule *arg1 = (cSimpleModule *) 0 ;
  cMessage *arg2 = (cMessage *) 0 ;
  cMessage *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cSimpleModule **)&jarg1; 
  arg2 = *(cMessage **)&jarg2; 
  {
    try {
      result = (cMessage *)(arg1)->cancelEvent(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cMessage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cSimpleModule_1cancelAndDelete(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  cSimpleModule *arg1 = (cSimpleModule *) 0 ;
  cMessage *arg2 = (cMessage *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cSimpleModule **)&jarg1; 
  arg2 = *(cMessage **)&jarg2; 
  {
    try {
      (arg1)->cancelAndDelete(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cSimpleModule_1wait(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  cSimpleModule *arg1 = (cSimpleModule *) 0 ;
  simtime_t arg2 ;
  simtime_t *argp2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cSimpleModule **)&jarg1; 
  argp2 = *(simtime_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null simtime_t");
    return ;
  }
  arg2 = *argp2; 
  {
    try {
      (arg1)->wait(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cSimpleModule_1waitAndEnqueue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  cSimpleModule *arg1 = (cSimpleModule *) 0 ;
  simtime_t arg2 ;
  cQueue *arg3 = (cQueue *) 0 ;
  simtime_t *argp2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(cSimpleModule **)&jarg1; 
  argp2 = *(simtime_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null simtime_t");
    return ;
  }
  arg2 = *argp2; 
  arg3 = *(cQueue **)&jarg3; 
  {
    try {
      (arg1)->waitAndEnqueue(arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cSimpleModule_1endSimulation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cSimpleModule *arg1 = (cSimpleModule *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cSimpleModule **)&jarg1; 
  {
    try {
      (arg1)->endSimulation();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cSimpleModule_1halt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cSimpleModule *arg1 = (cSimpleModule *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cSimpleModule **)&jarg1; 
  {
    try {
      (arg1)->halt();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cSimpleModule_1error(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  cSimpleModule *arg1 = (cSimpleModule *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cSimpleModule **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    try {
      ((cSimpleModule const *)arg1)->error((char const *)arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cSimpleModule_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cObject *arg1 = (cObject *) 0 ;
  cSimpleModule *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cObject **)&jarg1; 
  {
    try {
      result = (cSimpleModule *)cSimpleModule_cast(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cSimpleModule **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cComponentType_1getPackageProperty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  cComponentType *arg1 = (cComponentType *) 0 ;
  char *arg2 = (char *) 0 ;
  std::string result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cComponentType **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = ((cComponentType const *)arg1)->getPackageProperty((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cComponentType_1isAvailable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cComponentType *arg1 = (cComponentType *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cComponentType **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->isAvailable();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cComponentType_1isInnerType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cComponentType *arg1 = (cComponentType *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cComponentType **)&jarg1; 
  {
    try {
      result = (bool)((cComponentType const *)arg1)->isInnerType();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cComponentType_1getCxxNamespace(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cComponentType *arg1 = (cComponentType *) 0 ;
  std::string result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cComponentType **)&jarg1; 
  {
    try {
      result = ((cComponentType const *)arg1)->getCxxNamespace();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cComponentType_1checkSignal_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_) {
  cComponentType *arg1 = (cComponentType *) 0 ;
  simsignal_t arg2 ;
  SimsignalType arg3 ;
  cObject *arg4 = (cObject *) 0 ;
  simsignal_t *argp2 ;
  SimsignalType *argp3 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(cComponentType **)&jarg1; 
  argp2 = *(simsignal_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null simsignal_t");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(SimsignalType **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SimsignalType");
    return ;
  }
  arg3 = *argp3; 
  arg4 = *(cObject **)&jarg4; 
  {
    try {
      (arg1)->checkSignal(arg2,arg3,arg4);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cComponentType_1checkSignal_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  cComponentType *arg1 = (cComponentType *) 0 ;
  simsignal_t arg2 ;
  SimsignalType arg3 ;
  simsignal_t *argp2 ;
  SimsignalType *argp3 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cComponentType **)&jarg1; 
  argp2 = *(simsignal_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null simsignal_t");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(SimsignalType **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SimsignalType");
    return ;
  }
  arg3 = *argp3; 
  {
    try {
      (arg1)->checkSignal(arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_delete_1cComponentType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cComponentType *arg1 = (cComponentType *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = *(cComponentType **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cComponentType_1getFullName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cComponentType *arg1 = (cComponentType *) 0 ;
  char *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cComponentType **)&jarg1; 
  {
    try {
      result = (char *)((cComponentType const *)arg1)->getFullName();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cComponentType_1find(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  cComponentType *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    try {
      result = (cComponentType *)cComponentType::find((char const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cComponentType **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cComponentType_1get(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  cComponentType *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    try {
      result = (cComponentType *)cComponentType::get((char const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cComponentType **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cComponentType_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cObject *arg1 = (cObject *) 0 ;
  cComponentType *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cObject **)&jarg1; 
  {
    try {
      result = (cComponentType *)cComponentType_cast(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cComponentType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cModuleType_1isNetwork(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cModuleType *arg1 = (cModuleType *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cModuleType **)&jarg1; 
  {
    try {
      result = (bool)((cModuleType const *)arg1)->isNetwork();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cModuleType_1isSimple(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cModuleType *arg1 = (cModuleType *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cModuleType **)&jarg1; 
  {
    try {
      result = (bool)((cModuleType const *)arg1)->isSimple();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cModuleType_1create_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  cModuleType *arg1 = (cModuleType *) 0 ;
  char *arg2 = (char *) 0 ;
  cModule *arg3 = (cModule *) 0 ;
  cModule *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(cModuleType **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(cModule **)&jarg3; 
  {
    try {
      result = (cModule *)(arg1)->create((char const *)arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cModule **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cModuleType_1create_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jint jarg4, jint jarg5) {
  jlong jresult = 0 ;
  cModuleType *arg1 = (cModuleType *) 0 ;
  char *arg2 = (char *) 0 ;
  cModule *arg3 = (cModule *) 0 ;
  int arg4 ;
  int arg5 ;
  cModule *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(cModuleType **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(cModule **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  {
    try {
      result = (cModule *)(arg1)->create((char const *)arg2,arg3,arg4,arg5);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cModule **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cModuleType_1createScheduleInit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  cModuleType *arg1 = (cModuleType *) 0 ;
  char *arg2 = (char *) 0 ;
  cModule *arg3 = (cModule *) 0 ;
  cModule *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(cModuleType **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(cModule **)&jarg3; 
  {
    try {
      result = (cModule *)(arg1)->createScheduleInit((char const *)arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cModule **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cModuleType_1find(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  cModuleType *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    try {
      result = (cModuleType *)cModuleType::find((char const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cModuleType **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cModuleType_1get(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  cModuleType *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    try {
      result = (cModuleType *)cModuleType::get((char const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cModuleType **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cModuleType_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cObject *arg1 = (cObject *) 0 ;
  cModuleType *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cObject **)&jarg1; 
  {
    try {
      result = (cModuleType *)cModuleType_cast(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cModuleType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_delete_1cModuleType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cModuleType *arg1 = (cModuleType *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = *(cModuleType **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cChannelType_1create(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  cChannelType *arg1 = (cChannelType *) 0 ;
  char *arg2 = (char *) 0 ;
  cChannel *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cChannelType **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (cChannel *)(arg1)->create((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cChannel **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cChannelType_1find(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  cChannelType *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    try {
      result = (cChannelType *)cChannelType::find((char const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cChannelType **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cChannelType_1get(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  cChannelType *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    try {
      result = (cChannelType *)cChannelType::get((char const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cChannelType **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cChannelType_1getIdealChannelType(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cChannelType *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      result = (cChannelType *)cChannelType::getIdealChannelType();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cChannelType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cChannelType_1getDelayChannelType(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cChannelType *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      result = (cChannelType *)cChannelType::getDelayChannelType();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cChannelType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cChannelType_1getDatarateChannelType(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cChannelType *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      result = (cChannelType *)cChannelType::getDatarateChannelType();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cChannelType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cChannelType_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cObject *arg1 = (cObject *) 0 ;
  cChannelType *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cObject **)&jarg1; 
  {
    try {
      result = (cChannelType *)cChannelType_cast(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cChannelType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_delete_1cChannelType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cChannelType *arg1 = (cChannelType *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = *(cChannelType **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cArray_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int arg3 ;
  cArray *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      result = (cArray *)new cArray((char const *)arg1,arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cArray **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cArray_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  cArray *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  {
    try {
      result = (cArray *)new cArray((char const *)arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cArray **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cArray_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  cArray *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    try {
      result = (cArray *)new cArray((char const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cArray **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cArray_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cArray *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      result = (cArray *)new cArray();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_delete_1cArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cArray *arg1 = (cArray *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = *(cArray **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cArray_1dup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cArray *arg1 = (cArray *) 0 ;
  cArray *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cArray **)&jarg1; 
  {
    try {
      result = (cArray *)((cArray const *)arg1)->dup();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cArray_1info(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cArray *arg1 = (cArray *) 0 ;
  std::string result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cArray **)&jarg1; 
  {
    try {
      result = ((cArray const *)arg1)->info();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cArray_1forEachChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  cArray *arg1 = (cArray *) 0 ;
  cVisitor *arg2 = (cVisitor *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cArray **)&jarg1; 
  arg2 = *(cVisitor **)&jarg2; 
  {
    try {
      (arg1)->forEachChild(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cArray_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cArray *arg1 = (cArray *) 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cArray **)&jarg1; 
  {
    try {
      result = (int)((cArray const *)arg1)->size();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cArray_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cArray *arg1 = (cArray *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cArray **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cArray_1getCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cArray *arg1 = (cArray *) 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cArray **)&jarg1; 
  {
    try {
      result = (int)((cArray const *)arg1)->getCapacity();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cArray_1setCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  cArray *arg1 = (cArray *) 0 ;
  int arg2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cArray **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->setCapacity(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cArray_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  cArray *arg1 = (cArray *) 0 ;
  cObject *arg2 = (cObject *) 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cArray **)&jarg1; 
  arg2 = *(cObject **)&jarg2; 
  {
    try {
      result = (int)(arg1)->add(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cArray_1addAt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  cArray *arg1 = (cArray *) 0 ;
  int arg2 ;
  cObject *arg3 = (cObject *) 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(cArray **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(cObject **)&jarg3; 
  {
    try {
      result = (int)(arg1)->addAt(arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cArray_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  cArray *arg1 = (cArray *) 0 ;
  cObject *arg2 = (cObject *) 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cArray **)&jarg1; 
  arg2 = *(cObject **)&jarg2; 
  {
    try {
      result = (int)(arg1)->set(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cArray_1find_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  cArray *arg1 = (cArray *) 0 ;
  cObject *arg2 = (cObject *) 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cArray **)&jarg1; 
  arg2 = *(cObject **)&jarg2; 
  {
    try {
      result = (int)((cArray const *)arg1)->find(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cArray_1find_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  cArray *arg1 = (cArray *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cArray **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (int)((cArray const *)arg1)->find((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cArray_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  cArray *arg1 = (cArray *) 0 ;
  int arg2 ;
  cObject *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cArray **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (cObject *)(arg1)->get(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cObject **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cArray_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  cArray *arg1 = (cArray *) 0 ;
  char *arg2 = (char *) 0 ;
  cObject *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cArray **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (cObject *)(arg1)->get((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cObject **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cArray_1exist_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  cArray *arg1 = (cArray *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cArray **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (bool)((cArray const *)arg1)->exist(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cArray_1exist_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  cArray *arg1 = (cArray *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cArray **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (bool)((cArray const *)arg1)->exist((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cArray_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  cArray *arg1 = (cArray *) 0 ;
  int arg2 ;
  cObject *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cArray **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (cObject *)(arg1)->remove(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cObject **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cArray_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  cArray *arg1 = (cArray *) 0 ;
  char *arg2 = (char *) 0 ;
  cObject *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cArray **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (cObject *)(arg1)->remove((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cObject **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cArray_1remove_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cArray *arg1 = (cArray *) 0 ;
  cObject *arg2 = (cObject *) 0 ;
  cObject *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cArray **)&jarg1; 
  arg2 = *(cObject **)&jarg2; 
  {
    try {
      result = (cObject *)(arg1)->remove(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cObject **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cArray_1setTakeOwnership(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  cArray *arg1 = (cArray *) 0 ;
  bool arg2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cArray **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setTakeOwnership(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cArray_1getTakeOwnership(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cArray *arg1 = (cArray *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cArray **)&jarg1; 
  {
    try {
      result = (bool)((cArray const *)arg1)->getTakeOwnership();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cArray_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cObject *arg1 = (cObject *) 0 ;
  cArray *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cObject **)&jarg1; 
  {
    try {
      result = (cArray *)cArray_cast(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cQueue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  cQueue *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    try {
      result = (cQueue *)new cQueue((char const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cQueue **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cQueue_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cQueue *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      result = (cQueue *)new cQueue();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cQueue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_delete_1cQueue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cQueue *arg1 = (cQueue *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = *(cQueue **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cQueue_1dup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cQueue *arg1 = (cQueue *) 0 ;
  cQueue *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cQueue **)&jarg1; 
  {
    try {
      result = (cQueue *)((cQueue const *)arg1)->dup();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cQueue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cQueue_1info(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cQueue *arg1 = (cQueue *) 0 ;
  std::string result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cQueue **)&jarg1; 
  {
    try {
      result = ((cQueue const *)arg1)->info();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cQueue_1forEachChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  cQueue *arg1 = (cQueue *) 0 ;
  cVisitor *arg2 = (cVisitor *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cQueue **)&jarg1; 
  arg2 = *(cVisitor **)&jarg2; 
  {
    try {
      (arg1)->forEachChild(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cQueue_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  cQueue *arg1 = (cQueue *) 0 ;
  cObject *arg2 = (cObject *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cQueue **)&jarg1; 
  arg2 = *(cObject **)&jarg2; 
  {
    try {
      (arg1)->insert(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cQueue_1insertBefore(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  cQueue *arg1 = (cQueue *) 0 ;
  cObject *arg2 = (cObject *) 0 ;
  cObject *arg3 = (cObject *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(cQueue **)&jarg1; 
  arg2 = *(cObject **)&jarg2; 
  arg3 = *(cObject **)&jarg3; 
  {
    try {
      (arg1)->insertBefore(arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cQueue_1insertAfter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  cQueue *arg1 = (cQueue *) 0 ;
  cObject *arg2 = (cObject *) 0 ;
  cObject *arg3 = (cObject *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(cQueue **)&jarg1; 
  arg2 = *(cObject **)&jarg2; 
  arg3 = *(cObject **)&jarg3; 
  {
    try {
      (arg1)->insertAfter(arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cQueue_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cQueue *arg1 = (cQueue *) 0 ;
  cObject *arg2 = (cObject *) 0 ;
  cObject *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cQueue **)&jarg1; 
  arg2 = *(cObject **)&jarg2; 
  {
    try {
      result = (cObject *)(arg1)->remove(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cObject **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cQueue_1pop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cQueue *arg1 = (cQueue *) 0 ;
  cObject *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cQueue **)&jarg1; 
  {
    try {
      result = (cObject *)(arg1)->pop();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cObject **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cQueue_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cQueue *arg1 = (cQueue *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cQueue **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cQueue_1front(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cQueue *arg1 = (cQueue *) 0 ;
  cObject *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cQueue **)&jarg1; 
  {
    try {
      result = (cObject *)((cQueue const *)arg1)->front();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cObject **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cQueue_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cQueue *arg1 = (cQueue *) 0 ;
  cObject *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cQueue **)&jarg1; 
  {
    try {
      result = (cObject *)((cQueue const *)arg1)->back();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cObject **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cQueue_1getLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cQueue *arg1 = (cQueue *) 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cQueue **)&jarg1; 
  {
    try {
      result = (int)((cQueue const *)arg1)->getLength();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cQueue_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cQueue *arg1 = (cQueue *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cQueue **)&jarg1; 
  {
    try {
      result = (bool)((cQueue const *)arg1)->isEmpty();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cQueue_1length(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cQueue *arg1 = (cQueue *) 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cQueue **)&jarg1; 
  {
    try {
      result = (int)((cQueue const *)arg1)->length();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cQueue_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cQueue *arg1 = (cQueue *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cQueue **)&jarg1; 
  {
    try {
      result = (bool)((cQueue const *)arg1)->empty();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cQueue_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  cQueue *arg1 = (cQueue *) 0 ;
  int arg2 ;
  cObject *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cQueue **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (cObject *)((cQueue const *)arg1)->get(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cObject **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cQueue_1contains(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cQueue *arg1 = (cQueue *) 0 ;
  cObject *arg2 = (cObject *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cQueue **)&jarg1; 
  arg2 = *(cObject **)&jarg2; 
  {
    try {
      result = (bool)((cQueue const *)arg1)->contains(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cQueue_1setTakeOwnership(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  cQueue *arg1 = (cQueue *) 0 ;
  bool arg2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cQueue **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setTakeOwnership(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cQueue_1getTakeOwnership(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cQueue *arg1 = (cQueue *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cQueue **)&jarg1; 
  {
    try {
      result = (bool)((cQueue const *)arg1)->getTakeOwnership();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cQueue_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cObject *arg1 = (cObject *) 0 ;
  cQueue *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cObject **)&jarg1; 
  {
    try {
      result = (cQueue *)cQueue_cast(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cQueue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cStatistic_1genk_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  cStatistic *arg1 = (cStatistic *) 0 ;
  int arg2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cStatistic **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->genk = arg2;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cStatistic_1genk_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cStatistic *arg1 = (cStatistic *) 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cStatistic **)&jarg1; 
  result = (int) ((arg1)->genk);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_delete_1cStatistic(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cStatistic *arg1 = (cStatistic *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = *(cStatistic **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cStatistic_1collect_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  cStatistic *arg1 = (cStatistic *) 0 ;
  double arg2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cStatistic **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->collect(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cStatistic_1collect_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  cStatistic *arg1 = (cStatistic *) 0 ;
  SimTime arg2 ;
  SimTime *argp2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cStatistic **)&jarg1; 
  argp2 = *(SimTime **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SimTime");
    return ;
  }
  arg2 = *argp2; 
  {
    try {
      (arg1)->collect(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cStatistic_1isWeighted(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cStatistic *arg1 = (cStatistic *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cStatistic **)&jarg1; 
  {
    try {
      result = (bool)((cStatistic const *)arg1)->isWeighted();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cStatistic_1collect2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  cStatistic *arg1 = (cStatistic *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cStatistic **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->collect2(arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cStatistic_1merge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  cStatistic *arg1 = (cStatistic *) 0 ;
  cStatistic *arg2 = (cStatistic *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cStatistic **)&jarg1; 
  arg2 = *(cStatistic **)&jarg2; 
  {
    try {
      (arg1)->merge((cStatistic const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cStatistic_1clearResult(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cStatistic *arg1 = (cStatistic *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cStatistic **)&jarg1; 
  {
    try {
      (arg1)->clearResult();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cStatistic_1getCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cStatistic *arg1 = (cStatistic *) 0 ;
  long result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cStatistic **)&jarg1; 
  {
    try {
      result = (long)((cStatistic const *)arg1)->getCount();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_cStatistic_1getSum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  cStatistic *arg1 = (cStatistic *) 0 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cStatistic **)&jarg1; 
  {
    try {
      result = (double)((cStatistic const *)arg1)->getSum();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_cStatistic_1getSqrSum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  cStatistic *arg1 = (cStatistic *) 0 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cStatistic **)&jarg1; 
  {
    try {
      result = (double)((cStatistic const *)arg1)->getSqrSum();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_cStatistic_1getMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  cStatistic *arg1 = (cStatistic *) 0 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cStatistic **)&jarg1; 
  {
    try {
      result = (double)((cStatistic const *)arg1)->getMin();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_cStatistic_1getMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  cStatistic *arg1 = (cStatistic *) 0 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cStatistic **)&jarg1; 
  {
    try {
      result = (double)((cStatistic const *)arg1)->getMax();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_cStatistic_1getMean(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  cStatistic *arg1 = (cStatistic *) 0 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cStatistic **)&jarg1; 
  {
    try {
      result = (double)((cStatistic const *)arg1)->getMean();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_cStatistic_1getStddev(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  cStatistic *arg1 = (cStatistic *) 0 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cStatistic **)&jarg1; 
  {
    try {
      result = (double)((cStatistic const *)arg1)->getStddev();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_cStatistic_1getVariance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  cStatistic *arg1 = (cStatistic *) 0 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cStatistic **)&jarg1; 
  {
    try {
      result = (double)((cStatistic const *)arg1)->getVariance();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_cStatistic_1getWeights(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  cStatistic *arg1 = (cStatistic *) 0 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cStatistic **)&jarg1; 
  {
    try {
      result = (double)((cStatistic const *)arg1)->getWeights();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_cStatistic_1getWeightedSum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  cStatistic *arg1 = (cStatistic *) 0 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cStatistic **)&jarg1; 
  {
    try {
      result = (double)((cStatistic const *)arg1)->getWeightedSum();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_cStatistic_1getSqrSumWeights(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  cStatistic *arg1 = (cStatistic *) 0 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cStatistic **)&jarg1; 
  {
    try {
      result = (double)((cStatistic const *)arg1)->getSqrSumWeights();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_cStatistic_1getWeightedSqrSum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  cStatistic *arg1 = (cStatistic *) 0 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cStatistic **)&jarg1; 
  {
    try {
      result = (double)((cStatistic const *)arg1)->getWeightedSqrSum();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cStatistic_1setGenK(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  cStatistic *arg1 = (cStatistic *) 0 ;
  int arg2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cStatistic **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->setGenK(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_cStatistic_1random(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  cStatistic *arg1 = (cStatistic *) 0 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cStatistic **)&jarg1; 
  {
    try {
      result = (double)((cStatistic const *)arg1)->random();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cStatistic_1record(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cStatistic *arg1 = (cStatistic *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cStatistic **)&jarg1; 
  {
    try {
      (arg1)->record();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cStatistic_1recordWithUnit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  cStatistic *arg1 = (cStatistic *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cStatistic **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    try {
      (arg1)->recordWithUnit((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cStatistic_1recordAs_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  cStatistic *arg1 = (cStatistic *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cStatistic **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  {
    try {
      (arg1)->recordAs((char const *)arg2,(char const *)arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cStatistic_1recordAs_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  cStatistic *arg1 = (cStatistic *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cStatistic **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    try {
      (arg1)->recordAs((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cStatistic_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cObject *arg1 = (cObject *) 0 ;
  cStatistic *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cObject **)&jarg1; 
  {
    try {
      result = (cStatistic *)cStatistic_cast(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cStatistic **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cStdDev_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  cStdDev *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    try {
      result = (cStdDev *)new cStdDev((char const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cStdDev **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cStdDev_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cStdDev *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      result = (cStdDev *)new cStdDev();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cStdDev **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_delete_1cStdDev(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cStdDev *arg1 = (cStdDev *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = *(cStdDev **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cStdDev_1dup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cStdDev *arg1 = (cStdDev *) 0 ;
  cStdDev *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cStdDev **)&jarg1; 
  {
    try {
      result = (cStdDev *)((cStdDev const *)arg1)->dup();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cStdDev **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cStdDev_1info(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cStdDev *arg1 = (cStdDev *) 0 ;
  std::string result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cStdDev **)&jarg1; 
  {
    try {
      result = ((cStdDev const *)arg1)->info();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cStdDev_1detailedInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cStdDev *arg1 = (cStdDev *) 0 ;
  std::string result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cStdDev **)&jarg1; 
  {
    try {
      result = ((cStdDev const *)arg1)->detailedInfo();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cStdDev_1collect_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  cStdDev *arg1 = (cStdDev *) 0 ;
  double arg2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cStdDev **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->collect(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cStdDev_1collect_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  cStdDev *arg1 = (cStdDev *) 0 ;
  SimTime arg2 ;
  SimTime *argp2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cStdDev **)&jarg1; 
  argp2 = *(SimTime **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SimTime");
    return ;
  }
  arg2 = *argp2; 
  {
    try {
      (arg1)->collect(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cStdDev_1merge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  cStdDev *arg1 = (cStdDev *) 0 ;
  cStatistic *arg2 = (cStatistic *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cStdDev **)&jarg1; 
  arg2 = *(cStatistic **)&jarg2; 
  {
    try {
      (arg1)->merge((cStatistic const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cStdDev_1isWeighted(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cStdDev *arg1 = (cStdDev *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cStdDev **)&jarg1; 
  {
    try {
      result = (bool)((cStdDev const *)arg1)->isWeighted();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cStdDev_1getCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cStdDev *arg1 = (cStdDev *) 0 ;
  long result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cStdDev **)&jarg1; 
  {
    try {
      result = (long)((cStdDev const *)arg1)->getCount();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_cStdDev_1getSum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  cStdDev *arg1 = (cStdDev *) 0 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cStdDev **)&jarg1; 
  {
    try {
      result = (double)((cStdDev const *)arg1)->getSum();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_cStdDev_1getSqrSum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  cStdDev *arg1 = (cStdDev *) 0 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cStdDev **)&jarg1; 
  {
    try {
      result = (double)((cStdDev const *)arg1)->getSqrSum();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_cStdDev_1getMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  cStdDev *arg1 = (cStdDev *) 0 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cStdDev **)&jarg1; 
  {
    try {
      result = (double)((cStdDev const *)arg1)->getMin();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_cStdDev_1getMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  cStdDev *arg1 = (cStdDev *) 0 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cStdDev **)&jarg1; 
  {
    try {
      result = (double)((cStdDev const *)arg1)->getMax();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_cStdDev_1getMean(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  cStdDev *arg1 = (cStdDev *) 0 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cStdDev **)&jarg1; 
  {
    try {
      result = (double)((cStdDev const *)arg1)->getMean();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_cStdDev_1getStddev(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  cStdDev *arg1 = (cStdDev *) 0 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cStdDev **)&jarg1; 
  {
    try {
      result = (double)((cStdDev const *)arg1)->getStddev();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_cStdDev_1getVariance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  cStdDev *arg1 = (cStdDev *) 0 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cStdDev **)&jarg1; 
  {
    try {
      result = (double)((cStdDev const *)arg1)->getVariance();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_cStdDev_1getWeights(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  cStdDev *arg1 = (cStdDev *) 0 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cStdDev **)&jarg1; 
  {
    try {
      result = (double)((cStdDev const *)arg1)->getWeights();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_cStdDev_1getWeightedSum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  cStdDev *arg1 = (cStdDev *) 0 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cStdDev **)&jarg1; 
  {
    try {
      result = (double)((cStdDev const *)arg1)->getWeightedSum();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_cStdDev_1getSqrSumWeights(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  cStdDev *arg1 = (cStdDev *) 0 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cStdDev **)&jarg1; 
  {
    try {
      result = (double)((cStdDev const *)arg1)->getSqrSumWeights();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_cStdDev_1getWeightedSqrSum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  cStdDev *arg1 = (cStdDev *) 0 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cStdDev **)&jarg1; 
  {
    try {
      result = (double)((cStdDev const *)arg1)->getWeightedSqrSum();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_cStdDev_1random(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  cStdDev *arg1 = (cStdDev *) 0 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cStdDev **)&jarg1; 
  {
    try {
      result = (double)((cStdDev const *)arg1)->random();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cStdDev_1clearResult(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cStdDev *arg1 = (cStdDev *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cStdDev **)&jarg1; 
  {
    try {
      (arg1)->clearResult();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cStdDev_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cObject *arg1 = (cObject *) 0 ;
  cStdDev *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cObject **)&jarg1; 
  {
    try {
      result = (cStdDev *)cStdDev_cast(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cStdDev **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cWeightedStdDev_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cWeightedStdDev *arg1 = 0 ;
  cWeightedStdDev *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cWeightedStdDev **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cWeightedStdDev const & reference is null");
    return 0;
  } 
  {
    try {
      result = (cWeightedStdDev *)new cWeightedStdDev((cWeightedStdDev const &)*arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cWeightedStdDev **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cWeightedStdDev_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  cWeightedStdDev *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    try {
      result = (cWeightedStdDev *)new cWeightedStdDev((char const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cWeightedStdDev **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cWeightedStdDev_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cWeightedStdDev *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      result = (cWeightedStdDev *)new cWeightedStdDev();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cWeightedStdDev **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_delete_1cWeightedStdDev(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cWeightedStdDev *arg1 = (cWeightedStdDev *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = *(cWeightedStdDev **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cWeightedStdDev_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cWeightedStdDev *arg1 = (cWeightedStdDev *) 0 ;
  cWeightedStdDev *arg2 = 0 ;
  cWeightedStdDev *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cWeightedStdDev **)&jarg1; 
  arg2 = *(cWeightedStdDev **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cWeightedStdDev const & reference is null");
    return 0;
  } 
  {
    try {
      result = (cWeightedStdDev *) &(arg1)->operator =((cWeightedStdDev const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cWeightedStdDev **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cWeightedStdDev_1dup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cWeightedStdDev *arg1 = (cWeightedStdDev *) 0 ;
  cWeightedStdDev *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cWeightedStdDev **)&jarg1; 
  {
    try {
      result = (cWeightedStdDev *)((cWeightedStdDev const *)arg1)->dup();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cWeightedStdDev **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cWeightedStdDev_1info(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cWeightedStdDev *arg1 = (cWeightedStdDev *) 0 ;
  std::string result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cWeightedStdDev **)&jarg1; 
  {
    try {
      result = ((cWeightedStdDev const *)arg1)->info();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cWeightedStdDev_1collect_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  cWeightedStdDev *arg1 = (cWeightedStdDev *) 0 ;
  double arg2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cWeightedStdDev **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->collect(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cWeightedStdDev_1collect_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  cWeightedStdDev *arg1 = (cWeightedStdDev *) 0 ;
  SimTime arg2 ;
  SimTime *argp2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cWeightedStdDev **)&jarg1; 
  argp2 = *(SimTime **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SimTime");
    return ;
  }
  arg2 = *argp2; 
  {
    try {
      (arg1)->collect(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cWeightedStdDev_1isWeighted(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cWeightedStdDev *arg1 = (cWeightedStdDev *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cWeightedStdDev **)&jarg1; 
  {
    try {
      result = (bool)((cWeightedStdDev const *)arg1)->isWeighted();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cWeightedStdDev_1collect2_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  cWeightedStdDev *arg1 = (cWeightedStdDev *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cWeightedStdDev **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->collect2(arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cWeightedStdDev_1collect2_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  cWeightedStdDev *arg1 = (cWeightedStdDev *) 0 ;
  SimTime arg2 ;
  double arg3 ;
  SimTime *argp2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cWeightedStdDev **)&jarg1; 
  argp2 = *(SimTime **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SimTime");
    return ;
  }
  arg2 = *argp2; 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->collect2(arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cWeightedStdDev_1collect2_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jlong jarg3, jobject jarg3_) {
  cWeightedStdDev *arg1 = (cWeightedStdDev *) 0 ;
  double arg2 ;
  SimTime arg3 ;
  SimTime *argp3 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(cWeightedStdDev **)&jarg1; 
  arg2 = (double)jarg2; 
  argp3 = *(SimTime **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SimTime");
    return ;
  }
  arg3 = *argp3; 
  {
    try {
      (arg1)->collect2(arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cWeightedStdDev_1collect2_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  cWeightedStdDev *arg1 = (cWeightedStdDev *) 0 ;
  SimTime arg2 ;
  SimTime arg3 ;
  SimTime *argp2 ;
  SimTime *argp3 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(cWeightedStdDev **)&jarg1; 
  argp2 = *(SimTime **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SimTime");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(SimTime **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SimTime");
    return ;
  }
  arg3 = *argp3; 
  {
    try {
      (arg1)->collect2(arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cWeightedStdDev_1merge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  cWeightedStdDev *arg1 = (cWeightedStdDev *) 0 ;
  cStatistic *arg2 = (cStatistic *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cWeightedStdDev **)&jarg1; 
  arg2 = *(cStatistic **)&jarg2; 
  {
    try {
      (arg1)->merge((cStatistic const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cWeightedStdDev_1clearResult(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cWeightedStdDev *arg1 = (cWeightedStdDev *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cWeightedStdDev **)&jarg1; 
  {
    try {
      (arg1)->clearResult();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_cWeightedStdDev_1getMean(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  cWeightedStdDev *arg1 = (cWeightedStdDev *) 0 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cWeightedStdDev **)&jarg1; 
  {
    try {
      result = (double)((cWeightedStdDev const *)arg1)->getMean();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_cWeightedStdDev_1getVariance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  cWeightedStdDev *arg1 = (cWeightedStdDev *) 0 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cWeightedStdDev **)&jarg1; 
  {
    try {
      result = (double)((cWeightedStdDev const *)arg1)->getVariance();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_cWeightedStdDev_1getWeights(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  cWeightedStdDev *arg1 = (cWeightedStdDev *) 0 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cWeightedStdDev **)&jarg1; 
  {
    try {
      result = (double)((cWeightedStdDev const *)arg1)->getWeights();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_cWeightedStdDev_1getWeightedSum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  cWeightedStdDev *arg1 = (cWeightedStdDev *) 0 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cWeightedStdDev **)&jarg1; 
  {
    try {
      result = (double)((cWeightedStdDev const *)arg1)->getWeightedSum();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_cWeightedStdDev_1getSqrSumWeights(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  cWeightedStdDev *arg1 = (cWeightedStdDev *) 0 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cWeightedStdDev **)&jarg1; 
  {
    try {
      result = (double)((cWeightedStdDev const *)arg1)->getSqrSumWeights();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_cWeightedStdDev_1getWeightedSqrSum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  cWeightedStdDev *arg1 = (cWeightedStdDev *) 0 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cWeightedStdDev **)&jarg1; 
  {
    try {
      result = (double)((cWeightedStdDev const *)arg1)->getWeightedSqrSum();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cDensityEstBase_1internalGetCellInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  cDensityEstBase *arg1 = (cDensityEstBase *) 0 ;
  int arg2 ;
  Cell *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDensityEstBase **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (Cell *) &((cDensityEstBase const *)arg1)->internalGetCellInfo(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(Cell **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_delete_1cDensityEstBase(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cDensityEstBase *arg1 = (cDensityEstBase *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = *(cDensityEstBase **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cDensityEstBase_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cDensityEstBase *arg1 = (cDensityEstBase *) 0 ;
  cDensityEstBase *arg2 = 0 ;
  cDensityEstBase *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cDensityEstBase **)&jarg1; 
  arg2 = *(cDensityEstBase **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cDensityEstBase const & reference is null");
    return 0;
  } 
  {
    try {
      result = (cDensityEstBase *) &(arg1)->operator =((cDensityEstBase const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cDensityEstBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cDensityEstBase_1detailedInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cDensityEstBase *arg1 = (cDensityEstBase *) 0 ;
  std::string result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDensityEstBase **)&jarg1; 
  {
    try {
      result = ((cDensityEstBase const *)arg1)->detailedInfo();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cDensityEstBase_1collect_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  cDensityEstBase *arg1 = (cDensityEstBase *) 0 ;
  double arg2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDensityEstBase **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->collect(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cDensityEstBase_1collect_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  cDensityEstBase *arg1 = (cDensityEstBase *) 0 ;
  SimTime arg2 ;
  SimTime *argp2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cDensityEstBase **)&jarg1; 
  argp2 = *(SimTime **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SimTime");
    return ;
  }
  arg2 = *argp2; 
  {
    try {
      (arg1)->collect(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cDensityEstBase_1merge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  cDensityEstBase *arg1 = (cDensityEstBase *) 0 ;
  cStatistic *arg2 = (cStatistic *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cDensityEstBase **)&jarg1; 
  arg2 = *(cStatistic **)&jarg2; 
  {
    try {
      (arg1)->merge((cStatistic const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cDensityEstBase_1clearResult(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cDensityEstBase *arg1 = (cDensityEstBase *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDensityEstBase **)&jarg1; 
  {
    try {
      (arg1)->clearResult();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cDensityEstBase_1setRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  cDensityEstBase *arg1 = (cDensityEstBase *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDensityEstBase **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->setRange(arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cDensityEstBase_1setRangeAuto_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  cDensityEstBase *arg1 = (cDensityEstBase *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDensityEstBase **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->setRangeAuto(arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cDensityEstBase_1setRangeAuto_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  cDensityEstBase *arg1 = (cDensityEstBase *) 0 ;
  int arg2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDensityEstBase **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->setRangeAuto(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cDensityEstBase_1setRangeAuto_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cDensityEstBase *arg1 = (cDensityEstBase *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDensityEstBase **)&jarg1; 
  {
    try {
      (arg1)->setRangeAuto();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cDensityEstBase_1setRangeAutoLower_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jint jarg3, jdouble jarg4) {
  cDensityEstBase *arg1 = (cDensityEstBase *) 0 ;
  double arg2 ;
  int arg3 ;
  double arg4 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDensityEstBase **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      (arg1)->setRangeAutoLower(arg2,arg3,arg4);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cDensityEstBase_1setRangeAutoLower_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jint jarg3) {
  cDensityEstBase *arg1 = (cDensityEstBase *) 0 ;
  double arg2 ;
  int arg3 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDensityEstBase **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      (arg1)->setRangeAutoLower(arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cDensityEstBase_1setRangeAutoLower_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  cDensityEstBase *arg1 = (cDensityEstBase *) 0 ;
  double arg2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDensityEstBase **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setRangeAutoLower(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cDensityEstBase_1setRangeAutoUpper_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jint jarg3, jdouble jarg4) {
  cDensityEstBase *arg1 = (cDensityEstBase *) 0 ;
  double arg2 ;
  int arg3 ;
  double arg4 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDensityEstBase **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      (arg1)->setRangeAutoUpper(arg2,arg3,arg4);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cDensityEstBase_1setRangeAutoUpper_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jint jarg3) {
  cDensityEstBase *arg1 = (cDensityEstBase *) 0 ;
  double arg2 ;
  int arg3 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDensityEstBase **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      (arg1)->setRangeAutoUpper(arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cDensityEstBase_1setRangeAutoUpper_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  cDensityEstBase *arg1 = (cDensityEstBase *) 0 ;
  double arg2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDensityEstBase **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setRangeAutoUpper(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cDensityEstBase_1setNumFirstVals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  cDensityEstBase *arg1 = (cDensityEstBase *) 0 ;
  int arg2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDensityEstBase **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->setNumFirstVals(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cDensityEstBase_1getNumFirstVals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cDensityEstBase *arg1 = (cDensityEstBase *) 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDensityEstBase **)&jarg1; 
  {
    try {
      result = (int)((cDensityEstBase const *)arg1)->getNumFirstVals();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_cDensityEstBase_1getRangeExtensionFactor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  cDensityEstBase *arg1 = (cDensityEstBase *) 0 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDensityEstBase **)&jarg1; 
  {
    try {
      result = (double)((cDensityEstBase const *)arg1)->getRangeExtensionFactor();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cDensityEstBase_1isTransformed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cDensityEstBase *arg1 = (cDensityEstBase *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDensityEstBase **)&jarg1; 
  {
    try {
      result = (bool)((cDensityEstBase const *)arg1)->isTransformed();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cDensityEstBase_1transform(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cDensityEstBase *arg1 = (cDensityEstBase *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDensityEstBase **)&jarg1; 
  {
    try {
      (arg1)->transform();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cDensityEstBase_1getNumCells(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cDensityEstBase *arg1 = (cDensityEstBase *) 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDensityEstBase **)&jarg1; 
  {
    try {
      result = (int)((cDensityEstBase const *)arg1)->getNumCells();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_cDensityEstBase_1getBasepoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  cDensityEstBase *arg1 = (cDensityEstBase *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDensityEstBase **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (double)((cDensityEstBase const *)arg1)->getBasepoint(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_cDensityEstBase_1getCellValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  cDensityEstBase *arg1 = (cDensityEstBase *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDensityEstBase **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (double)((cDensityEstBase const *)arg1)->getCellValue(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_cDensityEstBase_1getCellPDF(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  cDensityEstBase *arg1 = (cDensityEstBase *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDensityEstBase **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (double)((cDensityEstBase const *)arg1)->getCellPDF(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cDensityEstBase_1getUnderflowCell(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cDensityEstBase *arg1 = (cDensityEstBase *) 0 ;
  unsigned long result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDensityEstBase **)&jarg1; 
  {
    try {
      result = (unsigned long)((cDensityEstBase const *)arg1)->getUnderflowCell();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cDensityEstBase_1getOverflowCell(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cDensityEstBase *arg1 = (cDensityEstBase *) 0 ;
  unsigned long result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDensityEstBase **)&jarg1; 
  {
    try {
      result = (unsigned long)((cDensityEstBase const *)arg1)->getOverflowCell();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_cDensityEstBase_1getPDF(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jdouble jresult = 0 ;
  cDensityEstBase *arg1 = (cDensityEstBase *) 0 ;
  double arg2 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDensityEstBase **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      result = (double)((cDensityEstBase const *)arg1)->getPDF(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_cDensityEstBase_1getCDF(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jdouble jresult = 0 ;
  cDensityEstBase *arg1 = (cDensityEstBase *) 0 ;
  double arg2 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDensityEstBase **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      result = (double)((cDensityEstBase const *)arg1)->getCDF(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_delete_1cHistogramBase(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cHistogramBase *arg1 = (cHistogramBase *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = *(cHistogramBase **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cHistogramBase_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cHistogramBase *arg1 = (cHistogramBase *) 0 ;
  cHistogramBase *arg2 = 0 ;
  cHistogramBase *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cHistogramBase **)&jarg1; 
  arg2 = *(cHistogramBase **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cHistogramBase const & reference is null");
    return 0;
  } 
  {
    try {
      result = (cHistogramBase *) &(arg1)->operator =((cHistogramBase const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cHistogramBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cHistogramBase_1clearResult(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cHistogramBase *arg1 = (cHistogramBase *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cHistogramBase **)&jarg1; 
  {
    try {
      (arg1)->clearResult();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cHistogramBase_1transform(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cHistogramBase *arg1 = (cHistogramBase *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cHistogramBase **)&jarg1; 
  {
    try {
      (arg1)->transform();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cHistogramBase_1getNumCells(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cHistogramBase *arg1 = (cHistogramBase *) 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cHistogramBase **)&jarg1; 
  {
    try {
      result = (int)((cHistogramBase const *)arg1)->getNumCells();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cHistogramBase_1setNumCells(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  cHistogramBase *arg1 = (cHistogramBase *) 0 ;
  int arg2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cHistogramBase **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->setNumCells(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cHistogram_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cHistogram *arg1 = 0 ;
  cHistogram *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cHistogram **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cHistogram const & reference is null");
    return 0;
  } 
  {
    try {
      result = (cHistogram *)new cHistogram((cHistogram const &)*arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cHistogram **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cHistogram_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  cHistogram::Mode arg3 ;
  cHistogram *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  arg3 = (cHistogram::Mode)jarg3; 
  {
    try {
      result = (cHistogram *)new cHistogram((char const *)arg1,arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cHistogram **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cHistogram_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  cHistogram *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  {
    try {
      result = (cHistogram *)new cHistogram((char const *)arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cHistogram **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cHistogram_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  cHistogram *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    try {
      result = (cHistogram *)new cHistogram((char const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cHistogram **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cHistogram_1_1SWIG_14(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cHistogram *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      result = (cHistogram *)new cHistogram();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cHistogram **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cHistogram_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cHistogram *arg1 = (cHistogram *) 0 ;
  cHistogram *arg2 = 0 ;
  cHistogram *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cHistogram **)&jarg1; 
  arg2 = *(cHistogram **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cHistogram const & reference is null");
    return 0;
  } 
  {
    try {
      result = (cHistogram *) &(arg1)->operator =((cHistogram const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cHistogram **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_cHistogram_1getBasepoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  cHistogram *arg1 = (cHistogram *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cHistogram **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (double)((cHistogram const *)arg1)->getBasepoint(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_cHistogram_1getCellValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  cHistogram *arg1 = (cHistogram *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cHistogram **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (double)((cHistogram const *)arg1)->getCellValue(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_cHistogram_1getPDF(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jdouble jresult = 0 ;
  cHistogram *arg1 = (cHistogram *) 0 ;
  double arg2 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cHistogram **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      result = (double)((cHistogram const *)arg1)->getPDF(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_cHistogram_1getCDF(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jdouble jresult = 0 ;
  cHistogram *arg1 = (cHistogram *) 0 ;
  double arg2 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cHistogram **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      result = (double)((cHistogram const *)arg1)->getCDF(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_cHistogram_1random(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  cHistogram *arg1 = (cHistogram *) 0 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cHistogram **)&jarg1; 
  {
    try {
      result = (double)((cHistogram const *)arg1)->random();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cHistogram_1setMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  cHistogram *arg1 = (cHistogram *) 0 ;
  cHistogram::Mode arg2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cHistogram **)&jarg1; 
  arg2 = (cHistogram::Mode)jarg2; 
  {
    try {
      (arg1)->setMode(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cHistogram_1getMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cHistogram *arg1 = (cHistogram *) 0 ;
  cHistogram::Mode result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cHistogram **)&jarg1; 
  {
    try {
      result = (cHistogram::Mode)((cHistogram const *)arg1)->getMode();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cHistogram_1setCellSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  cHistogram *arg1 = (cHistogram *) 0 ;
  double arg2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cHistogram **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setCellSize(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_cHistogram_1getCellSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  cHistogram *arg1 = (cHistogram *) 0 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cHistogram **)&jarg1; 
  {
    try {
      result = (double)((cHistogram const *)arg1)->getCellSize();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_delete_1cHistogram(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cHistogram *arg1 = (cHistogram *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = *(cHistogram **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cLongHistogram_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cLongHistogram *arg1 = 0 ;
  cLongHistogram *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cLongHistogram **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cLongHistogram const & reference is null");
    return 0;
  } 
  {
    try {
      result = (cLongHistogram *)new cLongHistogram((cLongHistogram const &)*arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cLongHistogram **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cLongHistogram_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  cLongHistogram *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  {
    try {
      result = (cLongHistogram *)new cLongHistogram((char const *)arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cLongHistogram **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cLongHistogram_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  cLongHistogram *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    try {
      result = (cLongHistogram *)new cLongHistogram((char const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cLongHistogram **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cLongHistogram_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cLongHistogram *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      result = (cLongHistogram *)new cLongHistogram();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cLongHistogram **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_delete_1cLongHistogram(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cLongHistogram *arg1 = (cLongHistogram *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = *(cLongHistogram **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cLongHistogram_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cLongHistogram *arg1 = (cLongHistogram *) 0 ;
  cLongHistogram *arg2 = 0 ;
  cLongHistogram *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cLongHistogram **)&jarg1; 
  arg2 = *(cLongHistogram **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cLongHistogram const & reference is null");
    return 0;
  } 
  {
    try {
      result = (cLongHistogram *) &(arg1)->operator =((cLongHistogram const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cLongHistogram **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cLongHistogram_1dup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cLongHistogram *arg1 = (cLongHistogram *) 0 ;
  cLongHistogram *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cLongHistogram **)&jarg1; 
  {
    try {
      result = (cLongHistogram *)((cLongHistogram const *)arg1)->dup();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cLongHistogram **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cLongHistogram_1collect_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  cLongHistogram *arg1 = (cLongHistogram *) 0 ;
  double arg2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cLongHistogram **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->collect(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cLongHistogram_1collect_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  cLongHistogram *arg1 = (cLongHistogram *) 0 ;
  SimTime arg2 ;
  SimTime *argp2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cLongHistogram **)&jarg1; 
  argp2 = *(SimTime **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SimTime");
    return ;
  }
  arg2 = *argp2; 
  {
    try {
      (arg1)->collect(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cDoubleHistogram_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cDoubleHistogram *arg1 = 0 ;
  cDoubleHistogram *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDoubleHistogram **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cDoubleHistogram const & reference is null");
    return 0;
  } 
  {
    try {
      result = (cDoubleHistogram *)new cDoubleHistogram((cDoubleHistogram const &)*arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cDoubleHistogram **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cDoubleHistogram_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  cDoubleHistogram *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  {
    try {
      result = (cDoubleHistogram *)new cDoubleHistogram((char const *)arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cDoubleHistogram **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cDoubleHistogram_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  cDoubleHistogram *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    try {
      result = (cDoubleHistogram *)new cDoubleHistogram((char const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cDoubleHistogram **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cDoubleHistogram_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cDoubleHistogram *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      result = (cDoubleHistogram *)new cDoubleHistogram();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cDoubleHistogram **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_delete_1cDoubleHistogram(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cDoubleHistogram *arg1 = (cDoubleHistogram *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = *(cDoubleHistogram **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cDoubleHistogram_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cDoubleHistogram *arg1 = (cDoubleHistogram *) 0 ;
  cDoubleHistogram *arg2 = 0 ;
  cDoubleHistogram *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cDoubleHistogram **)&jarg1; 
  arg2 = *(cDoubleHistogram **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cDoubleHistogram const & reference is null");
    return 0;
  } 
  {
    try {
      result = (cDoubleHistogram *) &(arg1)->operator =((cDoubleHistogram const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cDoubleHistogram **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cDoubleHistogram_1dup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cDoubleHistogram *arg1 = (cDoubleHistogram *) 0 ;
  cDoubleHistogram *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDoubleHistogram **)&jarg1; 
  {
    try {
      result = (cDoubleHistogram *)((cDoubleHistogram const *)arg1)->dup();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cDoubleHistogram **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cPSquare_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cPSquare *arg1 = 0 ;
  cPSquare *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cPSquare **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cPSquare const & reference is null");
    return 0;
  } 
  {
    try {
      result = (cPSquare *)new cPSquare((cPSquare const &)*arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cPSquare **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cPSquare_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  cPSquare *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  {
    try {
      result = (cPSquare *)new cPSquare((char const *)arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cPSquare **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cPSquare_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  cPSquare *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    try {
      result = (cPSquare *)new cPSquare((char const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cPSquare **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cPSquare_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cPSquare *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      result = (cPSquare *)new cPSquare();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cPSquare **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_delete_1cPSquare(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cPSquare *arg1 = (cPSquare *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = *(cPSquare **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cPSquare_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cPSquare *arg1 = (cPSquare *) 0 ;
  cPSquare *arg2 = 0 ;
  cPSquare *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cPSquare **)&jarg1; 
  arg2 = *(cPSquare **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cPSquare const & reference is null");
    return 0;
  } 
  {
    try {
      result = (cPSquare *) &(arg1)->operator =((cPSquare const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cPSquare **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cPSquare_1dup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cPSquare *arg1 = (cPSquare *) 0 ;
  cPSquare *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cPSquare **)&jarg1; 
  {
    try {
      result = (cPSquare *)((cPSquare const *)arg1)->dup();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cPSquare **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cPSquare_1detailedInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cPSquare *arg1 = (cPSquare *) 0 ;
  std::string result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cPSquare **)&jarg1; 
  {
    try {
      result = ((cPSquare const *)arg1)->detailedInfo();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cPSquare_1transform(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cPSquare *arg1 = (cPSquare *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cPSquare **)&jarg1; 
  {
    try {
      (arg1)->transform();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cPSquare_1setRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  cPSquare *arg1 = (cPSquare *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cPSquare **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->setRange(arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cPSquare_1setRangeAuto(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  cPSquare *arg1 = (cPSquare *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cPSquare **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->setRangeAuto(arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cPSquare_1setRangeAutoLower(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jint jarg3, jdouble jarg4) {
  cPSquare *arg1 = (cPSquare *) 0 ;
  double arg2 ;
  int arg3 ;
  double arg4 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cPSquare **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      (arg1)->setRangeAutoLower(arg2,arg3,arg4);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cPSquare_1setRangeAutoUpper(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jint jarg3, jdouble jarg4) {
  cPSquare *arg1 = (cPSquare *) 0 ;
  double arg2 ;
  int arg3 ;
  double arg4 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cPSquare **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      (arg1)->setRangeAutoUpper(arg2,arg3,arg4);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cPSquare_1setNumFirstVals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  cPSquare *arg1 = (cPSquare *) 0 ;
  int arg2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cPSquare **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->setNumFirstVals(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cPSquare_1getNumCells(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cPSquare *arg1 = (cPSquare *) 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cPSquare **)&jarg1; 
  {
    try {
      result = (int)((cPSquare const *)arg1)->getNumCells();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_cPSquare_1getBasepoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  cPSquare *arg1 = (cPSquare *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cPSquare **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (double)((cPSquare const *)arg1)->getBasepoint(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_cPSquare_1getCellValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  cPSquare *arg1 = (cPSquare *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cPSquare **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (double)((cPSquare const *)arg1)->getCellValue(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_cPSquare_1getCDF(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jdouble jresult = 0 ;
  cPSquare *arg1 = (cPSquare *) 0 ;
  double arg2 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cPSquare **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      result = (double)((cPSquare const *)arg1)->getCDF(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_cPSquare_1getPDF(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jdouble jresult = 0 ;
  cPSquare *arg1 = (cPSquare *) 0 ;
  double arg2 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cPSquare **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      result = (double)((cPSquare const *)arg1)->getPDF(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_cPSquare_1random(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  cPSquare *arg1 = (cPSquare *) 0 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cPSquare **)&jarg1; 
  {
    try {
      result = (double)((cPSquare const *)arg1)->random();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cPSquare_1merge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  cPSquare *arg1 = (cPSquare *) 0 ;
  cStatistic *arg2 = (cStatistic *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cPSquare **)&jarg1; 
  arg2 = *(cStatistic **)&jarg2; 
  {
    try {
      (arg1)->merge((cStatistic const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_HIST_1TR_1NO_1TRANSFORM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      result = (int)HIST_TR_NO_TRANSFORM;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_HIST_1TR_1AUTO_1EPC_1DBL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      result = (int)HIST_TR_AUTO_EPC_DBL;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_HIST_1TR_1AUTO_1EPC_1INT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      result = (int)HIST_TR_AUTO_EPC_INT;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cVarHistogram_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cVarHistogram *arg1 = 0 ;
  cVarHistogram *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cVarHistogram **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cVarHistogram const & reference is null");
    return 0;
  } 
  {
    try {
      result = (cVarHistogram *)new cVarHistogram((cVarHistogram const &)*arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cVarHistogram **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cVarHistogram_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int arg3 ;
  cVarHistogram *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      result = (cVarHistogram *)new cVarHistogram((char const *)arg1,arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cVarHistogram **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cVarHistogram_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  cVarHistogram *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  {
    try {
      result = (cVarHistogram *)new cVarHistogram((char const *)arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cVarHistogram **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cVarHistogram_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  cVarHistogram *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    try {
      result = (cVarHistogram *)new cVarHistogram((char const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cVarHistogram **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cVarHistogram_1_1SWIG_14(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cVarHistogram *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      result = (cVarHistogram *)new cVarHistogram();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cVarHistogram **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_delete_1cVarHistogram(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cVarHistogram *arg1 = (cVarHistogram *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = *(cVarHistogram **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cVarHistogram_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cVarHistogram *arg1 = (cVarHistogram *) 0 ;
  cVarHistogram *arg2 = 0 ;
  cVarHistogram *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cVarHistogram **)&jarg1; 
  arg2 = *(cVarHistogram **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cVarHistogram const & reference is null");
    return 0;
  } 
  {
    try {
      result = (cVarHistogram *) &(arg1)->operator =((cVarHistogram const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cVarHistogram **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cVarHistogram_1dup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cVarHistogram *arg1 = (cVarHistogram *) 0 ;
  cVarHistogram *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cVarHistogram **)&jarg1; 
  {
    try {
      result = (cVarHistogram *)((cVarHistogram const *)arg1)->dup();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cVarHistogram **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cVarHistogram_1clearResult(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cVarHistogram *arg1 = (cVarHistogram *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cVarHistogram **)&jarg1; 
  {
    try {
      (arg1)->clearResult();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cVarHistogram_1transform(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cVarHistogram *arg1 = (cVarHistogram *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cVarHistogram **)&jarg1; 
  {
    try {
      (arg1)->transform();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cVarHistogram_1collectTransformed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  cVarHistogram *arg1 = (cVarHistogram *) 0 ;
  double arg2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cVarHistogram **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->collectTransformed(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_cVarHistogram_1random(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  cVarHistogram *arg1 = (cVarHistogram *) 0 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cVarHistogram **)&jarg1; 
  {
    try {
      result = (double)((cVarHistogram const *)arg1)->random();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_cVarHistogram_1getPDF(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jdouble jresult = 0 ;
  cVarHistogram *arg1 = (cVarHistogram *) 0 ;
  double arg2 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cVarHistogram **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      result = (double)((cVarHistogram const *)arg1)->getPDF(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_cVarHistogram_1getCDF(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jdouble jresult = 0 ;
  cVarHistogram *arg1 = (cVarHistogram *) 0 ;
  double arg2 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cVarHistogram **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      result = (double)((cVarHistogram const *)arg1)->getCDF(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_cVarHistogram_1getBasepoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  cVarHistogram *arg1 = (cVarHistogram *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cVarHistogram **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (double)((cVarHistogram const *)arg1)->getBasepoint(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_cVarHistogram_1getCellValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  cVarHistogram *arg1 = (cVarHistogram *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cVarHistogram **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (double)((cVarHistogram const *)arg1)->getCellValue(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cVarHistogram_1addBinBound(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  cVarHistogram *arg1 = (cVarHistogram *) 0 ;
  double arg2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cVarHistogram **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->addBinBound(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_delete_1cRNG(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cRNG *arg1 = (cRNG *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = *(cRNG **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cRNG_1selfTest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cRNG *arg1 = (cRNG *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cRNG **)&jarg1; 
  {
    try {
      (arg1)->selfTest();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cRNG_1getNumbersDrawn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cRNG *arg1 = (cRNG *) 0 ;
  unsigned long result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cRNG **)&jarg1; 
  {
    try {
      result = (unsigned long)((cRNG const *)arg1)->getNumbersDrawn();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cRNG_1intRand_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cRNG *arg1 = (cRNG *) 0 ;
  unsigned long result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cRNG **)&jarg1; 
  {
    try {
      result = (unsigned long)(arg1)->intRand();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cRNG_1intRandMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cRNG *arg1 = (cRNG *) 0 ;
  unsigned long result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cRNG **)&jarg1; 
  {
    try {
      result = (unsigned long)(arg1)->intRandMax();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cRNG_1intRand_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  cRNG *arg1 = (cRNG *) 0 ;
  unsigned long arg2 ;
  unsigned long result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cRNG **)&jarg1; 
  arg2 = (unsigned long)jarg2; 
  {
    try {
      result = (unsigned long)(arg1)->intRand(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_cRNG_1doubleRand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  cRNG *arg1 = (cRNG *) 0 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cRNG **)&jarg1; 
  {
    try {
      result = (double)(arg1)->doubleRand();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_cRNG_1doubleRandNonz(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  cRNG *arg1 = (cRNG *) 0 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cRNG **)&jarg1; 
  {
    try {
      result = (double)(arg1)->doubleRandNonz();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_cRNG_1doubleRandIncl1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  cRNG *arg1 = (cRNG *) 0 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cRNG **)&jarg1; 
  {
    try {
      result = (double)(arg1)->doubleRandIncl1();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_cRNG_1doubleRandNonzIncl1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  cRNG *arg1 = (cRNG *) 0 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cRNG **)&jarg1; 
  {
    try {
      result = (double)(arg1)->doubleRandNonzIncl1();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_LCG32_1MAX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  long result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  result = (long) 0x7ffffffeL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cObjectFactory_1info(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cObjectFactory *arg1 = (cObjectFactory *) 0 ;
  std::string result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cObjectFactory **)&jarg1; 
  {
    try {
      result = ((cObjectFactory const *)arg1)->info();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cObjectFactory_1isAbstract(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cObjectFactory *arg1 = (cObjectFactory *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cObjectFactory **)&jarg1; 
  {
    try {
      result = (bool)((cObjectFactory const *)arg1)->isAbstract();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cObjectFactory_1createOne_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cObjectFactory *arg1 = (cObjectFactory *) 0 ;
  cObject *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cObjectFactory **)&jarg1; 
  {
    try {
      result = (cObject *)((cObjectFactory const *)arg1)->createOne();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cObject **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cObjectFactory_1isInstance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cObjectFactory *arg1 = (cObjectFactory *) 0 ;
  cObject *arg2 = (cObject *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cObjectFactory **)&jarg1; 
  arg2 = *(cObject **)&jarg2; 
  {
    try {
      result = (bool)((cObjectFactory const *)arg1)->isInstance(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cObjectFactory_1getDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cObjectFactory *arg1 = (cObjectFactory *) 0 ;
  char *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cObjectFactory **)&jarg1; 
  {
    try {
      result = (char *)((cObjectFactory const *)arg1)->getDescription();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cObjectFactory_1find(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  cObjectFactory *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    try {
      result = (cObjectFactory *)cObjectFactory::find((char const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cObjectFactory **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cObjectFactory_1get(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  cObjectFactory *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    try {
      result = (cObjectFactory *)cObjectFactory::get((char const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cObjectFactory **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cObjectFactory_1createOne_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  cObject *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    try {
      result = (cObject *)cObjectFactory::createOne((char const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cObject **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cObjectFactory_1createOneIfClassIsKnown(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  cObject *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    try {
      result = (cObject *)cObjectFactory::createOneIfClassIsKnown((char const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cObject **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_delete_1cObjectFactory(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cObjectFactory *arg1 = (cObjectFactory *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = *(cObjectFactory **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_createOne(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  cObject *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    try {
      result = (cObject *)createOne((char const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cObject **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_createOneIfClassIsKnown(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  cObject *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    try {
      result = (cObject *)createOneIfClassIsKnown((char const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cObject **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cDisplayString_1setHostObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  cDisplayString *arg1 = (cDisplayString *) 0 ;
  cComponent *arg2 = (cComponent *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cDisplayString **)&jarg1; 
  arg2 = *(cComponent **)&jarg2; 
  {
    try {
      (arg1)->setHostObject(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cDisplayString_1dump(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cDisplayString *arg1 = (cDisplayString *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDisplayString **)&jarg1; 
  {
    try {
      ((cDisplayString const *)arg1)->dump();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cDisplayString_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cDisplayString *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      result = (cDisplayString *)new cDisplayString();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cDisplayString **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cDisplayString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  cDisplayString *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    try {
      result = (cDisplayString *)new cDisplayString((char const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cDisplayString **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_delete_1cDisplayString(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cDisplayString *arg1 = (cDisplayString *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = *(cDisplayString **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cDisplayString_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  cDisplayString *arg1 = (cDisplayString *) 0 ;
  char *arg2 = (char *) 0 ;
  cDisplayString *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDisplayString **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (cDisplayString *) &(arg1)->operator =((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cDisplayString **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cDisplayString_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cDisplayString *arg1 = (cDisplayString *) 0 ;
  char *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDisplayString **)&jarg1; 
  {
    try {
      result = (char *)((cDisplayString const *)arg1)->str();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cDisplayString_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  cDisplayString *arg1 = (cDisplayString *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDisplayString **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    try {
      (arg1)->set((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cDisplayString_1parse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  cDisplayString *arg1 = (cDisplayString *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDisplayString **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    try {
      (arg1)->parse((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cDisplayString_1updateWith_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  cDisplayString *arg1 = (cDisplayString *) 0 ;
  cDisplayString *arg2 = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cDisplayString **)&jarg1; 
  arg2 = *(cDisplayString **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cDisplayString const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->updateWith((cDisplayString const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cDisplayString_1updateWith_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  cDisplayString *arg1 = (cDisplayString *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDisplayString **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    try {
      (arg1)->updateWith((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cDisplayString_1containsTag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  cDisplayString *arg1 = (cDisplayString *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDisplayString **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (bool)((cDisplayString const *)arg1)->containsTag((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cDisplayString_1getNumArgs_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  cDisplayString *arg1 = (cDisplayString *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDisplayString **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (int)((cDisplayString const *)arg1)->getNumArgs((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cDisplayString_1getTagArg_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jstring jresult = 0 ;
  cDisplayString *arg1 = (cDisplayString *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDisplayString **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  {
    try {
      result = (char *)((cDisplayString const *)arg1)->getTagArg((char const *)arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cDisplayString_1setTagArg_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jstring jarg4) {
  jboolean jresult = 0 ;
  cDisplayString *arg1 = (cDisplayString *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDisplayString **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  {
    try {
      result = (bool)(arg1)->setTagArg((char const *)arg2,arg3,(char const *)arg4);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cDisplayString_1setTagArg_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jint jarg4) {
  jboolean jresult = 0 ;
  cDisplayString *arg1 = (cDisplayString *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  long arg4 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDisplayString **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = (long)jarg4; 
  {
    try {
      result = (bool)(arg1)->setTagArg((char const *)arg2,arg3,arg4);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cDisplayString_1removeTag_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  cDisplayString *arg1 = (cDisplayString *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDisplayString **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (bool)(arg1)->removeTag((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cDisplayString_1getNumTags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cDisplayString *arg1 = (cDisplayString *) 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDisplayString **)&jarg1; 
  {
    try {
      result = (int)((cDisplayString const *)arg1)->getNumTags();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cDisplayString_1getTagName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  cDisplayString *arg1 = (cDisplayString *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDisplayString **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (char *)((cDisplayString const *)arg1)->getTagName(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cDisplayString_1getTagIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  cDisplayString *arg1 = (cDisplayString *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDisplayString **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (int)((cDisplayString const *)arg1)->getTagIndex((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cDisplayString_1getNumArgs_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  cDisplayString *arg1 = (cDisplayString *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDisplayString **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (int)((cDisplayString const *)arg1)->getNumArgs(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cDisplayString_1getTagArg_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jstring jresult = 0 ;
  cDisplayString *arg1 = (cDisplayString *) 0 ;
  int arg2 ;
  int arg3 ;
  char *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDisplayString **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      result = (char *)((cDisplayString const *)arg1)->getTagArg(arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cDisplayString_1setTagArg_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jstring jarg4) {
  jboolean jresult = 0 ;
  cDisplayString *arg1 = (cDisplayString *) 0 ;
  int arg2 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDisplayString **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  {
    try {
      result = (bool)(arg1)->setTagArg(arg2,arg3,(char const *)arg4);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cDisplayString_1insertTag_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  cDisplayString *arg1 = (cDisplayString *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDisplayString **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  {
    try {
      result = (int)(arg1)->insertTag((char const *)arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cDisplayString_1insertTag_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  cDisplayString *arg1 = (cDisplayString *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDisplayString **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (int)(arg1)->insertTag((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cDisplayString_1removeTag_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  cDisplayString *arg1 = (cDisplayString *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDisplayString **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (bool)(arg1)->removeTag(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cEnum_1registerNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  cEnum *arg1 = (cEnum *) 0 ;
  char *arg2 = (char *) 0 ;
  cEnum *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cEnum **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (cEnum *)(arg1)->registerNames((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cEnum **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cEnum_1registerValues(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  cEnum *arg1 = (cEnum *) 0 ;
  int arg2 ;
  void *arg3 = 0 ;
  cEnum *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cEnum **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (cEnum *)(arg1)->registerValues(arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cEnum **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cEnum_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  cEnum *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    try {
      result = (cEnum *)new cEnum((char const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cEnum **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cEnum_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cEnum *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      result = (cEnum *)new cEnum();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cEnum **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cEnum_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  cEnum *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (cEnum *)new cEnum((char const *)arg1,(char const *)arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cEnum **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cEnum_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cEnum *arg1 = 0 ;
  cEnum *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cEnum **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cEnum const & reference is null");
    return 0;
  } 
  {
    try {
      result = (cEnum *)new cEnum((cEnum const &)*arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cEnum **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_delete_1cEnum(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cEnum *arg1 = (cEnum *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = *(cEnum **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cEnum_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cEnum *arg1 = (cEnum *) 0 ;
  cEnum *arg2 = 0 ;
  cEnum *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cEnum **)&jarg1; 
  arg2 = *(cEnum **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cEnum const & reference is null");
    return 0;
  } 
  {
    try {
      result = (cEnum *) &(arg1)->operator =((cEnum const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cEnum **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cEnum_1dup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cEnum *arg1 = (cEnum *) 0 ;
  cEnum *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cEnum **)&jarg1; 
  {
    try {
      result = (cEnum *)((cEnum const *)arg1)->dup();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cEnum **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cEnum_1info(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cEnum *arg1 = (cEnum *) 0 ;
  std::string result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cEnum **)&jarg1; 
  {
    try {
      result = ((cEnum const *)arg1)->info();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cEnum_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  cEnum *arg1 = (cEnum *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cEnum **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  {
    try {
      (arg1)->insert(arg2,(char const *)arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cEnum_1getStringFor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  cEnum *arg1 = (cEnum *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cEnum **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (char *)(arg1)->getStringFor(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cEnum_1lookup_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  cEnum *arg1 = (cEnum *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cEnum **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  {
    try {
      result = (int)(arg1)->lookup((char const *)arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cEnum_1lookup_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  cEnum *arg1 = (cEnum *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cEnum **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (int)(arg1)->lookup((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cEnum_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cEnum *arg1 = (cEnum *) 0 ;
  std::string result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cEnum **)&jarg1; 
  {
    try {
      result = ((cEnum const *)arg1)->str();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cEnum_1find(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  cEnum *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    try {
      result = (cEnum *)cEnum::find((char const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cEnum **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cEnum_1get(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  cEnum *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    try {
      result = (cEnum *)cEnum::get((char const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cEnum **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cEnvir_1record_1eventlog_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  cEnvir *arg1 = (cEnvir *) 0 ;
  bool arg2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cEnvir **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->record_eventlog = arg2;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cEnvir_1record_1eventlog_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cEnvir *arg1 = (cEnvir *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cEnvir **)&jarg1; 
  result = (bool) ((arg1)->record_eventlog);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cEnvir_1attach_1debugger_1on_1errors_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  cEnvir *arg1 = (cEnvir *) 0 ;
  bool arg2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cEnvir **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->attach_debugger_on_errors = arg2;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cEnvir_1attach_1debugger_1on_1errors_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cEnvir *arg1 = (cEnvir *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cEnvir **)&jarg1; 
  result = (bool) ((arg1)->attach_debugger_on_errors);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_delete_1cEnvir(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cEnvir *arg1 = (cEnvir *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = *(cEnvir **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cEnvir_1componentInitBegin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  cEnvir *arg1 = (cEnvir *) 0 ;
  cComponent *arg2 = (cComponent *) 0 ;
  int arg3 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cEnvir **)&jarg1; 
  arg2 = *(cComponent **)&jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      (arg1)->componentInitBegin(arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cEnvir_1messageCreated(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  cEnvir *arg1 = (cEnvir *) 0 ;
  cMessage *arg2 = (cMessage *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cEnvir **)&jarg1; 
  arg2 = *(cMessage **)&jarg2; 
  {
    try {
      (arg1)->messageCreated(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cEnvir_1messageCloned(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  cEnvir *arg1 = (cEnvir *) 0 ;
  cMessage *arg2 = (cMessage *) 0 ;
  cMessage *arg3 = (cMessage *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(cEnvir **)&jarg1; 
  arg2 = *(cMessage **)&jarg2; 
  arg3 = *(cMessage **)&jarg3; 
  {
    try {
      (arg1)->messageCloned(arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cEnvir_1configure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  cEnvir *arg1 = (cEnvir *) 0 ;
  cComponent *arg2 = (cComponent *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cEnvir **)&jarg1; 
  arg2 = *(cComponent **)&jarg2; 
  {
    try {
      (arg1)->configure(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cEnvir_1getXMLDocument_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  cEnvir *arg1 = (cEnvir *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  cXMLElement *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cEnvir **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  {
    try {
      result = (cXMLElement *)(arg1)->getXMLDocument((char const *)arg2,(char const *)arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cXMLElement **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cEnvir_1getXMLDocument_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  cEnvir *arg1 = (cEnvir *) 0 ;
  char *arg2 = (char *) 0 ;
  cXMLElement *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cEnvir **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (cXMLElement *)(arg1)->getXMLDocument((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cXMLElement **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cEnvir_1getParsedXMLString_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  cEnvir *arg1 = (cEnvir *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  cXMLElement *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cEnvir **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  {
    try {
      result = (cXMLElement *)(arg1)->getParsedXMLString((char const *)arg2,(char const *)arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cXMLElement **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cEnvir_1getParsedXMLString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  cEnvir *arg1 = (cEnvir *) 0 ;
  char *arg2 = (char *) 0 ;
  cXMLElement *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cEnvir **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (cXMLElement *)(arg1)->getParsedXMLString((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cXMLElement **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cEnvir_1forgetXMLDocument(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  cEnvir *arg1 = (cEnvir *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cEnvir **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    try {
      (arg1)->forgetXMLDocument((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cEnvir_1forgetParsedXMLString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  cEnvir *arg1 = (cEnvir *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cEnvir **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    try {
      (arg1)->forgetParsedXMLString((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cEnvir_1flushXMLDocumentCache(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cEnvir *arg1 = (cEnvir *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cEnvir **)&jarg1; 
  {
    try {
      (arg1)->flushXMLDocumentCache();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cEnvir_1flushXMLParsedContentCache(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cEnvir *arg1 = (cEnvir *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cEnvir **)&jarg1; 
  {
    try {
      (arg1)->flushXMLParsedContentCache();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cEnvir_1getExtraStackForEnvir(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cEnvir *arg1 = (cEnvir *) 0 ;
  unsigned int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cEnvir **)&jarg1; 
  {
    try {
      result = (unsigned int)((cEnvir const *)arg1)->getExtraStackForEnvir();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cEnvir_1isGUI(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cEnvir *arg1 = (cEnvir *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cEnvir **)&jarg1; 
  {
    try {
      result = (bool)((cEnvir const *)arg1)->isGUI();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cEnvir_1isDisabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cEnvir *arg1 = (cEnvir *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cEnvir **)&jarg1; 
  {
    try {
      result = (bool)((cEnvir const *)arg1)->isDisabled();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cEnvir_1printfmsg(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  cEnvir *arg1 = (cEnvir *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cEnvir **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    try {
      (arg1)->printfmsg((char const *)arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cEnvir_1flush(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cEnvir *arg1 = (cEnvir *) 0 ;
  cEnvir *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cEnvir **)&jarg1; 
  {
    try {
      result = (cEnvir *) &(arg1)->flush();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cEnvir **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cEnvir_1gets_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  cEnvir *arg1 = (cEnvir *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  std::string result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cEnvir **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  {
    try {
      result = (arg1)->gets((char const *)arg2,(char const *)arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cEnvir_1gets_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  cEnvir *arg1 = (cEnvir *) 0 ;
  char *arg2 = (char *) 0 ;
  std::string result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cEnvir **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (arg1)->gets((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cEnvir_1askYesNo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  cEnvir *arg1 = (cEnvir *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cEnvir **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (bool)(arg1)->askYesNo((char const *)arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cEnvir_1getNumRNGs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cEnvir *arg1 = (cEnvir *) 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cEnvir **)&jarg1; 
  {
    try {
      result = (int)((cEnvir const *)arg1)->getNumRNGs();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cEnvir_1getRNG(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  cEnvir *arg1 = (cEnvir *) 0 ;
  int arg2 ;
  cRNG *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cEnvir **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (cRNG *)(arg1)->getRNG(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cRNG **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cEnvir_1addResultRecorders(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jstring jarg4, jlong jarg5, jobject jarg5_) {
  cEnvir *arg1 = (cEnvir *) 0 ;
  cComponent *arg2 = (cComponent *) 0 ;
  simsignal_t arg3 ;
  char *arg4 = (char *) 0 ;
  cProperty *arg5 = (cProperty *) 0 ;
  simsignal_t *argp3 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  arg1 = *(cEnvir **)&jarg1; 
  arg2 = *(cComponent **)&jarg2; 
  argp3 = *(simsignal_t **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null simsignal_t");
    return ;
  }
  arg3 = *argp3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  arg5 = *(cProperty **)&jarg5; 
  {
    try {
      (arg1)->addResultRecorders(arg2,arg3,(char const *)arg4,arg5);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cEnvir_1getParsimProcId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cEnvir *arg1 = (cEnvir *) 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cEnvir **)&jarg1; 
  {
    try {
      result = (int)((cEnvir const *)arg1)->getParsimProcId();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cEnvir_1getParsimNumPartitions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cEnvir *arg1 = (cEnvir *) 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cEnvir **)&jarg1; 
  {
    try {
      result = (int)((cEnvir const *)arg1)->getParsimNumPartitions();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cEnvir_1getUniqueNumber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cEnvir *arg1 = (cEnvir *) 0 ;
  unsigned long result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cEnvir **)&jarg1; 
  {
    try {
      result = (unsigned long)(arg1)->getUniqueNumber();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cEnvir_1attachDebugger(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cEnvir *arg1 = (cEnvir *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cEnvir **)&jarg1; 
  {
    try {
      (arg1)->attachDebugger();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cEnvir_1puts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  cEnvir *arg1 = (cEnvir *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cEnvir **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    try {
      cEnvir_puts(arg1,(char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cException_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  OppErrorCode arg1 ;
  void *arg2 = 0 ;
  cException *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = (OppErrorCode)jarg1; 
  {
    try {
      result = (cException *)new cException(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cException **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cException_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  cException *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    try {
      result = (cException *)new cException((char const *)arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cException **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cException_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  cObject *arg1 = (cObject *) 0 ;
  OppErrorCode arg2 ;
  void *arg3 = 0 ;
  cException *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cObject **)&jarg1; 
  arg2 = (OppErrorCode)jarg2; 
  {
    try {
      result = (cException *)new cException((cObject const *)arg1,arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cException **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cException_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  cObject *arg1 = (cObject *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  cException *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cObject **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (cException *)new cException((cObject const *)arg1,(char const *)arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cException **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cException_1dup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cException *arg1 = (cException *) 0 ;
  cException *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cException **)&jarg1; 
  {
    try {
      result = (cException *)((cException const *)arg1)->dup();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cException **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_delete_1cException(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cException *arg1 = (cException *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = *(cException **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cException_1setMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  cException *arg1 = (cException *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cException **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    try {
      (arg1)->setMessage((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cException_1prependMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  cException *arg1 = (cException *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cException **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    try {
      (arg1)->prependMessage((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cException_1isError(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cException *arg1 = (cException *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cException **)&jarg1; 
  {
    try {
      result = (bool)((cException const *)arg1)->isError();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cException_1getErrorCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cException *arg1 = (cException *) 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cException **)&jarg1; 
  {
    try {
      result = (int)((cException const *)arg1)->getErrorCode();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cException_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cException *arg1 = (cException *) 0 ;
  char *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cException **)&jarg1; 
  {
    try {
      result = (char *)((cException const *)arg1)->what();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cException_1getFormattedMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cException *arg1 = (cException *) 0 ;
  std::string result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cException **)&jarg1; 
  {
    try {
      result = ((cException const *)arg1)->getFormattedMessage();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cException_1getSimulationStage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cException *arg1 = (cException *) 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cException **)&jarg1; 
  {
    try {
      result = (int)((cException const *)arg1)->getSimulationStage();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cException_1getEventNumber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cException *arg1 = (cException *) 0 ;
  eventnumber_t result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cException **)&jarg1; 
  {
    try {
      result = (eventnumber_t)((cException const *)arg1)->getEventNumber();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cException_1getSimtime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cException *arg1 = (cException *) 0 ;
  simtime_t result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cException **)&jarg1; 
  {
    try {
      result = ((cException const *)arg1)->getSimtime();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(simtime_t **)&jresult = new simtime_t((const simtime_t &)result); 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cException_1hasContext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cException *arg1 = (cException *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cException **)&jarg1; 
  {
    try {
      result = (bool)((cException const *)arg1)->hasContext();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cException_1getContextClassName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cException *arg1 = (cException *) 0 ;
  char *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cException **)&jarg1; 
  {
    try {
      result = (char *)((cException const *)arg1)->getContextClassName();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cException_1getContextFullPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cException *arg1 = (cException *) 0 ;
  char *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cException **)&jarg1; 
  {
    try {
      result = (char *)((cException const *)arg1)->getContextFullPath();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cException_1getModuleID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cException *arg1 = (cException *) 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cException **)&jarg1; 
  {
    try {
      result = (int)((cException const *)arg1)->getModuleID();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cRuntimeError_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  OppErrorCode arg1 ;
  void *arg2 = 0 ;
  cRuntimeError *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = (OppErrorCode)jarg1; 
  {
    try {
      result = (cRuntimeError *)new cRuntimeError(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cRuntimeError **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cRuntimeError_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  cRuntimeError *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    try {
      result = (cRuntimeError *)new cRuntimeError((char const *)arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cRuntimeError **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cRuntimeError_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  cObject *arg1 = (cObject *) 0 ;
  OppErrorCode arg2 ;
  void *arg3 = 0 ;
  cRuntimeError *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cObject **)&jarg1; 
  arg2 = (OppErrorCode)jarg2; 
  {
    try {
      result = (cRuntimeError *)new cRuntimeError((cObject const *)arg1,arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cRuntimeError **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cRuntimeError_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  cObject *arg1 = (cObject *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  cRuntimeError *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cObject **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (cRuntimeError *)new cRuntimeError((cObject const *)arg1,(char const *)arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cRuntimeError **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cRuntimeError_1dup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cRuntimeError *arg1 = (cRuntimeError *) 0 ;
  cRuntimeError *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cRuntimeError **)&jarg1; 
  {
    try {
      result = (cRuntimeError *)((cRuntimeError const *)arg1)->dup();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cRuntimeError **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cRuntimeError_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cException *arg1 = (cException *) 0 ;
  cRuntimeError *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cException **)&jarg1; 
  {
    try {
      result = (cRuntimeError *)cRuntimeError_cast(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cRuntimeError **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_delete_1cRuntimeError(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cRuntimeError *arg1 = (cRuntimeError *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = *(cRuntimeError **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cDeleteModuleException_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cDeleteModuleException *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      result = (cDeleteModuleException *)new cDeleteModuleException();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cDeleteModuleException **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cDeleteModuleException_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cDeleteModuleException *arg1 = 0 ;
  cDeleteModuleException *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDeleteModuleException **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cDeleteModuleException const & reference is null");
    return 0;
  } 
  {
    try {
      result = (cDeleteModuleException *)new cDeleteModuleException((cDeleteModuleException const &)*arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cDeleteModuleException **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cDeleteModuleException_1dup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cDeleteModuleException *arg1 = (cDeleteModuleException *) 0 ;
  cDeleteModuleException *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDeleteModuleException **)&jarg1; 
  {
    try {
      result = (cDeleteModuleException *)((cDeleteModuleException const *)arg1)->dup();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cDeleteModuleException **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cDeleteModuleException_1isError(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cDeleteModuleException *arg1 = (cDeleteModuleException *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cDeleteModuleException **)&jarg1; 
  {
    try {
      result = (bool)((cDeleteModuleException const *)arg1)->isError();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_delete_1cDeleteModuleException(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cDeleteModuleException *arg1 = (cDeleteModuleException *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = *(cDeleteModuleException **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_delete_1cExpression(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cExpression *arg1 = (cExpression *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = *(cExpression **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cExpression_1dup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cExpression *arg1 = (cExpression *) 0 ;
  cExpression *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cExpression **)&jarg1; 
  {
    try {
      result = (cExpression *)((cExpression const *)arg1)->dup();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cExpression **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cExpression_1info(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cExpression *arg1 = (cExpression *) 0 ;
  std::string result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cExpression **)&jarg1; 
  {
    try {
      result = ((cExpression const *)arg1)->info();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cExpression_1evaluate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cExpression *arg1 = (cExpression *) 0 ;
  cComponent *arg2 = (cComponent *) 0 ;
  cNEDValue result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cExpression **)&jarg1; 
  arg2 = *(cComponent **)&jarg2; 
  {
    try {
      result = ((cExpression const *)arg1)->evaluate(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cNEDValue **)&jresult = new cNEDValue((const cNEDValue &)result); 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cExpression_1evaluate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cExpression *arg1 = (cExpression *) 0 ;
  cNEDValue result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cExpression **)&jarg1; 
  {
    try {
      result = ((cExpression const *)arg1)->evaluate();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cNEDValue **)&jresult = new cNEDValue((const cNEDValue &)result); 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cExpression_1boolValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cExpression *arg1 = (cExpression *) 0 ;
  cComponent *arg2 = (cComponent *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cExpression **)&jarg1; 
  arg2 = *(cComponent **)&jarg2; 
  {
    try {
      result = (bool)(arg1)->boolValue(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cExpression_1boolValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cExpression *arg1 = (cExpression *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cExpression **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->boolValue();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cExpression_1longValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jint jresult = 0 ;
  cExpression *arg1 = (cExpression *) 0 ;
  cComponent *arg2 = (cComponent *) 0 ;
  char *arg3 = (char *) 0 ;
  long result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cExpression **)&jarg1; 
  arg2 = *(cComponent **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  {
    try {
      result = (long)(arg1)->longValue(arg2,(char const *)arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cExpression_1longValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  cExpression *arg1 = (cExpression *) 0 ;
  cComponent *arg2 = (cComponent *) 0 ;
  long result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cExpression **)&jarg1; 
  arg2 = *(cComponent **)&jarg2; 
  {
    try {
      result = (long)(arg1)->longValue(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cExpression_1longValue_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cExpression *arg1 = (cExpression *) 0 ;
  long result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cExpression **)&jarg1; 
  {
    try {
      result = (long)(arg1)->longValue();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_cExpression_1doubleValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jdouble jresult = 0 ;
  cExpression *arg1 = (cExpression *) 0 ;
  cComponent *arg2 = (cComponent *) 0 ;
  char *arg3 = (char *) 0 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cExpression **)&jarg1; 
  arg2 = *(cComponent **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  {
    try {
      result = (double)(arg1)->doubleValue(arg2,(char const *)arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_cExpression_1doubleValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  cExpression *arg1 = (cExpression *) 0 ;
  cComponent *arg2 = (cComponent *) 0 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cExpression **)&jarg1; 
  arg2 = *(cComponent **)&jarg2; 
  {
    try {
      result = (double)(arg1)->doubleValue(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_cExpression_1doubleValue_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  cExpression *arg1 = (cExpression *) 0 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cExpression **)&jarg1; 
  {
    try {
      result = (double)(arg1)->doubleValue();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cExpression_1stringValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jstring jresult = 0 ;
  cExpression *arg1 = (cExpression *) 0 ;
  cComponent *arg2 = (cComponent *) 0 ;
  std::string result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cExpression **)&jarg1; 
  arg2 = *(cComponent **)&jarg2; 
  {
    try {
      result = (arg1)->stringValue(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cExpression_1stringValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cExpression *arg1 = (cExpression *) 0 ;
  std::string result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cExpression **)&jarg1; 
  {
    try {
      result = (arg1)->stringValue();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cExpression_1xmlValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cExpression *arg1 = (cExpression *) 0 ;
  cComponent *arg2 = (cComponent *) 0 ;
  cXMLElement *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cExpression **)&jarg1; 
  arg2 = *(cComponent **)&jarg2; 
  {
    try {
      result = (cXMLElement *)(arg1)->xmlValue(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cXMLElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cExpression_1xmlValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cExpression *arg1 = (cExpression *) 0 ;
  cXMLElement *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cExpression **)&jarg1; 
  {
    try {
      result = (cXMLElement *)(arg1)->xmlValue();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cXMLElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cExpression_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cExpression *arg1 = (cExpression *) 0 ;
  std::string result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cExpression **)&jarg1; 
  {
    try {
      result = ((cExpression const *)arg1)->str();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cExpression_1parse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  cExpression *arg1 = (cExpression *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cExpression **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    try {
      (arg1)->parse((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cExpression_1compare(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  cExpression *arg1 = (cExpression *) 0 ;
  cExpression *arg2 = (cExpression *) 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cExpression **)&jarg1; 
  arg2 = *(cExpression **)&jarg2; 
  {
    try {
      result = (int)((cExpression const *)arg1)->compare((cExpression const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cExpression_1containsConstSubexpressions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cExpression *arg1 = (cExpression *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cExpression **)&jarg1; 
  {
    try {
      result = (bool)((cExpression const *)arg1)->containsConstSubexpressions();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cExpression_1evaluateConstSubexpressions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  cExpression *arg1 = (cExpression *) 0 ;
  cComponent *arg2 = (cComponent *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cExpression **)&jarg1; 
  arg2 = *(cComponent **)&jarg2; 
  {
    try {
      (arg1)->evaluateConstSubexpressions(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_FSM_1MAXT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  result = (int) 64;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cFSM_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  cFSM *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    try {
      result = (cFSM *)new cFSM((char const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cFSM **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cFSM_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cFSM *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      result = (cFSM *)new cFSM();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cFSM **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cFSM_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cFSM *arg1 = 0 ;
  cFSM *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cFSM **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cFSM const & reference is null");
    return 0;
  } 
  {
    try {
      result = (cFSM *)new cFSM((cFSM const &)*arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cFSM **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cFSM_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cFSM *arg1 = (cFSM *) 0 ;
  cFSM *arg2 = 0 ;
  cFSM *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cFSM **)&jarg1; 
  arg2 = *(cFSM **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cFSM const & reference is null");
    return 0;
  } 
  {
    try {
      result = (cFSM *) &(arg1)->operator =((cFSM const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cFSM **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cFSM_1dup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cFSM *arg1 = (cFSM *) 0 ;
  cFSM *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cFSM **)&jarg1; 
  {
    try {
      result = (cFSM *)((cFSM const *)arg1)->dup();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cFSM **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cFSM_1info(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cFSM *arg1 = (cFSM *) 0 ;
  std::string result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cFSM **)&jarg1; 
  {
    try {
      result = ((cFSM const *)arg1)->info();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cFSM_1getState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cFSM *arg1 = (cFSM *) 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cFSM **)&jarg1; 
  {
    try {
      result = (int)((cFSM const *)arg1)->getState();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cFSM_1getStateName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cFSM *arg1 = (cFSM *) 0 ;
  char *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cFSM **)&jarg1; 
  {
    try {
      result = (char *)((cFSM const *)arg1)->getStateName();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cFSM_1isInTransientState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cFSM *arg1 = (cFSM *) 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cFSM **)&jarg1; 
  {
    try {
      result = (int)((cFSM const *)arg1)->isInTransientState();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cFSM_1setState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  cFSM *arg1 = (cFSM *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cFSM **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  {
    try {
      (arg1)->setState(arg2,(char const *)arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cFSM_1setState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  cFSM *arg1 = (cFSM *) 0 ;
  int arg2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cFSM **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->setState(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_delete_1cFSM(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cFSM *arg1 = (cFSM *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = *(cFSM **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_GATEID_1LBITS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  result = (int) 20;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_GATEID_1HMASK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  result = (int) ((~0) << 20);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_GATEID_1LMASK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  result = (int) (~((~0) << 20));
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cGate_1NONE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  cGate::Type result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  result = (cGate::Type)cGate::NONE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cGate_1INPUT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  cGate::Type result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  result = (cGate::Type)cGate::INPUT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cGate_1OUTPUT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  cGate::Type result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  result = (cGate::Type)cGate::OUTPUT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cGate_1INOUT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  cGate::Type result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  result = (cGate::Type)cGate::INOUT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cGate_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cGate *arg1 = (cGate *) 0 ;
  char *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cGate **)&jarg1; 
  {
    try {
      result = (char *)((cGate const *)arg1)->getName();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cGate_1getFullName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cGate *arg1 = (cGate *) 0 ;
  char *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cGate **)&jarg1; 
  {
    try {
      result = (char *)((cGate const *)arg1)->getFullName();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cGate_1forEachChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  cGate *arg1 = (cGate *) 0 ;
  cVisitor *arg2 = (cVisitor *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cGate **)&jarg1; 
  arg2 = *(cVisitor **)&jarg2; 
  {
    try {
      (arg1)->forEachChild(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cGate_1info(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cGate *arg1 = (cGate *) 0 ;
  std::string result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cGate **)&jarg1; 
  {
    try {
      result = ((cGate const *)arg1)->info();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cGate_1getOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cGate *arg1 = (cGate *) 0 ;
  cObject *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cGate **)&jarg1; 
  {
    try {
      result = (cObject *)((cGate const *)arg1)->getOwner();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cObject **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cGate_1deliver(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  cGate *arg1 = (cGate *) 0 ;
  cMessage *arg2 = (cMessage *) 0 ;
  simtime_t arg3 ;
  simtime_t *argp3 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(cGate **)&jarg1; 
  arg2 = *(cMessage **)&jarg2; 
  argp3 = *(simtime_t **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null simtime_t");
    return 0;
  }
  arg3 = *argp3; 
  {
    try {
      result = (bool)(arg1)->deliver(arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cGate_1connectTo_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  jlong jresult = 0 ;
  cGate *arg1 = (cGate *) 0 ;
  cGate *arg2 = (cGate *) 0 ;
  cChannel *arg3 = (cChannel *) 0 ;
  bool arg4 ;
  cChannel *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(cGate **)&jarg1; 
  arg2 = *(cGate **)&jarg2; 
  arg3 = *(cChannel **)&jarg3; 
  arg4 = jarg4 ? true : false; 
  {
    try {
      result = (cChannel *)(arg1)->connectTo(arg2,arg3,arg4);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cChannel **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cGate_1connectTo_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  cGate *arg1 = (cGate *) 0 ;
  cGate *arg2 = (cGate *) 0 ;
  cChannel *arg3 = (cChannel *) 0 ;
  cChannel *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(cGate **)&jarg1; 
  arg2 = *(cGate **)&jarg2; 
  arg3 = *(cChannel **)&jarg3; 
  {
    try {
      result = (cChannel *)(arg1)->connectTo(arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cChannel **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cGate_1connectTo_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cGate *arg1 = (cGate *) 0 ;
  cGate *arg2 = (cGate *) 0 ;
  cChannel *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cGate **)&jarg1; 
  arg2 = *(cGate **)&jarg2; 
  {
    try {
      result = (cChannel *)(arg1)->connectTo(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cChannel **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cGate_1disconnect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cGate *arg1 = (cGate *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cGate **)&jarg1; 
  {
    try {
      (arg1)->disconnect();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cGate_1reconnectWith_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jlong jresult = 0 ;
  cGate *arg1 = (cGate *) 0 ;
  cChannel *arg2 = (cChannel *) 0 ;
  bool arg3 ;
  cChannel *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cGate **)&jarg1; 
  arg2 = *(cChannel **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      result = (cChannel *)(arg1)->reconnectWith(arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cChannel **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cGate_1reconnectWith_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cGate *arg1 = (cGate *) 0 ;
  cChannel *arg2 = (cChannel *) 0 ;
  cChannel *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cGate **)&jarg1; 
  arg2 = *(cChannel **)&jarg2; 
  {
    try {
      result = (cChannel *)(arg1)->reconnectWith(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cChannel **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cGate_1getBaseName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cGate *arg1 = (cGate *) 0 ;
  char *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cGate **)&jarg1; 
  {
    try {
      result = (char *)((cGate const *)arg1)->getBaseName();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cGate_1getNameSuffix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cGate *arg1 = (cGate *) 0 ;
  char *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cGate **)&jarg1; 
  {
    try {
      result = (char *)((cGate const *)arg1)->getNameSuffix();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cGate_1getProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cGate *arg1 = (cGate *) 0 ;
  cProperties *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cGate **)&jarg1; 
  {
    try {
      result = (cProperties *)((cGate const *)arg1)->getProperties();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cProperties **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cGate_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cGate *arg1 = (cGate *) 0 ;
  cGate::Type result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cGate **)&jarg1; 
  {
    try {
      result = (cGate::Type)((cGate const *)arg1)->getType();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cGate_1getTypeName(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  cGate::Type arg1 ;
  char *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = (cGate::Type)jarg1; 
  {
    try {
      result = (char *)cGate::getTypeName(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cGate_1getOwnerModule(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cGate *arg1 = (cGate *) 0 ;
  cModule *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cGate **)&jarg1; 
  {
    try {
      result = (cModule *)((cGate const *)arg1)->getOwnerModule();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cModule **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cGate_1getId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cGate *arg1 = (cGate *) 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cGate **)&jarg1; 
  {
    try {
      result = (int)((cGate const *)arg1)->getId();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cGate_1isVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cGate *arg1 = (cGate *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cGate **)&jarg1; 
  {
    try {
      result = (bool)((cGate const *)arg1)->isVector();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cGate_1getBaseId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cGate *arg1 = (cGate *) 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cGate **)&jarg1; 
  {
    try {
      result = (int)((cGate const *)arg1)->getBaseId();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cGate_1getIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cGate *arg1 = (cGate *) 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cGate **)&jarg1; 
  {
    try {
      result = (int)((cGate const *)arg1)->getIndex();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cGate_1getVectorSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cGate *arg1 = (cGate *) 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cGate **)&jarg1; 
  {
    try {
      result = (int)((cGate const *)arg1)->getVectorSize();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cGate_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cGate *arg1 = (cGate *) 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cGate **)&jarg1; 
  {
    try {
      result = (int)((cGate const *)arg1)->size();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cGate_1getChannel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cGate *arg1 = (cGate *) 0 ;
  cChannel *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cGate **)&jarg1; 
  {
    try {
      result = (cChannel *)((cGate const *)arg1)->getChannel();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cChannel **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cGate_1setDeliverOnReceptionStart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  cGate *arg1 = (cGate *) 0 ;
  bool arg2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cGate **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setDeliverOnReceptionStart(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cGate_1getDeliverOnReceptionStart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cGate *arg1 = (cGate *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cGate **)&jarg1; 
  {
    try {
      result = (bool)((cGate const *)arg1)->getDeliverOnReceptionStart();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cGate_1getTransmissionChannel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cGate *arg1 = (cGate *) 0 ;
  cChannel *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cGate **)&jarg1; 
  {
    try {
      result = (cChannel *)((cGate const *)arg1)->getTransmissionChannel();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cChannel **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cGate_1findTransmissionChannel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cGate *arg1 = (cGate *) 0 ;
  cChannel *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cGate **)&jarg1; 
  {
    try {
      result = (cChannel *)((cGate const *)arg1)->findTransmissionChannel();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cChannel **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cGate_1getIncomingTransmissionChannel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cGate *arg1 = (cGate *) 0 ;
  cChannel *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cGate **)&jarg1; 
  {
    try {
      result = (cChannel *)((cGate const *)arg1)->getIncomingTransmissionChannel();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cChannel **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cGate_1findIncomingTransmissionChannel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cGate *arg1 = (cGate *) 0 ;
  cChannel *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cGate **)&jarg1; 
  {
    try {
      result = (cChannel *)((cGate const *)arg1)->findIncomingTransmissionChannel();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cChannel **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cGate_1getPreviousGate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cGate *arg1 = (cGate *) 0 ;
  cGate *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cGate **)&jarg1; 
  {
    try {
      result = (cGate *)((cGate const *)arg1)->getPreviousGate();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cGate **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cGate_1getNextGate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cGate *arg1 = (cGate *) 0 ;
  cGate *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cGate **)&jarg1; 
  {
    try {
      result = (cGate *)((cGate const *)arg1)->getNextGate();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cGate **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cGate_1getPathStartGate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cGate *arg1 = (cGate *) 0 ;
  cGate *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cGate **)&jarg1; 
  {
    try {
      result = (cGate *)((cGate const *)arg1)->getPathStartGate();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cGate **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cGate_1getPathEndGate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cGate *arg1 = (cGate *) 0 ;
  cGate *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cGate **)&jarg1; 
  {
    try {
      result = (cGate *)((cGate const *)arg1)->getPathEndGate();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cGate **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cGate_1pathContains_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jboolean jresult = 0 ;
  cGate *arg1 = (cGate *) 0 ;
  cModule *arg2 = (cModule *) 0 ;
  int arg3 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cGate **)&jarg1; 
  arg2 = *(cModule **)&jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      result = (bool)(arg1)->pathContains(arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cGate_1pathContains_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cGate *arg1 = (cGate *) 0 ;
  cModule *arg2 = (cModule *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cGate **)&jarg1; 
  arg2 = *(cModule **)&jarg2; 
  {
    try {
      result = (bool)(arg1)->pathContains(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cGate_1isConnectedOutside(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cGate *arg1 = (cGate *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cGate **)&jarg1; 
  {
    try {
      result = (bool)((cGate const *)arg1)->isConnectedOutside();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cGate_1isConnectedInside(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cGate *arg1 = (cGate *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cGate **)&jarg1; 
  {
    try {
      result = (bool)((cGate const *)arg1)->isConnectedInside();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cGate_1isConnected(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cGate *arg1 = (cGate *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cGate **)&jarg1; 
  {
    try {
      result = (bool)((cGate const *)arg1)->isConnected();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cGate_1isPathOK(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cGate *arg1 = (cGate *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cGate **)&jarg1; 
  {
    try {
      result = (bool)((cGate const *)arg1)->isPathOK();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cGate_1getDisplayString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cGate *arg1 = (cGate *) 0 ;
  cDisplayString *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cGate **)&jarg1; 
  {
    try {
      result = (cDisplayString *) &(arg1)->getDisplayString();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cDisplayString **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cGate_1setDisplayString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  cGate *arg1 = (cGate *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cGate **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    try {
      (arg1)->setDisplayString((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cGate_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cObject *arg1 = (cObject *) 0 ;
  cGate *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cObject **)&jarg1; 
  {
    try {
      result = (cGate *)cGate_cast(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cGate **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_MAX_1PARSIM_1PARTITIONS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  result = (int) 32768;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cMessage_1getPreviousEventNumber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cMessage *arg1 = (cMessage *) 0 ;
  eventnumber_t result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMessage **)&jarg1; 
  {
    try {
      result = (eventnumber_t)((cMessage const *)arg1)->getPreviousEventNumber();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cMessage_1setPreviousEventNumber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  cMessage *arg1 = (cMessage *) 0 ;
  eventnumber_t arg2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMessage **)&jarg1; 
  arg2 = (eventnumber_t)jarg2; 
  {
    try {
      (arg1)->setPreviousEventNumber(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cMessage_1setSentFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4, jobject jarg4_) {
  cMessage *arg1 = (cMessage *) 0 ;
  cModule *arg2 = (cModule *) 0 ;
  int arg3 ;
  simtime_t *arg4 = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(cMessage **)&jarg1; 
  arg2 = *(cModule **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = *(simtime_t **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "simtime_t_cref reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setSentFrom(arg2,arg3,(simtime_t const &)*arg4);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cMessage_1setArrival_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  cMessage *arg1 = (cMessage *) 0 ;
  cModule *arg2 = (cModule *) 0 ;
  int arg3 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cMessage **)&jarg1; 
  arg2 = *(cModule **)&jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      (arg1)->setArrival(arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cMessage_1setArrival_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4, jobject jarg4_) {
  cMessage *arg1 = (cMessage *) 0 ;
  cModule *arg2 = (cModule *) 0 ;
  int arg3 ;
  simtime_t *arg4 = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(cMessage **)&jarg1; 
  arg2 = *(cModule **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = *(simtime_t **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "simtime_t_cref reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setArrival(arg2,arg3,(simtime_t const &)*arg4);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cMessage_1setArrivalTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  cMessage *arg1 = (cMessage *) 0 ;
  simtime_t arg2 ;
  simtime_t *argp2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cMessage **)&jarg1; 
  argp2 = *(simtime_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null simtime_t");
    return ;
  }
  arg2 = *argp2; 
  {
    try {
      (arg1)->setArrivalTime(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cMessage_1setSrcProcId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  cMessage *arg1 = (cMessage *) 0 ;
  int arg2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMessage **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->setSrcProcId(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cMessage_1getSrcProcId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cMessage *arg1 = (cMessage *) 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMessage **)&jarg1; 
  {
    try {
      result = (int)((cMessage const *)arg1)->getSrcProcId();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cMessage_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jshort jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  short arg2 ;
  cMessage *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (short)jarg2; 
  {
    try {
      result = (cMessage *)new cMessage((char const *)arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cMessage **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cMessage_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  cMessage *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    try {
      result = (cMessage *)new cMessage((char const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cMessage **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cMessage_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cMessage *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      result = (cMessage *)new cMessage();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cMessage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_delete_1cMessage(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cMessage *arg1 = (cMessage *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = *(cMessage **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cMessage_1isPacket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cMessage *arg1 = (cMessage *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMessage **)&jarg1; 
  {
    try {
      result = (bool)((cMessage const *)arg1)->isPacket();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cMessage_1dup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cMessage *arg1 = (cMessage *) 0 ;
  cMessage *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMessage **)&jarg1; 
  {
    try {
      result = (cMessage *)((cMessage const *)arg1)->dup();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cMessage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cMessage_1info(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cMessage *arg1 = (cMessage *) 0 ;
  std::string result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMessage **)&jarg1; 
  {
    try {
      result = ((cMessage const *)arg1)->info();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cMessage_1detailedInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cMessage *arg1 = (cMessage *) 0 ;
  std::string result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMessage **)&jarg1; 
  {
    try {
      result = ((cMessage const *)arg1)->detailedInfo();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cMessage_1forEachChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  cMessage *arg1 = (cMessage *) 0 ;
  cVisitor *arg2 = (cVisitor *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cMessage **)&jarg1; 
  arg2 = *(cVisitor **)&jarg2; 
  {
    try {
      (arg1)->forEachChild(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cMessage_1setKind(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  cMessage *arg1 = (cMessage *) 0 ;
  short arg2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMessage **)&jarg1; 
  arg2 = (short)jarg2; 
  {
    try {
      (arg1)->setKind(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cMessage_1setSchedulingPriority(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  cMessage *arg1 = (cMessage *) 0 ;
  short arg2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMessage **)&jarg1; 
  arg2 = (short)jarg2; 
  {
    try {
      (arg1)->setSchedulingPriority(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cMessage_1setTimestamp_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cMessage *arg1 = (cMessage *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMessage **)&jarg1; 
  {
    try {
      (arg1)->setTimestamp();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cMessage_1setTimestamp_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  cMessage *arg1 = (cMessage *) 0 ;
  simtime_t arg2 ;
  simtime_t *argp2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cMessage **)&jarg1; 
  argp2 = *(simtime_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null simtime_t");
    return ;
  }
  arg2 = *argp2; 
  {
    try {
      (arg1)->setTimestamp(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cMessage_1setControlInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  cMessage *arg1 = (cMessage *) 0 ;
  cObject *arg2 = (cObject *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cMessage **)&jarg1; 
  arg2 = *(cObject **)&jarg2; 
  {
    try {
      (arg1)->setControlInfo(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cMessage_1removeControlInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cMessage *arg1 = (cMessage *) 0 ;
  cObject *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMessage **)&jarg1; 
  {
    try {
      result = (cObject *)(arg1)->removeControlInfo();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cObject **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jshort Java_org_omnetpp_simkernel_SimkernelJNI_cMessage_1getKind(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  cMessage *arg1 = (cMessage *) 0 ;
  short result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMessage **)&jarg1; 
  {
    try {
      result = (short)((cMessage const *)arg1)->getKind();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jshort Java_org_omnetpp_simkernel_SimkernelJNI_cMessage_1getSchedulingPriority(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  cMessage *arg1 = (cMessage *) 0 ;
  short result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMessage **)&jarg1; 
  {
    try {
      result = (short)((cMessage const *)arg1)->getSchedulingPriority();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cMessage_1getTimestamp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cMessage *arg1 = (cMessage *) 0 ;
  simtime_t *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMessage **)&jarg1; 
  {
    try {
      result = (simtime_t *) &((cMessage const *)arg1)->getTimestamp();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(simtime_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cMessage_1getControlInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cMessage *arg1 = (cMessage *) 0 ;
  cObject *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMessage **)&jarg1; 
  {
    try {
      result = (cObject *)((cMessage const *)arg1)->getControlInfo();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cObject **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cMessage_1getParList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cMessage *arg1 = (cMessage *) 0 ;
  cArray *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMessage **)&jarg1; 
  {
    try {
      result = (cArray *) &(arg1)->getParList();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cMessage_1addPar_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  cMessage *arg1 = (cMessage *) 0 ;
  char *arg2 = (char *) 0 ;
  cMsgPar *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMessage **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (cMsgPar *) &(arg1)->addPar((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cMsgPar **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cMessage_1addPar_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cMessage *arg1 = (cMessage *) 0 ;
  cMsgPar *arg2 = (cMsgPar *) 0 ;
  cMsgPar *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cMessage **)&jarg1; 
  arg2 = *(cMsgPar **)&jarg2; 
  {
    try {
      result = (cMsgPar *) &(arg1)->addPar(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cMsgPar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cMessage_1par_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  cMessage *arg1 = (cMessage *) 0 ;
  int arg2 ;
  cMsgPar *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMessage **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (cMsgPar *) &(arg1)->par(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cMsgPar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cMessage_1par_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  cMessage *arg1 = (cMessage *) 0 ;
  char *arg2 = (char *) 0 ;
  cMsgPar *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMessage **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (cMsgPar *) &(arg1)->par((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cMsgPar **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cMessage_1findPar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  cMessage *arg1 = (cMessage *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMessage **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (int)((cMessage const *)arg1)->findPar((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cMessage_1hasPar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  cMessage *arg1 = (cMessage *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMessage **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (bool)((cMessage const *)arg1)->hasPar((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cMessage_1addObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cMessage *arg1 = (cMessage *) 0 ;
  cObject *arg2 = (cObject *) 0 ;
  cObject *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cMessage **)&jarg1; 
  arg2 = *(cObject **)&jarg2; 
  {
    try {
      result = (cObject *)(arg1)->addObject(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cObject **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cMessage_1getObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  cMessage *arg1 = (cMessage *) 0 ;
  char *arg2 = (char *) 0 ;
  cObject *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMessage **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (cObject *)(arg1)->getObject((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cObject **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cMessage_1hasObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  cMessage *arg1 = (cMessage *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMessage **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (bool)(arg1)->hasObject((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cMessage_1removeObject_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  cMessage *arg1 = (cMessage *) 0 ;
  char *arg2 = (char *) 0 ;
  cObject *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMessage **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (cObject *)(arg1)->removeObject((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cObject **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cMessage_1removeObject_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cMessage *arg1 = (cMessage *) 0 ;
  cObject *arg2 = (cObject *) 0 ;
  cObject *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cMessage **)&jarg1; 
  arg2 = *(cObject **)&jarg2; 
  {
    try {
      result = (cObject *)(arg1)->removeObject(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cObject **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cMessage_1isSelfMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cMessage *arg1 = (cMessage *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMessage **)&jarg1; 
  {
    try {
      result = (bool)((cMessage const *)arg1)->isSelfMessage();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cMessage_1isScheduled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cMessage *arg1 = (cMessage *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMessage **)&jarg1; 
  {
    try {
      result = (bool)((cMessage const *)arg1)->isScheduled();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cMessage_1getSenderModule(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cMessage *arg1 = (cMessage *) 0 ;
  cModule *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMessage **)&jarg1; 
  {
    try {
      result = (cModule *)((cMessage const *)arg1)->getSenderModule();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cModule **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cMessage_1getSenderGate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cMessage *arg1 = (cMessage *) 0 ;
  cGate *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMessage **)&jarg1; 
  {
    try {
      result = (cGate *)((cMessage const *)arg1)->getSenderGate();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cGate **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cMessage_1getArrivalModule(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cMessage *arg1 = (cMessage *) 0 ;
  cModule *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMessage **)&jarg1; 
  {
    try {
      result = (cModule *)((cMessage const *)arg1)->getArrivalModule();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cModule **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cMessage_1getArrivalGate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cMessage *arg1 = (cMessage *) 0 ;
  cGate *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMessage **)&jarg1; 
  {
    try {
      result = (cGate *)((cMessage const *)arg1)->getArrivalGate();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cGate **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cMessage_1getSenderModuleId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cMessage *arg1 = (cMessage *) 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMessage **)&jarg1; 
  {
    try {
      result = (int)((cMessage const *)arg1)->getSenderModuleId();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cMessage_1getSenderGateId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cMessage *arg1 = (cMessage *) 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMessage **)&jarg1; 
  {
    try {
      result = (int)((cMessage const *)arg1)->getSenderGateId();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cMessage_1getArrivalModuleId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cMessage *arg1 = (cMessage *) 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMessage **)&jarg1; 
  {
    try {
      result = (int)((cMessage const *)arg1)->getArrivalModuleId();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cMessage_1getArrivalGateId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cMessage *arg1 = (cMessage *) 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMessage **)&jarg1; 
  {
    try {
      result = (int)((cMessage const *)arg1)->getArrivalGateId();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cMessage_1getCreationTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cMessage *arg1 = (cMessage *) 0 ;
  simtime_t *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMessage **)&jarg1; 
  {
    try {
      result = (simtime_t *) &((cMessage const *)arg1)->getCreationTime();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(simtime_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cMessage_1getSendingTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cMessage *arg1 = (cMessage *) 0 ;
  simtime_t *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMessage **)&jarg1; 
  {
    try {
      result = (simtime_t *) &((cMessage const *)arg1)->getSendingTime();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(simtime_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cMessage_1getArrivalTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cMessage *arg1 = (cMessage *) 0 ;
  simtime_t *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMessage **)&jarg1; 
  {
    try {
      result = (simtime_t *) &((cMessage const *)arg1)->getArrivalTime();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(simtime_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cMessage_1arrivedOn_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  cMessage *arg1 = (cMessage *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMessage **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (bool)((cMessage const *)arg1)->arrivedOn(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cMessage_1arrivedOn_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  cMessage *arg1 = (cMessage *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMessage **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (bool)((cMessage const *)arg1)->arrivedOn((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cMessage_1arrivedOn_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  cMessage *arg1 = (cMessage *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMessage **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  {
    try {
      result = (bool)((cMessage const *)arg1)->arrivedOn((char const *)arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cMessage_1getId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cMessage *arg1 = (cMessage *) 0 ;
  long result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMessage **)&jarg1; 
  {
    try {
      result = (long)((cMessage const *)arg1)->getId();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cMessage_1getTreeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cMessage *arg1 = (cMessage *) 0 ;
  long result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMessage **)&jarg1; 
  {
    try {
      result = (long)((cMessage const *)arg1)->getTreeId();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cMessage_1getDisplayString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cMessage *arg1 = (cMessage *) 0 ;
  char *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMessage **)&jarg1; 
  {
    try {
      result = (char *)((cMessage const *)arg1)->getDisplayString();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cMessage_1getTotalMessageCount(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  long result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      result = (long)cMessage::getTotalMessageCount();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cMessage_1getLiveMessageCount(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  long result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      result = (long)cMessage::getLiveMessageCount();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cMessage_1resetMessageCounters(JNIEnv *jenv, jclass jcls) {
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      cMessage::resetMessageCounters();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cMessage_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cObject *arg1 = (cObject *) 0 ;
  cMessage *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cObject **)&jarg1; 
  {
    try {
      result = (cMessage *)cMessage_cast(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cMessage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cPacket_1setDuration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  cPacket *arg1 = (cPacket *) 0 ;
  simtime_t arg2 ;
  simtime_t *argp2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cPacket **)&jarg1; 
  argp2 = *(simtime_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null simtime_t");
    return ;
  }
  arg2 = *argp2; 
  {
    try {
      (arg1)->setDuration(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cPacket_1setReceptionStart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  cPacket *arg1 = (cPacket *) 0 ;
  bool arg2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cPacket **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setReceptionStart(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cPacket_1getEncapsulationId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cPacket *arg1 = (cPacket *) 0 ;
  long result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cPacket **)&jarg1; 
  {
    try {
      result = (long)((cPacket const *)arg1)->getEncapsulationId();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cPacket_1getEncapsulationTreeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cPacket *arg1 = (cPacket *) 0 ;
  long result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cPacket **)&jarg1; 
  {
    try {
      result = (long)((cPacket const *)arg1)->getEncapsulationTreeId();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cPacket_1_1detachEncapMsg(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cPacket *arg1 = (cPacket *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cPacket **)&jarg1; 
  {
    try {
      (arg1)->_detachEncapMsg();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cPacket_1_1deleteEncapMsg(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cPacket *arg1 = (cPacket *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cPacket **)&jarg1; 
  {
    try {
      (arg1)->_deleteEncapMsg();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cPacket_1getShareCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cPacket *arg1 = (cPacket *) 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cPacket **)&jarg1; 
  {
    try {
      result = (int)((cPacket const *)arg1)->getShareCount();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cPacket_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jshort jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  short arg2 ;
  int64_t arg3 ;
  cPacket *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (short)jarg2; 
  arg3 = (int64_t)jarg3; 
  {
    try {
      result = (cPacket *)new cPacket((char const *)arg1,arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cPacket **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cPacket_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jshort jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  short arg2 ;
  cPacket *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (short)jarg2; 
  {
    try {
      result = (cPacket *)new cPacket((char const *)arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cPacket **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cPacket_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  cPacket *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    try {
      result = (cPacket *)new cPacket((char const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cPacket **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cPacket_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cPacket *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      result = (cPacket *)new cPacket();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cPacket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_delete_1cPacket(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cPacket *arg1 = (cPacket *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = *(cPacket **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cPacket_1dup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cPacket *arg1 = (cPacket *) 0 ;
  cPacket *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cPacket **)&jarg1; 
  {
    try {
      result = (cPacket *)((cPacket const *)arg1)->dup();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cPacket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cPacket_1info(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cPacket *arg1 = (cPacket *) 0 ;
  std::string result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cPacket **)&jarg1; 
  {
    try {
      result = ((cPacket const *)arg1)->info();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cPacket_1detailedInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cPacket *arg1 = (cPacket *) 0 ;
  std::string result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cPacket **)&jarg1; 
  {
    try {
      result = ((cPacket const *)arg1)->detailedInfo();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cPacket_1forEachChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  cPacket *arg1 = (cPacket *) 0 ;
  cVisitor *arg2 = (cVisitor *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cPacket **)&jarg1; 
  arg2 = *(cVisitor **)&jarg2; 
  {
    try {
      (arg1)->forEachChild(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cPacket_1isPacket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cPacket *arg1 = (cPacket *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cPacket **)&jarg1; 
  {
    try {
      result = (bool)((cPacket const *)arg1)->isPacket();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cPacket_1setBitLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  cPacket *arg1 = (cPacket *) 0 ;
  int64_t arg2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cPacket **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  {
    try {
      (arg1)->setBitLength(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cPacket_1setByteLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  cPacket *arg1 = (cPacket *) 0 ;
  int64_t arg2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cPacket **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  {
    try {
      (arg1)->setByteLength(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cPacket_1addBitLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  cPacket *arg1 = (cPacket *) 0 ;
  int64_t arg2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cPacket **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  {
    try {
      (arg1)->addBitLength(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cPacket_1addByteLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  cPacket *arg1 = (cPacket *) 0 ;
  int64_t arg2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cPacket **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  {
    try {
      (arg1)->addByteLength(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cPacket_1getBitLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cPacket *arg1 = (cPacket *) 0 ;
  int64_t result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cPacket **)&jarg1; 
  {
    try {
      result = (int64_t)((cPacket const *)arg1)->getBitLength();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cPacket_1getByteLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cPacket *arg1 = (cPacket *) 0 ;
  int64_t result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cPacket **)&jarg1; 
  {
    try {
      result = (int64_t)((cPacket const *)arg1)->getByteLength();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cPacket_1setBitError(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  cPacket *arg1 = (cPacket *) 0 ;
  bool arg2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cPacket **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setBitError(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cPacket_1hasBitError(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cPacket *arg1 = (cPacket *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cPacket **)&jarg1; 
  {
    try {
      result = (bool)((cPacket const *)arg1)->hasBitError();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cPacket_1encapsulate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  cPacket *arg1 = (cPacket *) 0 ;
  cPacket *arg2 = (cPacket *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cPacket **)&jarg1; 
  arg2 = *(cPacket **)&jarg2; 
  {
    try {
      (arg1)->encapsulate(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cPacket_1decapsulate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cPacket *arg1 = (cPacket *) 0 ;
  cPacket *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cPacket **)&jarg1; 
  {
    try {
      result = (cPacket *)(arg1)->decapsulate();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cPacket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cPacket_1getEncapsulatedPacket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cPacket *arg1 = (cPacket *) 0 ;
  cPacket *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cPacket **)&jarg1; 
  {
    try {
      result = (cPacket *)((cPacket const *)arg1)->getEncapsulatedPacket();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cPacket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cPacket_1getEncapsulatedMsg(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cPacket *arg1 = (cPacket *) 0 ;
  cPacket *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cPacket **)&jarg1; 
  {
    try {
      result = (cPacket *)((cPacket const *)arg1)->getEncapsulatedMsg();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cPacket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cPacket_1hasEncapsulatedPacket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cPacket *arg1 = (cPacket *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cPacket **)&jarg1; 
  {
    try {
      result = (bool)((cPacket const *)arg1)->hasEncapsulatedPacket();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cPacket_1getDuration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cPacket *arg1 = (cPacket *) 0 ;
  simtime_t *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cPacket **)&jarg1; 
  {
    try {
      result = (simtime_t *) &((cPacket const *)arg1)->getDuration();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(simtime_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cPacket_1isReceptionStart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cPacket *arg1 = (cPacket *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cPacket **)&jarg1; 
  {
    try {
      result = (bool)((cPacket const *)arg1)->isReceptionStart();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cPacket_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cObject *arg1 = (cObject *) 0 ;
  cPacket *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cObject **)&jarg1; 
  {
    try {
      result = (cPacket *)cPacket_cast(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cPacket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cMsgPar_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  cMsgPar *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    try {
      result = (cMsgPar *)new cMsgPar((char const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cMsgPar **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cMsgPar_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cMsgPar *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      result = (cMsgPar *)new cMsgPar();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cMsgPar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cMsgPar_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  cMsgPar *arg2 = 0 ;
  cMsgPar *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg2_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(cMsgPar **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cMsgPar & reference is null");
    return 0;
  } 
  {
    try {
      result = (cMsgPar *)new cMsgPar((char const *)arg1,*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cMsgPar **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_delete_1cMsgPar(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cMsgPar *arg1 = (cMsgPar *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = *(cMsgPar **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cMsgPar_1dup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cMsgPar *arg1 = (cMsgPar *) 0 ;
  cMsgPar *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMsgPar **)&jarg1; 
  {
    try {
      result = (cMsgPar *)((cMsgPar const *)arg1)->dup();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cMsgPar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cMsgPar_1info(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cMsgPar *arg1 = (cMsgPar *) 0 ;
  std::string result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMsgPar **)&jarg1; 
  {
    try {
      result = ((cMsgPar const *)arg1)->info();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cMsgPar_1detailedInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cMsgPar *arg1 = (cMsgPar *) 0 ;
  std::string result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMsgPar **)&jarg1; 
  {
    try {
      result = ((cMsgPar const *)arg1)->detailedInfo();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cMsgPar_1forEachChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  cMsgPar *arg1 = (cMsgPar *) 0 ;
  cVisitor *arg2 = (cVisitor *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cMsgPar **)&jarg1; 
  arg2 = *(cVisitor **)&jarg2; 
  {
    try {
      (arg1)->forEachChild(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cMsgPar_1setBoolValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  cMsgPar *arg1 = (cMsgPar *) 0 ;
  bool arg2 ;
  cMsgPar *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMsgPar **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      result = (cMsgPar *) &(arg1)->setBoolValue(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cMsgPar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cMsgPar_1setLongValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  cMsgPar *arg1 = (cMsgPar *) 0 ;
  long arg2 ;
  cMsgPar *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMsgPar **)&jarg1; 
  arg2 = (long)jarg2; 
  {
    try {
      result = (cMsgPar *) &(arg1)->setLongValue(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cMsgPar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cMsgPar_1setStringValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  cMsgPar *arg1 = (cMsgPar *) 0 ;
  char *arg2 = (char *) 0 ;
  cMsgPar *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMsgPar **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (cMsgPar *) &(arg1)->setStringValue((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cMsgPar **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cMsgPar_1setDoubleValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  cMsgPar *arg1 = (cMsgPar *) 0 ;
  double arg2 ;
  cMsgPar *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMsgPar **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      result = (cMsgPar *) &(arg1)->setDoubleValue(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cMsgPar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cMsgPar_1setObjectValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cMsgPar *arg1 = (cMsgPar *) 0 ;
  cOwnedObject *arg2 = (cOwnedObject *) 0 ;
  cMsgPar *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cMsgPar **)&jarg1; 
  arg2 = *(cOwnedObject **)&jarg2; 
  {
    try {
      result = (cMsgPar *) &(arg1)->setObjectValue(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cMsgPar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cMsgPar_1setXMLValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cMsgPar *arg1 = (cMsgPar *) 0 ;
  cXMLElement *arg2 = (cXMLElement *) 0 ;
  cMsgPar *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cMsgPar **)&jarg1; 
  arg2 = *(cXMLElement **)&jarg2; 
  {
    try {
      result = (cMsgPar *) &(arg1)->setXMLValue(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cMsgPar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cMsgPar_1setTakeOwnership(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  cMsgPar *arg1 = (cMsgPar *) 0 ;
  bool arg2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMsgPar **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setTakeOwnership(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cMsgPar_1getTakeOwnership(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cMsgPar *arg1 = (cMsgPar *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMsgPar **)&jarg1; 
  {
    try {
      result = (bool)((cMsgPar const *)arg1)->getTakeOwnership();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cMsgPar_1boolValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cMsgPar *arg1 = (cMsgPar *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMsgPar **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->boolValue();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cMsgPar_1longValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cMsgPar *arg1 = (cMsgPar *) 0 ;
  long result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMsgPar **)&jarg1; 
  {
    try {
      result = (long)(arg1)->longValue();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cMsgPar_1stringValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cMsgPar *arg1 = (cMsgPar *) 0 ;
  char *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMsgPar **)&jarg1; 
  {
    try {
      result = (char *)(arg1)->stringValue();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_cMsgPar_1doubleValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  cMsgPar *arg1 = (cMsgPar *) 0 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMsgPar **)&jarg1; 
  {
    try {
      result = (double)(arg1)->doubleValue();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cMsgPar_1pointerValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cMsgPar *arg1 = (cMsgPar *) 0 ;
  void *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMsgPar **)&jarg1; 
  {
    try {
      result = (void *)(arg1)->pointerValue();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cMsgPar_1getObjectValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cMsgPar *arg1 = (cMsgPar *) 0 ;
  cOwnedObject *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMsgPar **)&jarg1; 
  {
    try {
      result = (cOwnedObject *)(arg1)->getObjectValue();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cOwnedObject **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cMsgPar_1xmlValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cMsgPar *arg1 = (cMsgPar *) 0 ;
  cXMLElement *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMsgPar **)&jarg1; 
  {
    try {
      result = (cXMLElement *)(arg1)->xmlValue();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cXMLElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jchar Java_org_omnetpp_simkernel_SimkernelJNI_cMsgPar_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  cMsgPar *arg1 = (cMsgPar *) 0 ;
  char result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMsgPar **)&jarg1; 
  {
    try {
      result = (char)((cMsgPar const *)arg1)->getType();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cMsgPar_1isNumeric(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cMsgPar *arg1 = (cMsgPar *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMsgPar **)&jarg1; 
  {
    try {
      result = (bool)((cMsgPar const *)arg1)->isNumeric();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cMsgPar_1isConstant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cMsgPar *arg1 = (cMsgPar *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMsgPar **)&jarg1; 
  {
    try {
      result = (bool)((cMsgPar const *)arg1)->isConstant();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cMsgPar_1hasChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cMsgPar *arg1 = (cMsgPar *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMsgPar **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->hasChanged();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cMsgPar_1convertToConst(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cMsgPar *arg1 = (cMsgPar *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMsgPar **)&jarg1; 
  {
    try {
      (arg1)->convertToConst();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cMsgPar_1equalsTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cMsgPar *arg1 = (cMsgPar *) 0 ;
  cMsgPar *arg2 = (cMsgPar *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cMsgPar **)&jarg1; 
  arg2 = *(cMsgPar **)&jarg2; 
  {
    try {
      result = (bool)(arg1)->equalsTo(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cMsgPar_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cMsgPar *arg1 = (cMsgPar *) 0 ;
  std::string result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMsgPar **)&jarg1; 
  {
    try {
      result = ((cMsgPar const *)arg1)->str();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cMsgPar_1parse_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jchar jarg3) {
  jboolean jresult = 0 ;
  cMsgPar *arg1 = (cMsgPar *) 0 ;
  char *arg2 = (char *) 0 ;
  char arg3 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMsgPar **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (char)jarg3; 
  {
    try {
      result = (bool)(arg1)->parse((char const *)arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cMsgPar_1parse_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  cMsgPar *arg1 = (cMsgPar *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMsgPar **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (bool)(arg1)->parse((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cMsgPar_1assign_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  cMsgPar *arg1 = (cMsgPar *) 0 ;
  bool arg2 ;
  cMsgPar *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMsgPar **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      result = (cMsgPar *) &(arg1)->operator =(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cMsgPar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cMsgPar_1assign_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  cMsgPar *arg1 = (cMsgPar *) 0 ;
  char *arg2 = (char *) 0 ;
  cMsgPar *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMsgPar **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (cMsgPar *) &(arg1)->operator =((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cMsgPar **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cMsgPar_1assign_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  jlong jresult = 0 ;
  cMsgPar *arg1 = (cMsgPar *) 0 ;
  char arg2 ;
  cMsgPar *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMsgPar **)&jarg1; 
  arg2 = (char)jarg2; 
  {
    try {
      result = (cMsgPar *) &(arg1)->operator =(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cMsgPar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cMsgPar_1assign_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  jlong jresult = 0 ;
  cMsgPar *arg1 = (cMsgPar *) 0 ;
  unsigned char arg2 ;
  cMsgPar *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMsgPar **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  {
    try {
      result = (cMsgPar *) &(arg1)->operator =(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cMsgPar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cMsgPar_1assign_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  cMsgPar *arg1 = (cMsgPar *) 0 ;
  int arg2 ;
  cMsgPar *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMsgPar **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (cMsgPar *) &(arg1)->operator =(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cMsgPar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cMsgPar_1assign_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  cMsgPar *arg1 = (cMsgPar *) 0 ;
  unsigned int arg2 ;
  cMsgPar *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMsgPar **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = (cMsgPar *) &(arg1)->operator =(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cMsgPar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cMsgPar_1assign_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  cMsgPar *arg1 = (cMsgPar *) 0 ;
  double arg2 ;
  cMsgPar *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMsgPar **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      result = (cMsgPar *) &(arg1)->operator =(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cMsgPar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cMsgPar_1assign_1_1SWIG_111(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cMsgPar *arg1 = (cMsgPar *) 0 ;
  cOwnedObject *arg2 = (cOwnedObject *) 0 ;
  cMsgPar *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cMsgPar **)&jarg1; 
  arg2 = *(cOwnedObject **)&jarg2; 
  {
    try {
      result = (cMsgPar *) &(arg1)->operator =(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cMsgPar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cMsgPar_1assign_1_1SWIG_112(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cMsgPar *arg1 = (cMsgPar *) 0 ;
  cXMLElement *arg2 = (cXMLElement *) 0 ;
  cMsgPar *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cMsgPar **)&jarg1; 
  arg2 = *(cXMLElement **)&jarg2; 
  {
    try {
      result = (cMsgPar *) &(arg1)->operator =(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cMsgPar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cMsgPar_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cObject *arg1 = (cObject *) 0 ;
  cMsgPar *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cObject **)&jarg1; 
  {
    try {
      result = (cMsgPar *)cMsgPar_cast(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cMsgPar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cMessageHeap_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cMessageHeap *arg1 = 0 ;
  cMessageHeap *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMessageHeap **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cMessageHeap const & reference is null");
    return 0;
  } 
  {
    try {
      result = (cMessageHeap *)new cMessageHeap((cMessageHeap const &)*arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cMessageHeap **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cMessageHeap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  cMessageHeap *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  {
    try {
      result = (cMessageHeap *)new cMessageHeap((char const *)arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cMessageHeap **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cMessageHeap_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  cMessageHeap *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    try {
      result = (cMessageHeap *)new cMessageHeap((char const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cMessageHeap **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cMessageHeap_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cMessageHeap *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      result = (cMessageHeap *)new cMessageHeap();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cMessageHeap **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_delete_1cMessageHeap(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cMessageHeap *arg1 = (cMessageHeap *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = *(cMessageHeap **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cMessageHeap_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cMessageHeap *arg1 = (cMessageHeap *) 0 ;
  cMessageHeap *arg2 = 0 ;
  cMessageHeap *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cMessageHeap **)&jarg1; 
  arg2 = *(cMessageHeap **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cMessageHeap const & reference is null");
    return 0;
  } 
  {
    try {
      result = (cMessageHeap *) &(arg1)->operator =((cMessageHeap const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cMessageHeap **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cMessageHeap_1dup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cMessageHeap *arg1 = (cMessageHeap *) 0 ;
  cMessageHeap *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMessageHeap **)&jarg1; 
  {
    try {
      result = (cMessageHeap *)((cMessageHeap const *)arg1)->dup();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cMessageHeap **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cMessageHeap_1info(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cMessageHeap *arg1 = (cMessageHeap *) 0 ;
  std::string result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMessageHeap **)&jarg1; 
  {
    try {
      result = ((cMessageHeap const *)arg1)->info();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cMessageHeap_1forEachChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  cMessageHeap *arg1 = (cMessageHeap *) 0 ;
  cVisitor *arg2 = (cVisitor *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cMessageHeap **)&jarg1; 
  arg2 = *(cVisitor **)&jarg2; 
  {
    try {
      (arg1)->forEachChild(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cMessageHeap_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  cMessageHeap *arg1 = (cMessageHeap *) 0 ;
  cMessage *arg2 = (cMessage *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cMessageHeap **)&jarg1; 
  arg2 = *(cMessage **)&jarg2; 
  {
    try {
      (arg1)->insert(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cMessageHeap_1peekFirst(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cMessageHeap *arg1 = (cMessageHeap *) 0 ;
  cMessage *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMessageHeap **)&jarg1; 
  {
    try {
      result = (cMessage *)((cMessageHeap const *)arg1)->peekFirst();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cMessage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cMessageHeap_1peek(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  cMessageHeap *arg1 = (cMessageHeap *) 0 ;
  int arg2 ;
  cMessage *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMessageHeap **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (cMessage *)(arg1)->peek(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cMessage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cMessageHeap_1removeFirst(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cMessageHeap *arg1 = (cMessageHeap *) 0 ;
  cMessage *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMessageHeap **)&jarg1; 
  {
    try {
      result = (cMessage *)(arg1)->removeFirst();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cMessage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cMessageHeap_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cMessageHeap *arg1 = (cMessageHeap *) 0 ;
  cMessage *arg2 = (cMessage *) 0 ;
  cMessage *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cMessageHeap **)&jarg1; 
  arg2 = *(cMessage **)&jarg2; 
  {
    try {
      result = (cMessage *)(arg1)->remove(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cMessage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cMessageHeap_1sort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cMessageHeap *arg1 = (cMessageHeap *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMessageHeap **)&jarg1; 
  {
    try {
      (arg1)->sort();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cMessageHeap_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cMessageHeap *arg1 = (cMessageHeap *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMessageHeap **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cMessageHeap_1getLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cMessageHeap *arg1 = (cMessageHeap *) 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMessageHeap **)&jarg1; 
  {
    try {
      result = (int)((cMessageHeap const *)arg1)->getLength();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cMessageHeap_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cMessageHeap *arg1 = (cMessageHeap *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMessageHeap **)&jarg1; 
  {
    try {
      result = (bool)((cMessageHeap const *)arg1)->isEmpty();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cMessageHeap_1length(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cMessageHeap *arg1 = (cMessageHeap *) 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMessageHeap **)&jarg1; 
  {
    try {
      result = (int)((cMessageHeap const *)arg1)->length();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cMessageHeap_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cMessageHeap *arg1 = (cMessageHeap *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMessageHeap **)&jarg1; 
  {
    try {
      result = (bool)((cMessageHeap const *)arg1)->empty();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cOutVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  cOutVector *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    try {
      result = (cOutVector *)new cOutVector((char const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cOutVector **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cOutVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cOutVector *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      result = (cOutVector *)new cOutVector();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cOutVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_delete_1cOutVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cOutVector *arg1 = (cOutVector *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = *(cOutVector **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cOutVector_1setName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  cOutVector *arg1 = (cOutVector *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cOutVector **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    try {
      (arg1)->setName((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cOutVector_1info(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cOutVector *arg1 = (cOutVector *) 0 ;
  std::string result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cOutVector **)&jarg1; 
  {
    try {
      result = ((cOutVector const *)arg1)->info();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cOutVector_1setEnum_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  cOutVector *arg1 = (cOutVector *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cOutVector **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    try {
      (arg1)->setEnum((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cOutVector_1setEnum_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  cOutVector *arg1 = (cOutVector *) 0 ;
  cEnum *arg2 = (cEnum *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cOutVector **)&jarg1; 
  arg2 = *(cEnum **)&jarg2; 
  {
    try {
      (arg1)->setEnum(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cOutVector_1setUnit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  cOutVector *arg1 = (cOutVector *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cOutVector **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    try {
      (arg1)->setUnit((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cOutVector_1setType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  cOutVector *arg1 = (cOutVector *) 0 ;
  cOutVector::Type arg2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cOutVector **)&jarg1; 
  arg2 = (cOutVector::Type)jarg2; 
  {
    try {
      (arg1)->setType(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cOutVector_1setInterpolationMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  cOutVector *arg1 = (cOutVector *) 0 ;
  cOutVector::InterpolationMode arg2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cOutVector **)&jarg1; 
  arg2 = (cOutVector::InterpolationMode)jarg2; 
  {
    try {
      (arg1)->setInterpolationMode(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cOutVector_1setMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  cOutVector *arg1 = (cOutVector *) 0 ;
  double arg2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cOutVector **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setMin(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cOutVector_1setMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  cOutVector *arg1 = (cOutVector *) 0 ;
  double arg2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cOutVector **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setMax(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cOutVector_1record_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  cOutVector *arg1 = (cOutVector *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cOutVector **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      result = (bool)(arg1)->record(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cOutVector_1record_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cOutVector *arg1 = (cOutVector *) 0 ;
  SimTime arg2 ;
  SimTime *argp2 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cOutVector **)&jarg1; 
  argp2 = *(SimTime **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SimTime");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)(arg1)->record(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cOutVector_1recordWithTimestamp_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  jboolean jresult = 0 ;
  cOutVector *arg1 = (cOutVector *) 0 ;
  simtime_t arg2 ;
  double arg3 ;
  simtime_t *argp2 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cOutVector **)&jarg1; 
  argp2 = *(simtime_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null simtime_t");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (double)jarg3; 
  {
    try {
      result = (bool)(arg1)->recordWithTimestamp(arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cOutVector_1recordWithTimestamp_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  cOutVector *arg1 = (cOutVector *) 0 ;
  simtime_t arg2 ;
  SimTime arg3 ;
  simtime_t *argp2 ;
  SimTime *argp3 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(cOutVector **)&jarg1; 
  argp2 = *(simtime_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null simtime_t");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(SimTime **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SimTime");
    return 0;
  }
  arg3 = *argp3; 
  {
    try {
      result = (bool)(arg1)->recordWithTimestamp(arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cOutVector_1enable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cOutVector *arg1 = (cOutVector *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cOutVector **)&jarg1; 
  {
    try {
      (arg1)->enable();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cOutVector_1disable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cOutVector *arg1 = (cOutVector *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cOutVector **)&jarg1; 
  {
    try {
      (arg1)->disable();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cOutVector_1setEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  cOutVector *arg1 = (cOutVector *) 0 ;
  bool arg2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cOutVector **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setEnabled(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cOutVector_1isEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cOutVector *arg1 = (cOutVector *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cOutVector **)&jarg1; 
  {
    try {
      result = (bool)((cOutVector const *)arg1)->isEnabled();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cOutVector_1setRecordDuringWarmupPeriod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  cOutVector *arg1 = (cOutVector *) 0 ;
  bool arg2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cOutVector **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setRecordDuringWarmupPeriod(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cOutVector_1getRecordDuringWarmupPeriod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cOutVector *arg1 = (cOutVector *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cOutVector **)&jarg1; 
  {
    try {
      result = (bool)((cOutVector const *)arg1)->getRecordDuringWarmupPeriod();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cOutVector_1getValuesReceived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cOutVector *arg1 = (cOutVector *) 0 ;
  long result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cOutVector **)&jarg1; 
  {
    try {
      result = (long)((cOutVector const *)arg1)->getValuesReceived();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cOutVector_1getValuesStored(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cOutVector *arg1 = (cOutVector *) 0 ;
  long result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cOutVector **)&jarg1; 
  {
    try {
      result = (long)((cOutVector const *)arg1)->getValuesStored();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cOutVector_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cObject *arg1 = (cObject *) 0 ;
  cOutVector *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cObject **)&jarg1; 
  {
    try {
      result = (cOutVector *)cOutVector_cast(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cOutVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cPar_1BOOL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  cPar::Type result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  result = (cPar::Type)cPar::BOOL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cPar_1DOUBLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  cPar::Type result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  result = (cPar::Type)cPar::DOUBLE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cPar_1LONG_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  cPar::Type result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  result = (cPar::Type)cPar::LONG;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cPar_1STRING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  cPar::Type result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  result = (cPar::Type)cPar::STRING;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cPar_1XML_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  cPar::Type result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  result = (cPar::Type)cPar::XML;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cPar_1acceptDefault(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cPar *arg1 = (cPar *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cPar **)&jarg1; 
  {
    try {
      (arg1)->acceptDefault();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_delete_1cPar(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cPar *arg1 = (cPar *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = *(cPar **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cPar_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cPar *arg1 = (cPar *) 0 ;
  char *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cPar **)&jarg1; 
  {
    try {
      result = (char *)((cPar const *)arg1)->getName();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cPar_1info(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cPar *arg1 = (cPar *) 0 ;
  std::string result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cPar **)&jarg1; 
  {
    try {
      result = ((cPar const *)arg1)->info();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cPar_1detailedInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cPar *arg1 = (cPar *) 0 ;
  std::string result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cPar **)&jarg1; 
  {
    try {
      result = ((cPar const *)arg1)->detailedInfo();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cPar_1getOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cPar *arg1 = (cPar *) 0 ;
  cObject *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cPar **)&jarg1; 
  {
    try {
      result = (cObject *)((cPar const *)arg1)->getOwner();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cObject **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cPar_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cPar *arg1 = (cPar *) 0 ;
  cPar::Type result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cPar **)&jarg1; 
  {
    try {
      result = (cPar::Type)((cPar const *)arg1)->getType();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cPar_1getTypeName(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  cPar::Type arg1 ;
  char *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = (cPar::Type)jarg1; 
  {
    try {
      result = (char *)cPar::getTypeName(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cPar_1isNumeric(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cPar *arg1 = (cPar *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cPar **)&jarg1; 
  {
    try {
      result = (bool)((cPar const *)arg1)->isNumeric();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cPar_1isVolatile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cPar *arg1 = (cPar *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cPar **)&jarg1; 
  {
    try {
      result = (bool)((cPar const *)arg1)->isVolatile();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cPar_1isExpression(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cPar *arg1 = (cPar *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cPar **)&jarg1; 
  {
    try {
      result = (bool)((cPar const *)arg1)->isExpression();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cPar_1isShared(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cPar *arg1 = (cPar *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cPar **)&jarg1; 
  {
    try {
      result = (bool)((cPar const *)arg1)->isShared();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cPar_1isSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cPar *arg1 = (cPar *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cPar **)&jarg1; 
  {
    try {
      result = (bool)((cPar const *)arg1)->isSet();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cPar_1containsValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cPar *arg1 = (cPar *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cPar **)&jarg1; 
  {
    try {
      result = (bool)((cPar const *)arg1)->containsValue();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cPar_1getProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cPar *arg1 = (cPar *) 0 ;
  cProperties *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cPar **)&jarg1; 
  {
    try {
      result = (cProperties *)((cPar const *)arg1)->getProperties();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cProperties **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cPar_1setBoolValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  cPar *arg1 = (cPar *) 0 ;
  bool arg2 ;
  cPar *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cPar **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      result = (cPar *) &(arg1)->setBoolValue(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cPar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cPar_1setLongValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  cPar *arg1 = (cPar *) 0 ;
  long arg2 ;
  cPar *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cPar **)&jarg1; 
  arg2 = (long)jarg2; 
  {
    try {
      result = (cPar *) &(arg1)->setLongValue(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cPar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cPar_1setDoubleValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  cPar *arg1 = (cPar *) 0 ;
  double arg2 ;
  cPar *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cPar **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      result = (cPar *) &(arg1)->setDoubleValue(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cPar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cPar_1setStringValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  cPar *arg1 = (cPar *) 0 ;
  char *arg2 = (char *) 0 ;
  cPar *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cPar **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (cPar *) &(arg1)->setStringValue((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cPar **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cPar_1setXMLValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cPar *arg1 = (cPar *) 0 ;
  cXMLElement *arg2 = (cXMLElement *) 0 ;
  cPar *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cPar **)&jarg1; 
  arg2 = *(cXMLElement **)&jarg2; 
  {
    try {
      result = (cPar *) &(arg1)->setXMLValue(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cPar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cPar_1setExpression_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  cPar *arg1 = (cPar *) 0 ;
  cExpression *arg2 = (cExpression *) 0 ;
  cComponent *arg3 = (cComponent *) 0 ;
  cPar *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(cPar **)&jarg1; 
  arg2 = *(cExpression **)&jarg2; 
  arg3 = *(cComponent **)&jarg3; 
  {
    try {
      result = (cPar *) &(arg1)->setExpression(arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cPar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cPar_1setExpression_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cPar *arg1 = (cPar *) 0 ;
  cExpression *arg2 = (cExpression *) 0 ;
  cPar *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cPar **)&jarg1; 
  arg2 = *(cExpression **)&jarg2; 
  {
    try {
      result = (cPar *) &(arg1)->setExpression(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cPar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cPar_1setEvaluationContext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  cPar *arg1 = (cPar *) 0 ;
  cComponent *arg2 = (cComponent *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cPar **)&jarg1; 
  arg2 = *(cComponent **)&jarg2; 
  {
    try {
      (arg1)->setEvaluationContext(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cPar_1boolValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cPar *arg1 = (cPar *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cPar **)&jarg1; 
  {
    try {
      result = (bool)((cPar const *)arg1)->boolValue();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cPar_1longValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cPar *arg1 = (cPar *) 0 ;
  long result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cPar **)&jarg1; 
  {
    try {
      result = (long)((cPar const *)arg1)->longValue();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_cPar_1doubleValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  cPar *arg1 = (cPar *) 0 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cPar **)&jarg1; 
  {
    try {
      result = (double)((cPar const *)arg1)->doubleValue();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cPar_1getUnit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cPar *arg1 = (cPar *) 0 ;
  char *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cPar **)&jarg1; 
  {
    try {
      result = (char *)((cPar const *)arg1)->getUnit();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cPar_1stringValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cPar *arg1 = (cPar *) 0 ;
  char *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cPar **)&jarg1; 
  {
    try {
      result = (char *)((cPar const *)arg1)->stringValue();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cPar_1stdstringValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cPar *arg1 = (cPar *) 0 ;
  std::string result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cPar **)&jarg1; 
  {
    try {
      result = ((cPar const *)arg1)->stdstringValue();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cPar_1xmlValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cPar *arg1 = (cPar *) 0 ;
  cXMLElement *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cPar **)&jarg1; 
  {
    try {
      result = (cXMLElement *)((cPar const *)arg1)->xmlValue();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cXMLElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cPar_1getExpression(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cPar *arg1 = (cPar *) 0 ;
  cExpression *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cPar **)&jarg1; 
  {
    try {
      result = (cExpression *)((cPar const *)arg1)->getExpression();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cExpression **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cPar_1getEvaluationContext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cPar *arg1 = (cPar *) 0 ;
  cComponent *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cPar **)&jarg1; 
  {
    try {
      result = (cComponent *)((cPar const *)arg1)->getEvaluationContext();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cComponent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cPar_1read(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cPar *arg1 = (cPar *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cPar **)&jarg1; 
  {
    try {
      (arg1)->read();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cPar_1finalize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cPar *arg1 = (cPar *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cPar **)&jarg1; 
  {
    try {
      (arg1)->finalize();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cPar_1convertToConst(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cPar *arg1 = (cPar *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cPar **)&jarg1; 
  {
    try {
      (arg1)->convertToConst();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cPar_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cPar *arg1 = (cPar *) 0 ;
  std::string result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cPar **)&jarg1; 
  {
    try {
      result = ((cPar const *)arg1)->str();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cPar_1parse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  cPar *arg1 = (cPar *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cPar **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    try {
      (arg1)->parse((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cPar_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cObject *arg1 = (cObject *) 0 ;
  cPar *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cObject **)&jarg1; 
  {
    try {
      result = (cPar *)cPar_cast(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cPar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_PARSIM_1ANY_1TAG_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  result = (int) -1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cProperty_1DEFAULTKEY_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if (arg1) {
      cProperty::DEFAULTKEY = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)cProperty::DEFAULTKEY, (const char *)arg1);
    } else {
      cProperty::DEFAULTKEY = 0;
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cProperty_1DEFAULTKEY_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  result = (char *)cProperty::DEFAULTKEY;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cProperty_1lock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cProperty *arg1 = (cProperty *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cProperty **)&jarg1; 
  {
    try {
      (arg1)->lock();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cProperty_1isLocked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cProperty *arg1 = (cProperty *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cProperty **)&jarg1; 
  {
    try {
      result = (bool)((cProperty const *)arg1)->isLocked();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cProperty_1setOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  cProperty *arg1 = (cProperty *) 0 ;
  cProperties *arg2 = (cProperties *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cProperty **)&jarg1; 
  arg2 = *(cProperties **)&jarg2; 
  {
    try {
      (arg1)->setOwner(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cProperty_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  cProperty *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (cProperty *)new cProperty((char const *)arg1,(char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cProperty **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cProperty_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  cProperty *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    try {
      result = (cProperty *)new cProperty((char const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cProperty **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cProperty_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cProperty *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      result = (cProperty *)new cProperty();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cProperty **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_delete_1cProperty(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cProperty *arg1 = (cProperty *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = *(cProperty **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cProperty_1setName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  cProperty *arg1 = (cProperty *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cProperty **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    try {
      (arg1)->setName((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cProperty_1getFullName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cProperty *arg1 = (cProperty *) 0 ;
  char *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cProperty **)&jarg1; 
  {
    try {
      result = (char *)((cProperty const *)arg1)->getFullName();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cProperty_1dup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cProperty *arg1 = (cProperty *) 0 ;
  cProperty *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cProperty **)&jarg1; 
  {
    try {
      result = (cProperty *)((cProperty const *)arg1)->dup();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cProperty **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cProperty_1info(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cProperty *arg1 = (cProperty *) 0 ;
  std::string result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cProperty **)&jarg1; 
  {
    try {
      result = ((cProperty const *)arg1)->info();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cProperty_1setIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  cProperty *arg1 = (cProperty *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cProperty **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    try {
      (arg1)->setIndex((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cProperty_1getIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cProperty *arg1 = (cProperty *) 0 ;
  char *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cProperty **)&jarg1; 
  {
    try {
      result = (char *)((cProperty const *)arg1)->getIndex();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cProperty_1setIsImplicit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  cProperty *arg1 = (cProperty *) 0 ;
  bool arg2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cProperty **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setIsImplicit(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cProperty_1isImplicit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cProperty *arg1 = (cProperty *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cProperty **)&jarg1; 
  {
    try {
      result = (bool)((cProperty const *)arg1)->isImplicit();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cProperty_1getKeys(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cProperty *arg1 = (cProperty *) 0 ;
  std::vector< char const * > *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cProperty **)&jarg1; 
  {
    try {
      result = (std::vector< char const * > *) &((cProperty const *)arg1)->getKeys();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(std::vector< char const * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cProperty_1containsKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  cProperty *arg1 = (cProperty *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cProperty **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (bool)((cProperty const *)arg1)->containsKey((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cProperty_1addKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  cProperty *arg1 = (cProperty *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cProperty **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    try {
      (arg1)->addKey((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cProperty_1getNumValues(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  cProperty *arg1 = (cProperty *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cProperty **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (int)((cProperty const *)arg1)->getNumValues((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cProperty_1setNumValues(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  cProperty *arg1 = (cProperty *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cProperty **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (int)jarg3; 
  {
    try {
      (arg1)->setNumValues((char const *)arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cProperty_1getValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jstring jresult = 0 ;
  cProperty *arg1 = (cProperty *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cProperty **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  {
    try {
      result = (char *)((cProperty const *)arg1)->getValue((char const *)arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cProperty_1getValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  cProperty *arg1 = (cProperty *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cProperty **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (char *)((cProperty const *)arg1)->getValue((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cProperty_1setValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jstring jarg4) {
  cProperty *arg1 = (cProperty *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cProperty **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (int)jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  {
    try {
      (arg1)->setValue((char const *)arg2,arg3,(char const *)arg4);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cProperty_1erase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  cProperty *arg1 = (cProperty *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cProperty **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    try {
      (arg1)->erase((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cProperty_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cObject *arg1 = (cObject *) 0 ;
  cProperty *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cObject **)&jarg1; 
  {
    try {
      result = (cProperty *)cProperty_cast(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cProperty **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cProperties_1lock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cProperties *arg1 = (cProperties *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cProperties **)&jarg1; 
  {
    try {
      (arg1)->lock();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cProperties_1addRef(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cProperties *arg1 = (cProperties *) 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cProperties **)&jarg1; 
  {
    try {
      result = (int)(arg1)->addRef();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cProperties_1removeRef(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cProperties *arg1 = (cProperties *) 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cProperties **)&jarg1; 
  {
    try {
      result = (int)(arg1)->removeRef();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cProperties(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cProperties *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      result = (cProperties *)new cProperties();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cProperties **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_delete_1cProperties(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cProperties *arg1 = (cProperties *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = *(cProperties **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cProperties_1dup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cProperties *arg1 = (cProperties *) 0 ;
  cProperties *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cProperties **)&jarg1; 
  {
    try {
      result = (cProperties *)((cProperties const *)arg1)->dup();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cProperties **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cProperties_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cProperties *arg1 = (cProperties *) 0 ;
  char *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cProperties **)&jarg1; 
  {
    try {
      result = (char *)((cProperties const *)arg1)->getName();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cProperties_1info(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cProperties *arg1 = (cProperties *) 0 ;
  std::string result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cProperties **)&jarg1; 
  {
    try {
      result = ((cProperties const *)arg1)->info();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cProperties_1getNumProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cProperties *arg1 = (cProperties *) 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cProperties **)&jarg1; 
  {
    try {
      result = (int)((cProperties const *)arg1)->getNumProperties();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cProperties_1getNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cProperties *arg1 = (cProperties *) 0 ;
  std::vector< char const * > result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cProperties **)&jarg1; 
  {
    try {
      result = ((cProperties const *)arg1)->getNames();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(std::vector< char const * > **)&jresult = new std::vector< char const * >((const std::vector< char const * > &)result); 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cProperties_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  cProperties *arg1 = (cProperties *) 0 ;
  int arg2 ;
  cProperty *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cProperties **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (cProperty *)((cProperties const *)arg1)->get(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cProperty **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cProperties_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  cProperties *arg1 = (cProperties *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  cProperty *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cProperties **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  {
    try {
      result = (cProperty *)((cProperties const *)arg1)->get((char const *)arg2,(char const *)arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cProperty **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cProperties_1get_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  cProperties *arg1 = (cProperties *) 0 ;
  char *arg2 = (char *) 0 ;
  cProperty *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cProperties **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (cProperty *)((cProperties const *)arg1)->get((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cProperty **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cProperties_1getAsBool_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  cProperties *arg1 = (cProperties *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cProperties **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  {
    try {
      result = (bool)((cProperties const *)arg1)->getAsBool((char const *)arg2,(char const *)arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cProperties_1getAsBool_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  cProperties *arg1 = (cProperties *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cProperties **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (bool)((cProperties const *)arg1)->getAsBool((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cProperties_1getIndicesFor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  cProperties *arg1 = (cProperties *) 0 ;
  char *arg2 = (char *) 0 ;
  std::vector< char const * > result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cProperties **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = ((cProperties const *)arg1)->getIndicesFor((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(std::vector< char const * > **)&jresult = new std::vector< char const * >((const std::vector< char const * > &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cProperties_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  cProperties *arg1 = (cProperties *) 0 ;
  cProperty *arg2 = (cProperty *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cProperties **)&jarg1; 
  arg2 = *(cProperty **)&jarg2; 
  {
    try {
      (arg1)->add(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cProperties_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  cProperties *arg1 = (cProperties *) 0 ;
  int arg2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cProperties **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->remove(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cProperties_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cObject *arg1 = (cObject *) 0 ;
  cProperties *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cObject **)&jarg1; 
  {
    try {
      result = (cProperties *)cProperties_cast(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cProperties **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cSimulation(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  cEnvir *arg2 = (cEnvir *) 0 ;
  cSimulation *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg2_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(cEnvir **)&jarg2; 
  {
    try {
      result = (cSimulation *)new cSimulation((char const *)arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cSimulation **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_delete_1cSimulation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cSimulation *arg1 = (cSimulation *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = *(cSimulation **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cSimulation_1forEachChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  cSimulation *arg1 = (cSimulation *) 0 ;
  cVisitor *arg2 = (cVisitor *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cSimulation **)&jarg1; 
  arg2 = *(cVisitor **)&jarg2; 
  {
    try {
      (arg1)->forEachChild(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cSimulation_1getFullPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cSimulation *arg1 = (cSimulation *) 0 ;
  std::string result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cSimulation **)&jarg1; 
  {
    try {
      result = ((cSimulation const *)arg1)->getFullPath();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cSimulation_1getActiveSimulation(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cSimulation *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      result = (cSimulation *)cSimulation::getActiveSimulation();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cSimulation **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cSimulation_1getActiveEnvir(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cEnvir *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      result = (cEnvir *)cSimulation::getActiveEnvir();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cEnvir **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cSimulation_1setActiveSimulation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cSimulation *arg1 = (cSimulation *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cSimulation **)&jarg1; 
  {
    try {
      cSimulation::setActiveSimulation(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cSimulation_1setStaticEnvir(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cEnvir *arg1 = (cEnvir *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cEnvir **)&jarg1; 
  {
    try {
      cSimulation::setStaticEnvir(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cSimulation_1getStaticEnvir(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cEnvir *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      result = (cEnvir *)cSimulation::getStaticEnvir();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cEnvir **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cSimulation_1getEnvir(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cSimulation *arg1 = (cSimulation *) 0 ;
  cEnvir *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cSimulation **)&jarg1; 
  {
    try {
      result = (cEnvir *)((cSimulation const *)arg1)->getEnvir();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cEnvir **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cSimulation_1getLastModuleId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cSimulation *arg1 = (cSimulation *) 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cSimulation **)&jarg1; 
  {
    try {
      result = (int)((cSimulation const *)arg1)->getLastModuleId();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cSimulation_1getModuleByPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  cSimulation *arg1 = (cSimulation *) 0 ;
  char *arg2 = (char *) 0 ;
  cModule *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cSimulation **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (cModule *)((cSimulation const *)arg1)->getModuleByPath((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cModule **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cSimulation_1getModule(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  cSimulation *arg1 = (cSimulation *) 0 ;
  int arg2 ;
  cModule *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cSimulation **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (cModule *)((cSimulation const *)arg1)->getModule(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cModule **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cSimulation_1getSystemModule(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cSimulation *arg1 = (cSimulation *) 0 ;
  cModule *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cSimulation **)&jarg1; 
  {
    try {
      result = (cModule *)((cSimulation const *)arg1)->getSystemModule();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cModule **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cSimulation_1loadNedSourceFolder(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    try {
      result = (int)cSimulation::loadNedSourceFolder((char const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cSimulation_1loadNedText_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jboolean jarg4) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = jarg4 ? true : false; 
  {
    try {
      cSimulation::loadNedText((char const *)arg1,(char const *)arg2,(char const *)arg3,arg4);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cSimulation_1loadNedText_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  {
    try {
      cSimulation::loadNedText((char const *)arg1,(char const *)arg2,(char const *)arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cSimulation_1loadNedText_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    try {
      cSimulation::loadNedText((char const *)arg1,(char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cSimulation_1doneLoadingNedFiles(JNIEnv *jenv, jclass jcls) {
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      cSimulation::doneLoadingNedFiles();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cSimulation_1getNedPackageForFolder(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jstring jresult = 0 ;
  char *arg1 = (char *) 0 ;
  std::string result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    try {
      result = cSimulation::getNedPackageForFolder((char const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cSimulation_1getSimulationStage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cSimulation *arg1 = (cSimulation *) 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cSimulation **)&jarg1; 
  {
    try {
      result = (int)((cSimulation const *)arg1)->getSimulationStage();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cSimulation_1getSimTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cSimulation *arg1 = (cSimulation *) 0 ;
  simtime_t *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cSimulation **)&jarg1; 
  {
    try {
      result = (simtime_t *) &((cSimulation const *)arg1)->getSimTime();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(simtime_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cSimulation_1getEventNumber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cSimulation *arg1 = (cSimulation *) 0 ;
  eventnumber_t result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cSimulation **)&jarg1; 
  {
    try {
      result = (eventnumber_t)((cSimulation const *)arg1)->getEventNumber();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cSimulation_1getWarmupPeriod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cSimulation *arg1 = (cSimulation *) 0 ;
  simtime_t *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cSimulation **)&jarg1; 
  {
    try {
      result = (simtime_t *) &((cSimulation const *)arg1)->getWarmupPeriod();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(simtime_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cSimulation_1setWarmupPeriod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  cSimulation *arg1 = (cSimulation *) 0 ;
  simtime_t arg2 ;
  simtime_t *argp2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cSimulation **)&jarg1; 
  argp2 = *(simtime_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null simtime_t");
    return ;
  }
  arg2 = *argp2; 
  {
    try {
      (arg1)->setWarmupPeriod(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cSimulation_1insertMsg(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  cSimulation *arg1 = (cSimulation *) 0 ;
  cMessage *arg2 = (cMessage *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cSimulation **)&jarg1; 
  arg2 = *(cMessage **)&jarg2; 
  {
    try {
      (arg1)->insertMsg(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cSimulation_1getActivityModule(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cSimulation *arg1 = (cSimulation *) 0 ;
  cSimpleModule *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cSimulation **)&jarg1; 
  {
    try {
      result = (cSimpleModule *)((cSimulation const *)arg1)->getActivityModule();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cSimpleModule **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cSimulation_1getContext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cSimulation *arg1 = (cSimulation *) 0 ;
  cComponent *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cSimulation **)&jarg1; 
  {
    try {
      result = (cComponent *)((cSimulation const *)arg1)->getContext();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cComponent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cSimulation_1getContextType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cSimulation *arg1 = (cSimulation *) 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cSimulation **)&jarg1; 
  {
    try {
      result = (int)((cSimulation const *)arg1)->getContextType();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cSimulation_1getContextModule(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cSimulation *arg1 = (cSimulation *) 0 ;
  cModule *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cSimulation **)&jarg1; 
  {
    try {
      result = (cModule *)((cSimulation const *)arg1)->getContextModule();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cModule **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cSimulation_1getContextSimpleModule(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cSimulation *arg1 = (cSimulation *) 0 ;
  cSimpleModule *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cSimulation **)&jarg1; 
  {
    try {
      result = (cSimpleModule *)((cSimulation const *)arg1)->getContextSimpleModule();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cSimpleModule **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cSimulation_1requestTrapOnNextEvent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cSimulation *arg1 = (cSimulation *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cSimulation **)&jarg1; 
  {
    try {
      (arg1)->requestTrapOnNextEvent();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cSimulation_1clearTrapOnNextEvent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cSimulation *arg1 = (cSimulation *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cSimulation **)&jarg1; 
  {
    try {
      (arg1)->clearTrapOnNextEvent();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cSimulation_1isTrapOnNextEventRequested(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cSimulation *arg1 = (cSimulation *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cSimulation **)&jarg1; 
  {
    try {
      result = (bool)((cSimulation const *)arg1)->isTrapOnNextEventRequested();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cSimulation_1getUniqueNumber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cSimulation *arg1 = (cSimulation *) 0 ;
  unsigned long result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cSimulation **)&jarg1; 
  {
    try {
      result = (unsigned long)(arg1)->getUniqueNumber();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cSimulation_1snapshot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jboolean jresult = 0 ;
  cSimulation *arg1 = (cSimulation *) 0 ;
  cObject *arg2 = (cObject *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cSimulation **)&jarg1; 
  arg2 = *(cObject **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  {
    try {
      result = (bool)(arg1)->snapshot(arg2,(char const *)arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cSimulation_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cObject *arg1 = (cObject *) 0 ;
  cSimulation *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cObject **)&jarg1; 
  {
    try {
      result = (cSimulation *)cSimulation_cast(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cSimulation **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_simTime(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  simtime_t result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      result = simTime();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(simtime_t **)&jresult = new simtime_t((const simtime_t &)result); 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cClassDescriptor_1FD_1ISARRAY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  result = (int)cClassDescriptor::FD_ISARRAY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cClassDescriptor_1FD_1ISCOMPOUND_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  result = (int)cClassDescriptor::FD_ISCOMPOUND;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cClassDescriptor_1FD_1ISPOINTER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  result = (int)cClassDescriptor::FD_ISPOINTER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cClassDescriptor_1FD_1ISCOBJECT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  result = (int)cClassDescriptor::FD_ISCOBJECT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cClassDescriptor_1FD_1ISCOWNEDOBJECT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  result = (int)cClassDescriptor::FD_ISCOWNEDOBJECT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cClassDescriptor_1FD_1ISEDITABLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  result = (int)cClassDescriptor::FD_ISEDITABLE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cClassDescriptor_1FD_1NONE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  result = (int)cClassDescriptor::FD_NONE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_delete_1cClassDescriptor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cClassDescriptor *arg1 = (cClassDescriptor *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = *(cClassDescriptor **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cClassDescriptor_1getDescriptorFor_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  cClassDescriptor *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    try {
      result = (cClassDescriptor *)cClassDescriptor::getDescriptorFor((char const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cClassDescriptor **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cClassDescriptor_1getDescriptorFor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cObject *arg1 = (cObject *) 0 ;
  cClassDescriptor *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cObject **)&jarg1; 
  {
    try {
      result = (cClassDescriptor *)cClassDescriptor::getDescriptorFor(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cClassDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cClassDescriptor_1doesSupport(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cClassDescriptor *arg1 = (cClassDescriptor *) 0 ;
  cObject *arg2 = (cObject *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cClassDescriptor **)&jarg1; 
  arg2 = *(cObject **)&jarg2; 
  {
    try {
      result = (bool)((cClassDescriptor const *)arg1)->doesSupport(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cClassDescriptor_1getBaseClassDescriptor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cClassDescriptor *arg1 = (cClassDescriptor *) 0 ;
  cClassDescriptor *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cClassDescriptor **)&jarg1; 
  {
    try {
      result = (cClassDescriptor *)((cClassDescriptor const *)arg1)->getBaseClassDescriptor();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cClassDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cClassDescriptor_1extendsCObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cClassDescriptor *arg1 = (cClassDescriptor *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cClassDescriptor **)&jarg1; 
  {
    try {
      result = (bool)((cClassDescriptor const *)arg1)->extendsCObject();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cClassDescriptor_1getInheritanceChainLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cClassDescriptor *arg1 = (cClassDescriptor *) 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cClassDescriptor **)&jarg1; 
  {
    try {
      result = (int)((cClassDescriptor const *)arg1)->getInheritanceChainLength();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cClassDescriptor_1getProperty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  cClassDescriptor *arg1 = (cClassDescriptor *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cClassDescriptor **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (char *)((cClassDescriptor const *)arg1)->getProperty((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cClassDescriptor_1getFieldCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  cClassDescriptor *arg1 = (cClassDescriptor *) 0 ;
  void *arg2 = (void *) 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cClassDescriptor **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  {
    try {
      result = (int)((cClassDescriptor const *)arg1)->getFieldCount(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cClassDescriptor_1getFieldName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jstring jresult = 0 ;
  cClassDescriptor *arg1 = (cClassDescriptor *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  char *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cClassDescriptor **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      result = (char *)((cClassDescriptor const *)arg1)->getFieldName(arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cClassDescriptor_1findField(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jint jresult = 0 ;
  cClassDescriptor *arg1 = (cClassDescriptor *) 0 ;
  void *arg2 = (void *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cClassDescriptor **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  {
    try {
      result = (int)((cClassDescriptor const *)arg1)->findField(arg2,(char const *)arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cClassDescriptor_1getFieldTypeFlags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jlong jresult = 0 ;
  cClassDescriptor *arg1 = (cClassDescriptor *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  unsigned int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cClassDescriptor **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      result = (unsigned int)((cClassDescriptor const *)arg1)->getFieldTypeFlags(arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cClassDescriptor_1getFieldIsArray(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  cClassDescriptor *arg1 = (cClassDescriptor *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cClassDescriptor **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      result = (bool)((cClassDescriptor const *)arg1)->getFieldIsArray(arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cClassDescriptor_1getFieldIsCompound(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  cClassDescriptor *arg1 = (cClassDescriptor *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cClassDescriptor **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      result = (bool)((cClassDescriptor const *)arg1)->getFieldIsCompound(arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cClassDescriptor_1getFieldIsPointer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  cClassDescriptor *arg1 = (cClassDescriptor *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cClassDescriptor **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      result = (bool)((cClassDescriptor const *)arg1)->getFieldIsPointer(arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cClassDescriptor_1getFieldIsCObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  cClassDescriptor *arg1 = (cClassDescriptor *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cClassDescriptor **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      result = (bool)((cClassDescriptor const *)arg1)->getFieldIsCObject(arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cClassDescriptor_1getFieldIsCOwnedObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  cClassDescriptor *arg1 = (cClassDescriptor *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cClassDescriptor **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      result = (bool)((cClassDescriptor const *)arg1)->getFieldIsCOwnedObject(arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cClassDescriptor_1getFieldIsEditable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  cClassDescriptor *arg1 = (cClassDescriptor *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cClassDescriptor **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      result = (bool)((cClassDescriptor const *)arg1)->getFieldIsEditable(arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cClassDescriptor_1getFieldDeclaredOn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jstring jresult = 0 ;
  cClassDescriptor *arg1 = (cClassDescriptor *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  char *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cClassDescriptor **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      result = (char *)((cClassDescriptor const *)arg1)->getFieldDeclaredOn(arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cClassDescriptor_1getFieldTypeString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jstring jresult = 0 ;
  cClassDescriptor *arg1 = (cClassDescriptor *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  char *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cClassDescriptor **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      result = (char *)((cClassDescriptor const *)arg1)->getFieldTypeString(arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cClassDescriptor_1getFieldProperty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jstring jarg4) {
  jstring jresult = 0 ;
  cClassDescriptor *arg1 = (cClassDescriptor *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cClassDescriptor **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  {
    try {
      result = (char *)((cClassDescriptor const *)arg1)->getFieldProperty(arg2,arg3,(char const *)arg4);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cClassDescriptor_1getArraySize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  cClassDescriptor *arg1 = (cClassDescriptor *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cClassDescriptor **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      result = (int)((cClassDescriptor const *)arg1)->getArraySize(arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cClassDescriptor_1getFieldAsString_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jint jarg4) {
  jstring jresult = 0 ;
  cClassDescriptor *arg1 = (cClassDescriptor *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  int arg4 ;
  std::string result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cClassDescriptor **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  {
    try {
      result = ((cClassDescriptor const *)arg1)->getFieldAsString(arg2,arg3,arg4);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cClassDescriptor_1getFieldAsString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jint jarg4, jstring jarg5, jint jarg6) {
  jboolean jresult = 0 ;
  cClassDescriptor *arg1 = (cClassDescriptor *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  int arg6 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cClassDescriptor **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = (int)jarg6; 
  {
    try {
      result = (bool)((cClassDescriptor const *)arg1)->getFieldAsString(arg2,arg3,arg4,arg5,arg6);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cClassDescriptor_1setFieldAsString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jint jarg4, jstring jarg5) {
  jboolean jresult = 0 ;
  cClassDescriptor *arg1 = (cClassDescriptor *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cClassDescriptor **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  {
    try {
      result = (bool)((cClassDescriptor const *)arg1)->setFieldAsString(arg2,arg3,arg4,(char const *)arg5);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cClassDescriptor_1getFieldStructName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jstring jresult = 0 ;
  cClassDescriptor *arg1 = (cClassDescriptor *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  char *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cClassDescriptor **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      result = (char *)((cClassDescriptor const *)arg1)->getFieldStructName(arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cClassDescriptor_1getFieldStructPointer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jint jarg4) {
  jlong jresult = 0 ;
  cClassDescriptor *arg1 = (cClassDescriptor *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  int arg4 ;
  void *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cClassDescriptor **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  {
    try {
      result = (void *)((cClassDescriptor const *)arg1)->getFieldStructPointer(arg2,arg3,arg4);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cClassDescriptor_1getFieldAsCObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jint jarg4) {
  jlong jresult = 0 ;
  cClassDescriptor *arg1 = (cClassDescriptor *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  int arg4 ;
  cObject *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cClassDescriptor **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  {
    try {
      result = (cObject *)cClassDescriptor_getFieldAsCObject(arg1,arg2,arg3,arg4);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cObject **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_delete_1cVisitor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cVisitor *arg1 = (cVisitor *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = *(cVisitor **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cVisitor_1process(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cVisitor *arg1 = (cVisitor *) 0 ;
  cObject *arg2 = (cObject *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cVisitor **)&jarg1; 
  arg2 = *(cObject **)&jarg2; 
  {
    try {
      result = (bool)(arg1)->process(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cVisitor_1processChildrenOf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  cVisitor *arg1 = (cVisitor *) 0 ;
  cObject *arg2 = (cObject *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cVisitor **)&jarg1; 
  arg2 = *(cObject **)&jarg2; 
  {
    try {
      result = (bool)(arg1)->processChildrenOf(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cVisitor_1visit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  cVisitor *arg1 = (cVisitor *) 0 ;
  cObject *arg2 = (cObject *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cVisitor **)&jarg1; 
  arg2 = *(cObject **)&jarg2; 
  {
    try {
      (arg1)->visit(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cStdVectorWatcherBase_1info(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cStdVectorWatcherBase *arg1 = (cStdVectorWatcherBase *) 0 ;
  std::string result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cStdVectorWatcherBase **)&jarg1; 
  {
    try {
      result = ((cStdVectorWatcherBase const *)arg1)->info();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cStdVectorWatcherBase_1detailedInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cStdVectorWatcherBase *arg1 = (cStdVectorWatcherBase *) 0 ;
  std::string result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cStdVectorWatcherBase **)&jarg1; 
  {
    try {
      result = ((cStdVectorWatcherBase const *)arg1)->detailedInfo();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cStdVectorWatcherBase_1supportsAssignment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cStdVectorWatcherBase *arg1 = (cStdVectorWatcherBase *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cStdVectorWatcherBase **)&jarg1; 
  {
    try {
      result = (bool)((cStdVectorWatcherBase const *)arg1)->supportsAssignment();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cStdVectorWatcherBase_1getElemTypeName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cStdVectorWatcherBase *arg1 = (cStdVectorWatcherBase *) 0 ;
  char *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cStdVectorWatcherBase **)&jarg1; 
  {
    try {
      result = (char *)((cStdVectorWatcherBase const *)arg1)->getElemTypeName();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cStdVectorWatcherBase_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cStdVectorWatcherBase *arg1 = (cStdVectorWatcherBase *) 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cStdVectorWatcherBase **)&jarg1; 
  {
    try {
      result = (int)((cStdVectorWatcherBase const *)arg1)->size();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cStdVectorWatcherBase_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  cStdVectorWatcherBase *arg1 = (cStdVectorWatcherBase *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cStdVectorWatcherBase **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = ((cStdVectorWatcherBase const *)arg1)->at(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cStdVectorWatcherBase_1getDescriptor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cStdVectorWatcherBase *arg1 = (cStdVectorWatcherBase *) 0 ;
  cClassDescriptor *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cStdVectorWatcherBase **)&jarg1; 
  {
    try {
      result = (cClassDescriptor *)(arg1)->getDescriptor();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cClassDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_delete_1cStdVectorWatcherBase(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cStdVectorWatcherBase *arg1 = (cStdVectorWatcherBase *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = *(cStdVectorWatcherBase **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cXMLElement(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  cXMLElement *arg3 = (cXMLElement *) 0 ;
  cXMLElement *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg3_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(cXMLElement **)&jarg3; 
  {
    try {
      result = (cXMLElement *)new cXMLElement((char const *)arg1,(char const *)arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cXMLElement **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cXMLElement_1setNodeValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  cXMLElement *arg1 = (cXMLElement *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cXMLElement **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (int)jarg3; 
  {
    try {
      (arg1)->setNodeValue((char const *)arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cXMLElement_1appendNodeValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  cXMLElement *arg1 = (cXMLElement *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cXMLElement **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (int)jarg3; 
  {
    try {
      (arg1)->appendNodeValue((char const *)arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_delete_1cXMLElement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cXMLElement *arg1 = (cXMLElement *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = *(cXMLElement **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cXMLElement_1setAttribute(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  cXMLElement *arg1 = (cXMLElement *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cXMLElement **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  {
    try {
      (arg1)->setAttribute((char const *)arg2,(char const *)arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cXMLElement_1appendChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  cXMLElement *arg1 = (cXMLElement *) 0 ;
  cXMLElement *arg2 = (cXMLElement *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cXMLElement **)&jarg1; 
  arg2 = *(cXMLElement **)&jarg2; 
  {
    try {
      (arg1)->appendChild(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cXMLElement_1insertChildBefore(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  cXMLElement *arg1 = (cXMLElement *) 0 ;
  cXMLElement *arg2 = (cXMLElement *) 0 ;
  cXMLElement *arg3 = (cXMLElement *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(cXMLElement **)&jarg1; 
  arg2 = *(cXMLElement **)&jarg2; 
  arg3 = *(cXMLElement **)&jarg3; 
  {
    try {
      (arg1)->insertChildBefore(arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cXMLElement_1removeChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cXMLElement *arg1 = (cXMLElement *) 0 ;
  cXMLElement *arg2 = (cXMLElement *) 0 ;
  cXMLElement *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cXMLElement **)&jarg1; 
  arg2 = *(cXMLElement **)&jarg2; 
  {
    try {
      result = (cXMLElement *)(arg1)->removeChild(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cXMLElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cXMLElement_1tostr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  cXMLElement *arg1 = (cXMLElement *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cXMLElement **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = ((cXMLElement const *)arg1)->tostr(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cXMLElement_1getTagName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cXMLElement *arg1 = (cXMLElement *) 0 ;
  char *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cXMLElement **)&jarg1; 
  {
    try {
      result = (char *)((cXMLElement const *)arg1)->getTagName();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cXMLElement_1getSourceLocation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cXMLElement *arg1 = (cXMLElement *) 0 ;
  char *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cXMLElement **)&jarg1; 
  {
    try {
      result = (char *)((cXMLElement const *)arg1)->getSourceLocation();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cXMLElement_1getNodeValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cXMLElement *arg1 = (cXMLElement *) 0 ;
  char *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cXMLElement **)&jarg1; 
  {
    try {
      result = (char *)((cXMLElement const *)arg1)->getNodeValue();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cXMLElement_1getAttribute(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  cXMLElement *arg1 = (cXMLElement *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cXMLElement **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (char *)((cXMLElement const *)arg1)->getAttribute((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cXMLElement_1hasAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cXMLElement *arg1 = (cXMLElement *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cXMLElement **)&jarg1; 
  {
    try {
      result = (bool)((cXMLElement const *)arg1)->hasAttributes();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cXMLElement_1getAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cXMLElement *arg1 = (cXMLElement *) 0 ;
  cXMLAttributeMap *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cXMLElement **)&jarg1; 
  {
    try {
      result = (cXMLAttributeMap *) &((cXMLElement const *)arg1)->getAttributes();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cXMLAttributeMap **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cXMLElement_1getParentNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cXMLElement *arg1 = (cXMLElement *) 0 ;
  cXMLElement *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cXMLElement **)&jarg1; 
  {
    try {
      result = (cXMLElement *)((cXMLElement const *)arg1)->getParentNode();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cXMLElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean Java_org_omnetpp_simkernel_SimkernelJNI_cXMLElement_1hasChildren(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cXMLElement *arg1 = (cXMLElement *) 0 ;
  bool result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cXMLElement **)&jarg1; 
  {
    try {
      result = (bool)((cXMLElement const *)arg1)->hasChildren();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cXMLElement_1getFirstChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cXMLElement *arg1 = (cXMLElement *) 0 ;
  cXMLElement *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cXMLElement **)&jarg1; 
  {
    try {
      result = (cXMLElement *)((cXMLElement const *)arg1)->getFirstChild();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cXMLElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cXMLElement_1getLastChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cXMLElement *arg1 = (cXMLElement *) 0 ;
  cXMLElement *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cXMLElement **)&jarg1; 
  {
    try {
      result = (cXMLElement *)((cXMLElement const *)arg1)->getLastChild();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cXMLElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cXMLElement_1getNextSibling(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cXMLElement *arg1 = (cXMLElement *) 0 ;
  cXMLElement *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cXMLElement **)&jarg1; 
  {
    try {
      result = (cXMLElement *)((cXMLElement const *)arg1)->getNextSibling();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cXMLElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cXMLElement_1getPreviousSibling(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cXMLElement *arg1 = (cXMLElement *) 0 ;
  cXMLElement *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cXMLElement **)&jarg1; 
  {
    try {
      result = (cXMLElement *)((cXMLElement const *)arg1)->getPreviousSibling();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cXMLElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cXMLElement_1getFirstChildWithTag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  cXMLElement *arg1 = (cXMLElement *) 0 ;
  char *arg2 = (char *) 0 ;
  cXMLElement *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cXMLElement **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (cXMLElement *)((cXMLElement const *)arg1)->getFirstChildWithTag((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cXMLElement **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cXMLElement_1getNextSiblingWithTag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  cXMLElement *arg1 = (cXMLElement *) 0 ;
  char *arg2 = (char *) 0 ;
  cXMLElement *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cXMLElement **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (cXMLElement *)((cXMLElement const *)arg1)->getNextSiblingWithTag((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cXMLElement **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cXMLElement_1getChildren(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cXMLElement *arg1 = (cXMLElement *) 0 ;
  cXMLElementList result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cXMLElement **)&jarg1; 
  {
    try {
      result = ((cXMLElement const *)arg1)->getChildren();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cXMLElementList **)&jresult = new cXMLElementList((const cXMLElementList &)result); 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cXMLElement_1getChildrenByTagName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  cXMLElement *arg1 = (cXMLElement *) 0 ;
  char *arg2 = (char *) 0 ;
  cXMLElementList result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cXMLElement **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = ((cXMLElement const *)arg1)->getChildrenByTagName((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cXMLElementList **)&jresult = new cXMLElementList((const cXMLElementList &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cXMLElement_1getElementsByTagName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  cXMLElement *arg1 = (cXMLElement *) 0 ;
  char *arg2 = (char *) 0 ;
  cXMLElementList result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cXMLElement **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = ((cXMLElement const *)arg1)->getElementsByTagName((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cXMLElementList **)&jresult = new cXMLElementList((const cXMLElementList &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cXMLElement_1getFirstChildWithAttribute_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  jlong jresult = 0 ;
  cXMLElement *arg1 = (cXMLElement *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  cXMLElement *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cXMLElement **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  {
    try {
      result = (cXMLElement *)((cXMLElement const *)arg1)->getFirstChildWithAttribute((char const *)arg2,(char const *)arg3,(char const *)arg4);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cXMLElement **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cXMLElement_1getFirstChildWithAttribute_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  cXMLElement *arg1 = (cXMLElement *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  cXMLElement *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cXMLElement **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  {
    try {
      result = (cXMLElement *)((cXMLElement const *)arg1)->getFirstChildWithAttribute((char const *)arg2,(char const *)arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cXMLElement **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cXMLElement_1getElementById(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  cXMLElement *arg1 = (cXMLElement *) 0 ;
  char *arg2 = (char *) 0 ;
  cXMLElement *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cXMLElement **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (cXMLElement *)((cXMLElement const *)arg1)->getElementById((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cXMLElement **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cXMLElement_1debugDump(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cXMLElement *arg1 = (cXMLElement *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cXMLElement **)&jarg1; 
  {
    try {
      ((cXMLElement const *)arg1)->debugDump();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cXMLElement_1detailedInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cXMLElement *arg1 = (cXMLElement *) 0 ;
  std::string result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cXMLElement **)&jarg1; 
  {
    try {
      result = ((cXMLElement const *)arg1)->detailedInfo();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_uniform_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jint jarg3) {
  jdouble jresult = 0 ;
  double arg1 ;
  double arg2 ;
  int arg3 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      result = (double)uniform(arg1,arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_uniform_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2) {
  jdouble jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      result = (double)uniform(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_uniform_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ;
  SimTime arg1 ;
  SimTime arg2 ;
  int arg3 ;
  SimTime *argp1 ;
  SimTime *argp2 ;
  SimTime result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(SimTime **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SimTime");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(SimTime **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SimTime");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (int)jarg3; 
  {
    try {
      result = uniform(arg1,arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(SimTime **)&jresult = new SimTime((const SimTime &)result); 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_uniform_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  SimTime arg1 ;
  SimTime arg2 ;
  SimTime *argp1 ;
  SimTime *argp2 ;
  SimTime result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(SimTime **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SimTime");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(SimTime **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SimTime");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = uniform(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(SimTime **)&jresult = new SimTime((const SimTime &)result); 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_exponential_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jdouble jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  double arg1 ;
  int arg2 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (double)exponential(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_exponential_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jdouble jresult = 0 ;
  double arg1 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = (double)jarg1; 
  {
    try {
      result = (double)exponential(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_exponential_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  SimTime arg1 ;
  int arg2 ;
  SimTime *argp1 ;
  SimTime result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  argp1 = *(SimTime **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SimTime");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = exponential(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(SimTime **)&jresult = new SimTime((const SimTime &)result); 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_exponential_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SimTime arg1 ;
  SimTime *argp1 ;
  SimTime result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  argp1 = *(SimTime **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SimTime");
    return 0;
  }
  arg1 = *argp1; 
  {
    try {
      result = exponential(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(SimTime **)&jresult = new SimTime((const SimTime &)result); 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_normal_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jint jarg3) {
  jdouble jresult = 0 ;
  double arg1 ;
  double arg2 ;
  int arg3 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      result = (double)normal(arg1,arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_normal_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2) {
  jdouble jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      result = (double)normal(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_normal_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ;
  SimTime arg1 ;
  SimTime arg2 ;
  int arg3 ;
  SimTime *argp1 ;
  SimTime *argp2 ;
  SimTime result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(SimTime **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SimTime");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(SimTime **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SimTime");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (int)jarg3; 
  {
    try {
      result = normal(arg1,arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(SimTime **)&jresult = new SimTime((const SimTime &)result); 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_normal_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  SimTime arg1 ;
  SimTime arg2 ;
  SimTime *argp1 ;
  SimTime *argp2 ;
  SimTime result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(SimTime **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SimTime");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(SimTime **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SimTime");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = normal(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(SimTime **)&jresult = new SimTime((const SimTime &)result); 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_truncnormal_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jint jarg3) {
  jdouble jresult = 0 ;
  double arg1 ;
  double arg2 ;
  int arg3 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      result = (double)truncnormal(arg1,arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_truncnormal_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2) {
  jdouble jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      result = (double)truncnormal(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_truncnormal_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ;
  SimTime arg1 ;
  SimTime arg2 ;
  int arg3 ;
  SimTime *argp1 ;
  SimTime *argp2 ;
  SimTime result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(SimTime **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SimTime");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(SimTime **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SimTime");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (int)jarg3; 
  {
    try {
      result = truncnormal(arg1,arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(SimTime **)&jresult = new SimTime((const SimTime &)result); 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_truncnormal_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  SimTime arg1 ;
  SimTime arg2 ;
  SimTime *argp1 ;
  SimTime *argp2 ;
  SimTime result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(SimTime **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SimTime");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(SimTime **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SimTime");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = truncnormal(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(SimTime **)&jresult = new SimTime((const SimTime &)result); 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_gamma_1d_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jint jarg3) {
  jdouble jresult = 0 ;
  double arg1 ;
  double arg2 ;
  int arg3 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      result = (double)gamma_d(arg1,arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_gamma_1d_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2) {
  jdouble jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      result = (double)gamma_d(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_beta_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jint jarg3) {
  jdouble jresult = 0 ;
  double arg1 ;
  double arg2 ;
  int arg3 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      result = (double)beta(arg1,arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_beta_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2) {
  jdouble jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      result = (double)beta(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_erlang_1k_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jint jarg3) {
  jdouble jresult = 0 ;
  unsigned int arg1 ;
  double arg2 ;
  int arg3 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      result = (double)erlang_k(arg1,arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_erlang_1k_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  jdouble jresult = 0 ;
  unsigned int arg1 ;
  double arg2 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      result = (double)erlang_k(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_chi_1square_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  unsigned int arg1 ;
  int arg2 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (double)chi_square(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_chi_1square_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  unsigned int arg1 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  {
    try {
      result = (double)chi_square(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_student_1t_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  unsigned int arg1 ;
  int arg2 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (double)student_t(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_student_1t_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  unsigned int arg1 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  {
    try {
      result = (double)student_t(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_cauchy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jint jarg3) {
  jdouble jresult = 0 ;
  double arg1 ;
  double arg2 ;
  int arg3 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      result = (double)cauchy(arg1,arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_cauchy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2) {
  jdouble jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      result = (double)cauchy(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_triang_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3, jint jarg4) {
  jdouble jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  int arg4 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (int)jarg4; 
  {
    try {
      result = (double)triang(arg1,arg2,arg3,arg4);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_triang_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3) {
  jdouble jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      result = (double)triang(arg1,arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_lognormal_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jint jarg3) {
  jdouble jresult = 0 ;
  double arg1 ;
  double arg2 ;
  int arg3 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      result = (double)lognormal(arg1,arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_lognormal_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2) {
  jdouble jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      result = (double)lognormal(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_weibull_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jint jarg3) {
  jdouble jresult = 0 ;
  double arg1 ;
  double arg2 ;
  int arg3 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      result = (double)weibull(arg1,arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_weibull_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2) {
  jdouble jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      result = (double)weibull(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_pareto_1shifted_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3, jint jarg4) {
  jdouble jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  int arg4 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (int)jarg4; 
  {
    try {
      result = (double)pareto_shifted(arg1,arg2,arg3,arg4);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_pareto_1shifted_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3) {
  jdouble jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      result = (double)pareto_shifted(arg1,arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_intuniform_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3) {
  jint jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      result = (int)intuniform(arg1,arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_intuniform_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jint jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (int)intuniform(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_bernoulli_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jdouble jarg1, jint jarg2) {
  jint jresult = 0 ;
  double arg1 ;
  int arg2 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (int)bernoulli(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_bernoulli_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jint jresult = 0 ;
  double arg1 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = (double)jarg1; 
  {
    try {
      result = (int)bernoulli(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_binomial_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jdouble jarg2, jint jarg3) {
  jint jresult = 0 ;
  int arg1 ;
  double arg2 ;
  int arg3 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      result = (int)binomial(arg1,arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_binomial_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jdouble jarg2) {
  jint jresult = 0 ;
  int arg1 ;
  double arg2 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      result = (int)binomial(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_geometric_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jdouble jarg1, jint jarg2) {
  jint jresult = 0 ;
  double arg1 ;
  int arg2 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (int)geometric(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_geometric_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jint jresult = 0 ;
  double arg1 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = (double)jarg1; 
  {
    try {
      result = (int)geometric(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_negbinomial_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jdouble jarg2, jint jarg3) {
  jint jresult = 0 ;
  int arg1 ;
  double arg2 ;
  int arg3 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      result = (int)negbinomial(arg1,arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_negbinomial_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jdouble jarg2) {
  jint jresult = 0 ;
  int arg1 ;
  double arg2 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      result = (int)negbinomial(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_poisson_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jdouble jarg1, jint jarg2) {
  jint jresult = 0 ;
  double arg1 ;
  int arg2 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (int)poisson(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_poisson_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jint jresult = 0 ;
  double arg1 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = (double)jarg1; 
  {
    try {
      result = (int)poisson(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_eOK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OppErrorCode result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      result = (OppErrorCode)eOK;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cErrorMessages(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cErrorMessages *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      result = (cErrorMessages *)new cErrorMessages();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cErrorMessages **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cErrorMessages_1get(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  OppErrorCode arg1 ;
  char *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = (OppErrorCode)jarg1; 
  {
    try {
      result = (char *)cErrorMessages::get(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_delete_1cErrorMessages(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cErrorMessages *arg1 = (cErrorMessages *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = *(cErrorMessages **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_resultFilters_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cGlobalRegistrationList *arg1 = (cGlobalRegistrationList *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cGlobalRegistrationList **)&jarg1; 
  resultFilters = *arg1;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_resultFilters_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cGlobalRegistrationList *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  result = (cGlobalRegistrationList *)&resultFilters;
  *(cGlobalRegistrationList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_resultRecorders_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cGlobalRegistrationList *arg1 = (cGlobalRegistrationList *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cGlobalRegistrationList **)&jarg1; 
  resultRecorders = *arg1;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_resultRecorders_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cGlobalRegistrationList *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  result = (cGlobalRegistrationList *)&resultRecorders;
  *(cGlobalRegistrationList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_messagePrinters_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cGlobalRegistrationList *arg1 = (cGlobalRegistrationList *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cGlobalRegistrationList **)&jarg1; 
  messagePrinters = *arg1;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_messagePrinters_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cGlobalRegistrationList *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  result = (cGlobalRegistrationList *)&messagePrinters;
  *(cGlobalRegistrationList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1CodeFragments(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  void (*arg1)() = (void (*)()) 0 ;
  CodeFragments::Type arg2 ;
  CodeFragments *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = *(void (**)())&jarg1; 
  arg2 = (CodeFragments::Type)jarg2; 
  {
    try {
      result = (CodeFragments *)new CodeFragments(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(CodeFragments **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_delete_1CodeFragments(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CodeFragments *arg1 = (CodeFragments *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = *(CodeFragments **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_CodeFragments_1executeAll(JNIEnv *jenv, jclass jcls, jint jarg1) {
  CodeFragments::Type arg1 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = (CodeFragments::Type)jarg1; 
  {
    try {
      CodeFragments::executeAll(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI__1_1contextModuleRNG(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  cRNG *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = (int)jarg1; 
  {
    try {
      result = (cRNG *)__contextModuleRNG(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cRNG **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_intrand(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  long arg1 ;
  long result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = (long)jarg1; 
  {
    try {
      result = (long)intrand(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_dblrand(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      result = (double)dblrand();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_genk_1intrand(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jint jresult = 0 ;
  int arg1 ;
  long arg2 ;
  long result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (long)jarg2; 
  {
    try {
      result = (long)genk_intrand(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble Java_org_omnetpp_simkernel_SimkernelJNI_genk_1dblrand(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jdouble jresult = 0 ;
  int arg1 ;
  double result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = (int)jarg1; 
  {
    try {
      result = (double)genk_dblrand(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cRegistrationList(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  cRegistrationList *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    try {
      result = (cRegistrationList *)new cRegistrationList((char const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cRegistrationList **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_delete_1cRegistrationList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cRegistrationList *arg1 = (cRegistrationList *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = *(cRegistrationList **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_cRegistrationList_1info(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cRegistrationList *arg1 = (cRegistrationList *) 0 ;
  std::string result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cRegistrationList **)&jarg1; 
  {
    try {
      result = ((cRegistrationList const *)arg1)->info();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cRegistrationList_1forEachChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  cRegistrationList *arg1 = (cRegistrationList *) 0 ;
  cVisitor *arg2 = (cVisitor *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cRegistrationList **)&jarg1; 
  arg2 = *(cVisitor **)&jarg2; 
  {
    try {
      (arg1)->forEachChild(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cRegistrationList_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  cRegistrationList *arg1 = (cRegistrationList *) 0 ;
  cOwnedObject *arg2 = (cOwnedObject *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(cRegistrationList **)&jarg1; 
  arg2 = *(cOwnedObject **)&jarg2; 
  {
    try {
      (arg1)->add(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_cRegistrationList_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cRegistrationList *arg1 = (cRegistrationList *) 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cRegistrationList **)&jarg1; 
  {
    try {
      result = (int)((cRegistrationList const *)arg1)->size();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cRegistrationList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  cRegistrationList *arg1 = (cRegistrationList *) 0 ;
  int arg2 ;
  cOwnedObject *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cRegistrationList **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (cOwnedObject *)((cRegistrationList const *)arg1)->get(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cOwnedObject **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cRegistrationList_1find(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  cRegistrationList *arg1 = (cRegistrationList *) 0 ;
  char *arg2 = (char *) 0 ;
  cOwnedObject *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cRegistrationList **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (cOwnedObject *)((cRegistrationList const *)arg1)->find((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cOwnedObject **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cRegistrationList_1lookup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  cRegistrationList *arg1 = (cRegistrationList *) 0 ;
  char *arg2 = (char *) 0 ;
  cOwnedObject *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cRegistrationList **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (cOwnedObject *)((cRegistrationList const *)arg1)->lookup((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cOwnedObject **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cRegistrationList_1sort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cRegistrationList *arg1 = (cRegistrationList *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cRegistrationList **)&jarg1; 
  {
    try {
      (arg1)->sort();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cGlobalRegistrationList_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cGlobalRegistrationList *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      result = (cGlobalRegistrationList *)new cGlobalRegistrationList();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cGlobalRegistrationList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cGlobalRegistrationList_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  cGlobalRegistrationList *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    try {
      result = (cGlobalRegistrationList *)new cGlobalRegistrationList((char const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cGlobalRegistrationList **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_delete_1cGlobalRegistrationList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cGlobalRegistrationList *arg1 = (cGlobalRegistrationList *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = *(cGlobalRegistrationList **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_cGlobalRegistrationList_1getInstance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cGlobalRegistrationList *arg1 = (cGlobalRegistrationList *) 0 ;
  cRegistrationList *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cGlobalRegistrationList **)&jarg1; 
  {
    try {
      result = (cRegistrationList *)(arg1)->getInstance();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cRegistrationList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cGlobalRegistrationList_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cGlobalRegistrationList *arg1 = (cGlobalRegistrationList *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cGlobalRegistrationList **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_Define_1Function_1macro(JNIEnv *jenv, jclass jcls) {
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      Define_Function_macro();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_CTX_1NONE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      result = (int)CTX_NONE;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_CTX_1BUILD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      result = (int)CTX_BUILD;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_CTX_1INITIALIZE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      result = (int)CTX_INITIALIZE;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_CTX_1EVENT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      result = (int)CTX_EVENT;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_CTX_1FINISH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      result = (int)CTX_FINISH;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_CTX_1CLEANUP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  {
    try {
      result = (int)CTX_CLEANUP;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_opp_1strlen(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    try {
      result = (int)opp_strlen((char const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_opp_1strdup_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jstring jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    try {
      result = (char *)opp_strdup((char const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_opp_1strcpy(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jstring jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (char *)opp_strcpy(arg1,(char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_opp_1strcmp(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (int)opp_strcmp((char const *)arg1,(char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_opp_1strprettytrunc(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jlong jarg3) {
  jstring jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  char *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (unsigned int)jarg3; 
  {
    try {
      result = (char *)opp_strprettytrunc(arg1,(char const *)arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_opp_1error_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  OppErrorCode arg1 ;
  void *arg2 = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = (OppErrorCode)jarg1; 
  {
    try {
      opp_error(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_opp_1error_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    try {
      opp_error((char const *)arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_opp_1warning_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  OppErrorCode arg1 ;
  void *arg2 = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = (OppErrorCode)jarg1; 
  {
    try {
      opp_warning(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_opp_1warning_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    try {
      opp_warning((char const *)arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_opp_1terminate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  OppErrorCode arg1 ;
  void *arg2 = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = (OppErrorCode)jarg1; 
  {
    try {
      opp_terminate(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_opp_1terminate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    try {
      opp_terminate((char const *)arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1cMethodCallContextSwitcher(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cComponent *arg1 = (cComponent *) 0 ;
  cMethodCallContextSwitcher *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cComponent **)&jarg1; 
  {
    try {
      result = (cMethodCallContextSwitcher *)new cMethodCallContextSwitcher((cComponent const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cMethodCallContextSwitcher **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_delete_1cMethodCallContextSwitcher(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cMethodCallContextSwitcher *arg1 = (cMethodCallContextSwitcher *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = *(cMethodCallContextSwitcher **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cMethodCallContextSwitcher_1methodCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  cMethodCallContextSwitcher *arg1 = (cMethodCallContextSwitcher *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMethodCallContextSwitcher **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    try {
      (arg1)->methodCall((char const *)arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cMethodCallContextSwitcher_1methodCallSilent_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  cMethodCallContextSwitcher *arg1 = (cMethodCallContextSwitcher *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMethodCallContextSwitcher **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    try {
      (arg1)->methodCallSilent((char const *)arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_cMethodCallContextSwitcher_1methodCallSilent_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  cMethodCallContextSwitcher *arg1 = (cMethodCallContextSwitcher *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMethodCallContextSwitcher **)&jarg1; 
  {
    try {
      (arg1)->methodCallSilent();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_opp_1strdup_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jstring jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  {
    try {
      result = (char *)opp_strdup((char const *)arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_opp_1appendindex(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  char *arg1 = (char *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  arg2 = (unsigned int)jarg2; 
  {
    try {
      opp_appendindex(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jint Java_org_omnetpp_simkernel_SimkernelJNI_double_1to_1long(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jint jresult = 0 ;
  double arg1 ;
  long result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = (double)jarg1; 
  {
    try {
      result = (long)double_to_long(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_double_1to_1str(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jstring jresult = 0 ;
  double arg1 ;
  std::string result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = (double)jarg1; 
  {
    try {
      result = double_to_str(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_delete_1JSimpleModule(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  JSimpleModule *arg1 = (JSimpleModule *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = *(JSimpleModule **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_JSimpleModule_1retrieveMsgToBeHandled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  JSimpleModule *arg1 = (JSimpleModule *) 0 ;
  cMessage *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(JSimpleModule **)&jarg1; 
  {
    try {
      result = (cMessage *)(arg1)->retrieveMsgToBeHandled();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cMessage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jobject Java_org_omnetpp_simkernel_SimkernelJNI_JSimpleModule_1swigJavaPeerOf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  cModule *arg1 = (cModule *) 0 ;
  jobject result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cModule **)&jarg1; 
  {
    try {
      result = JSimpleModule::swigJavaPeerOf(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_new_1JMessage(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int arg3 ;
  JMessage *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      result = (JMessage *)new JMessage((char const *)arg1,arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(JMessage **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_delete_1JMessage(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  JMessage *arg1 = (JMessage *) 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  arg1 = *(JMessage **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_JMessage_1dup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  JMessage *arg1 = (JMessage *) 0 ;
  cMessage *result = 0 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(JMessage **)&jarg1; 
  {
    try {
      result = (cMessage *)((JMessage const *)arg1)->dup();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  *(cMessage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_JMessage_1info(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  JMessage *arg1 = (JMessage *) 0 ;
  std::string result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(JMessage **)&jarg1; 
  {
    try {
      result = ((JMessage const *)arg1)->info();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring Java_org_omnetpp_simkernel_SimkernelJNI_JMessage_1detailedInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  JMessage *arg1 = (JMessage *) 0 ;
  std::string result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(JMessage **)&jarg1; 
  {
    try {
      result = ((JMessage const *)arg1)->detailedInfo();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void Java_org_omnetpp_simkernel_SimkernelJNI_JMessage_1swigSetJavaPeer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  JMessage *arg1 = (JMessage *) 0 ;
  jobject arg2 ;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(JMessage **)&jarg1; 
  arg2 = jarg2; 
  {
    try {
      (arg1)->swigSetJavaPeer(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return ;
    }
  }
}


SWIGEXPORT jobject Java_org_omnetpp_simkernel_SimkernelJNI_JMessage_1swigJavaPeerOf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  cMessage *arg1 = (cMessage *) 0 ;
  jobject result;
  
  (void)jenv; LOG_JNI_CALL();
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cMessage **)&jarg1; 
  {
    try {
      result = JMessage::swigJavaPeerOf(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, const_cast<char*>(e.what()));
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_SWIGcNamedObjectUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv; LOG_JNI_CALL();
    (void)jcls;
    *(cObject **)&baseptr = *(cNamedObject **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_SWIGcOwnedObjectUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv; LOG_JNI_CALL();
    (void)jcls;
    *(cNamedObject **)&baseptr = *(cOwnedObject **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_SWIGcNoncopyableOwnedObjectUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv; LOG_JNI_CALL();
    (void)jcls;
    *(cOwnedObject **)&baseptr = *(cNoncopyableOwnedObject **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_SWIGcDefaultListUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv; LOG_JNI_CALL();
    (void)jcls;
    *(cNoncopyableOwnedObject **)&baseptr = *(cDefaultList **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_SWIGcComponentUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv; LOG_JNI_CALL();
    (void)jcls;
    *(cDefaultList **)&baseptr = *(cComponent **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_SWIGcChannelUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv; LOG_JNI_CALL();
    (void)jcls;
    *(cComponent **)&baseptr = *(cChannel **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_SWIGcIdealChannelUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv; LOG_JNI_CALL();
    (void)jcls;
    *(cChannel **)&baseptr = *(cIdealChannel **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_SWIGcDelayChannelUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv; LOG_JNI_CALL();
    (void)jcls;
    *(cChannel **)&baseptr = *(cDelayChannel **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_SWIGcDatarateChannelUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv; LOG_JNI_CALL();
    (void)jcls;
    *(cChannel **)&baseptr = *(cDatarateChannel **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_SWIGcModuleUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv; LOG_JNI_CALL();
    (void)jcls;
    *(cComponent **)&baseptr = *(cModule **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_SWIGcSimpleModuleUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv; LOG_JNI_CALL();
    (void)jcls;
    *(cModule **)&baseptr = *(cSimpleModule **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_SWIGcComponentTypeUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv; LOG_JNI_CALL();
    (void)jcls;
    *(cNoncopyableOwnedObject **)&baseptr = *(cComponentType **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_SWIGcModuleTypeUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv; LOG_JNI_CALL();
    (void)jcls;
    *(cComponentType **)&baseptr = *(cModuleType **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_SWIGcChannelTypeUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv; LOG_JNI_CALL();
    (void)jcls;
    *(cComponentType **)&baseptr = *(cChannelType **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_SWIGcArrayUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv; LOG_JNI_CALL();
    (void)jcls;
    *(cOwnedObject **)&baseptr = *(cArray **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_SWIGcQueueUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv; LOG_JNI_CALL();
    (void)jcls;
    *(cOwnedObject **)&baseptr = *(cQueue **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_SWIGcStatisticUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv; LOG_JNI_CALL();
    (void)jcls;
    *(cOwnedObject **)&baseptr = *(cStatistic **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_SWIGcStdDevUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv; LOG_JNI_CALL();
    (void)jcls;
    *(cStatistic **)&baseptr = *(cStdDev **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_SWIGcWeightedStdDevUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv; LOG_JNI_CALL();
    (void)jcls;
    *(cStdDev **)&baseptr = *(cWeightedStdDev **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_SWIGcDensityEstBaseUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv; LOG_JNI_CALL();
    (void)jcls;
    *(cStdDev **)&baseptr = *(cDensityEstBase **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_SWIGcHistogramBaseUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv; LOG_JNI_CALL();
    (void)jcls;
    *(cDensityEstBase **)&baseptr = *(cHistogramBase **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_SWIGcHistogramUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv; LOG_JNI_CALL();
    (void)jcls;
    *(cHistogramBase **)&baseptr = *(cHistogram **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_SWIGcLongHistogramUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv; LOG_JNI_CALL();
    (void)jcls;
    *(cHistogram **)&baseptr = *(cLongHistogram **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_SWIGcDoubleHistogramUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv; LOG_JNI_CALL();
    (void)jcls;
    *(cHistogram **)&baseptr = *(cDoubleHistogram **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_SWIGcPSquareUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv; LOG_JNI_CALL();
    (void)jcls;
    *(cDensityEstBase **)&baseptr = *(cPSquare **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_SWIGcVarHistogramUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv; LOG_JNI_CALL();
    (void)jcls;
    *(cHistogramBase **)&baseptr = *(cVarHistogram **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_SWIGcRNGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv; LOG_JNI_CALL();
    (void)jcls;
    *(cObject **)&baseptr = *(cRNG **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_SWIGcObjectFactoryUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv; LOG_JNI_CALL();
    (void)jcls;
    *(cNoncopyableOwnedObject **)&baseptr = *(cObjectFactory **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_SWIGcEnumUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv; LOG_JNI_CALL();
    (void)jcls;
    *(cOwnedObject **)&baseptr = *(cEnum **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_SWIGcRuntimeErrorUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv; LOG_JNI_CALL();
    (void)jcls;
    *(cException **)&baseptr = *(cRuntimeError **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_SWIGcDeleteModuleExceptionUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv; LOG_JNI_CALL();
    (void)jcls;
    *(cException **)&baseptr = *(cDeleteModuleException **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_SWIGcExpressionUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv; LOG_JNI_CALL();
    (void)jcls;
    *(cObject **)&baseptr = *(cExpression **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_SWIGcFSMUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv; LOG_JNI_CALL();
    (void)jcls;
    *(cOwnedObject **)&baseptr = *(cFSM **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_SWIGcGateUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv; LOG_JNI_CALL();
    (void)jcls;
    *(cObject **)&baseptr = *(cGate **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_SWIGcMessageUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv; LOG_JNI_CALL();
    (void)jcls;
    *(cOwnedObject **)&baseptr = *(cMessage **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_SWIGcPacketUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv; LOG_JNI_CALL();
    (void)jcls;
    *(cMessage **)&baseptr = *(cPacket **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_SWIGcMsgParUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv; LOG_JNI_CALL();
    (void)jcls;
    *(cOwnedObject **)&baseptr = *(cMsgPar **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_SWIGcMessageHeapUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv; LOG_JNI_CALL();
    (void)jcls;
    *(cOwnedObject **)&baseptr = *(cMessageHeap **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_SWIGcOutVectorUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv; LOG_JNI_CALL();
    (void)jcls;
    *(cNoncopyableOwnedObject **)&baseptr = *(cOutVector **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_SWIGcParUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv; LOG_JNI_CALL();
    (void)jcls;
    *(cObject **)&baseptr = *(cPar **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_SWIGcPropertyUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv; LOG_JNI_CALL();
    (void)jcls;
    *(cNamedObject **)&baseptr = *(cProperty **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_SWIGcPropertiesUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv; LOG_JNI_CALL();
    (void)jcls;
    *(cObject **)&baseptr = *(cProperties **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_SWIGcSimulationUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv; LOG_JNI_CALL();
    (void)jcls;
    *(cNamedObject **)&baseptr = *(cSimulation **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_SWIGcClassDescriptorUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv; LOG_JNI_CALL();
    (void)jcls;
    *(cNoncopyableOwnedObject **)&baseptr = *(cClassDescriptor **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_SWIGcRegistrationListUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv; LOG_JNI_CALL();
    (void)jcls;
    *(cNamedObject **)&baseptr = *(cRegistrationList **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_SWIGJSimpleModuleUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv; LOG_JNI_CALL();
    (void)jcls;
    *(cSimpleModule **)&baseptr = *(JSimpleModule **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong Java_org_omnetpp_simkernel_SimkernelJNI_SWIGJMessageUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv; LOG_JNI_CALL();
    (void)jcls;
    *(cMessage **)&baseptr = *(JMessage **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

