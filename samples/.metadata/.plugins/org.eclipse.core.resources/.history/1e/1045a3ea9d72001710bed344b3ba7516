[General]
cmdenv-express-mode = true
cmdenv-module-messages = true
num-rngs = 4096
network = EPON
print-undisposed = false 
#sim-time-limit = 0.01s #for testing
sim-time-limit = 11s #11s 
#warmup-period = 0s
#simtime-scale = -6 no output  #-11 for 25G
simtime-scale = -12
#seed-set = ${repetition}
#seed-set = ${runnumber}
seed-set = 60

#**.max_rate = 1000 * 1000 * 1000 # 100 Mbps #1Gbps
**.max_rate = 1000 * 1000 * 1000 * 10 # 100 Mbps #10Gbps
**.trafficPoisson = false #true=Poisson false=selfSimilar
**.down_data_rate = 0.4*pow(10,-10) #pow(10-9) = EPON #pow(10-10) = 10G-EPON  
**.up_data_rate = 0.4*pow(10,-10)    #pow(10-9) = EPON #pow(10-10) = 10G-EPON

#self similar

#**.pareto_rate = 1000 * 1000 * 1000
**.pareto_rate = 1000 * 1000 * 1000 * 10
**.pareto_alpha_on = 1.4  #1.4
**.pareto_alpha_off = 1.2 #1.2
**.pareto_beta_on = 1

#deprecated
EPON.awakeSize = 0 #deprecated # pkt 
EPON.minCrdLen = 0*1518 #deprecated # For credit based, increase the chance of ONU reporting 0 while only a few pkt (one pkt size 1518byte) arrived 0*1518/1*1518/2*1518

#general settings
EPON.sizeOfONU = 32 #16/32/64/128/256
EPON.queueLimit = 1000 * 1000 * 1000 * 1000 	# 100Mbit  #iGbit
EPON.distance = 20 # 20km/100km
EPON.delayBound = 0*pow(10,-3) # 0ms=no delay just arrived 0/100/200 ms
EPON.maxESTimer = 999*pow(10,-3) #998*pow(10,-3) -> EPON  #999*pow(10,-3) ->10G-EPON  #998*pow(10,-3)->1000ms/498->500ms/98->100ms/48->50ms
EPON.creditBased = false #For credit based, if true: using credit based, if flase: giving current request lenght only grantSize=reqSize
EPON.winSize = 10 #If using credit based, actual window size set here, its max size 100 is defined in DBA.h
EPON.setMTW = 0 #If using credit based, setMTW 1 gives credit MTW while the setting credit ratio is ignore
EPON.creditRatio = 0.0 #If using credit based, grantSize =reqSize+avgArvRate*waitTime*(1+creditRatio) 

#dynamic
EPON.dynamicPoint = 20   #ratio in EPON, 20/100; ratio in 10G-EPON, 20/1000
EPON.dyRatio = 1   # compute the network loading. #loading = dyRatio*this_cycle + (1-dyRatio)*loading
#EPON.downThreshold = 600
#EPON.upThreshold = 10
EPON.downThreshold = 600000
EPON.upThreshold = 6000
EPON.multiMTW = 1
EPON.MTW_algo = false
EPON.high_priority_must_empty = true
EPON.asymmetric_flow = false # let ONU gets asymmetric flow
EPON.multiple_of_flow = 3 # heavy node get how many multiples loading // no use currently
EPON.randomChannelAssign = true 
EPON.tuningTime = 0.0001 

#[Config IPACT]
EPON.version = 1	# Larry=0  # My = 1
EPON.algo = 1       # Insert=0 # Append=1
EPON.modes = 4 		# dual= 2 tri=3 dynamic(2+3)=4

# down
EPON.trafficGen[*].high_priority_ratio = 0.2
# up
EPON.localNetwork[*].high_priority_ratio = 0.2 #0.1/0.5 ; has bug if set 0

#  down
#EPON.trafficGen[*].offered_load = 1 * ${load = 0.35..0.375 step 0.025}
#EPON.trafficGen[*].offered_load = 1 * 0.2
EPON.trafficGen[*].offered_load = 1 * ${load = 0.05..0.4 step 0.05}
#EPON.trafficGen[*].offered_load = 1 * ${load = 0.35..0.4 step 0.05}
#  up
EPON.localNetwork[*].offered_load = 0.01 #0.1 # 0.1 In higher up loading, in credit based , ONU has higher chance to use the extra BW. 

# down
#this make Gen generate more data ( correspond to offered_load )  
#pow(10-8) = EPON #pow(10-9) = 10G-EPON
EPON.trafficGen[*].rate = pow(10,-10) #means one onu can generate 10G in maximun
# up
#EPON.localNetwork[*].rate = 0.4*pow(10,-10) #this is 25G  
#pow(10-8) = EPON #pow(10-9) = 10G-EPON
EPON.localNetwork[*].rate = pow(10,-10)

