<?xml version='1.0' encoding='ISO-8859-1' standalone='yes' ?>
<tagfile>
  <compound kind="page">
    <name>main</name>
    <title>OMNeT++ API Reference</title>
    <filename>main</filename>
  </compound>
  <compound kind="page">
    <name>APIChanges</name>
    <title>API Changes</title>
    <filename>APIChanges</filename>
  </compound>
  <compound kind="group">
    <name>MacrosFSM</name>
    <title>Final State Machine macros</title>
    <filename>group__MacrosFSM.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>FSM_MAXT</name>
      <anchorfile>group__MacrosFSM.html</anchorfile>
      <anchor>ga0cb33efc256dd2747fc91e417ea2c7df</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FSM_Switch</name>
      <anchorfile>group__MacrosFSM.html</anchorfile>
      <anchor>ga08ffc02054cc56d5ae887e25e37ac093</anchor>
      <arglist>(fsm)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FSM_Transient</name>
      <anchorfile>group__MacrosFSM.html</anchorfile>
      <anchor>ga2e4d1135cb16386ee24ce0f9849f6cb9</anchor>
      <arglist>(state)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FSM_Steady</name>
      <anchorfile>group__MacrosFSM.html</anchorfile>
      <anchor>ga9385a59dfb596e8b7d2c34159e869864</anchor>
      <arglist>(state)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FSM_EnterExit</name>
      <anchorfile>group__MacrosFSM.html</anchorfile>
      <anchor>ga5f0a5349b23bf4e1d88a7b013eccf5e9</anchor>
      <arglist>(state)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FSM_Enter</name>
      <anchorfile>group__MacrosFSM.html</anchorfile>
      <anchor>gacd1d3c4cda20ca24b7646b8d3e781fe7</anchor>
      <arglist>(state)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FSM_Exit</name>
      <anchorfile>group__MacrosFSM.html</anchorfile>
      <anchor>ga55cb30df1ef8c18dca7fc7020fff502f</anchor>
      <arglist>(state)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FSM_Goto</name>
      <anchorfile>group__MacrosFSM.html</anchorfile>
      <anchor>ga17ea3757b840dd122f2b03c53526d8a6</anchor>
      <arglist>(fsm, state)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>MacrosWatch</name>
    <title>WATCH macros</title>
    <filename>group__MacrosWatch.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>WATCH_VECTOR</name>
      <anchorfile>group__MacrosWatch.html</anchorfile>
      <anchor>gab149d308c85e2b71912bea91fed06efb</anchor>
      <arglist>(variable)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>WATCH_PTRVECTOR</name>
      <anchorfile>group__MacrosWatch.html</anchorfile>
      <anchor>gae489c6bbc2e19af741e61977d4f03aa7</anchor>
      <arglist>(variable)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>WATCH_LIST</name>
      <anchorfile>group__MacrosWatch.html</anchorfile>
      <anchor>ga9e5f0695d9c87d115f5eeae31e2080f9</anchor>
      <arglist>(variable)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>WATCH_PTRLIST</name>
      <anchorfile>group__MacrosWatch.html</anchorfile>
      <anchor>ga99980c7f45c4c39ccbf34b8e6d1241f1</anchor>
      <arglist>(variable)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>WATCH_SET</name>
      <anchorfile>group__MacrosWatch.html</anchorfile>
      <anchor>ga4a79ddd0849547eef079bc04ed0bc0f6</anchor>
      <arglist>(variable)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>WATCH_PTRSET</name>
      <anchorfile>group__MacrosWatch.html</anchorfile>
      <anchor>ga65b103b5094f32ec5bec17a06b1001ae</anchor>
      <arglist>(variable)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>WATCH_MAP</name>
      <anchorfile>group__MacrosWatch.html</anchorfile>
      <anchor>ga5bf6a9be5b3cb2838b9678a8d4fb9b30</anchor>
      <arglist>(m)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>WATCH_PTRMAP</name>
      <anchorfile>group__MacrosWatch.html</anchorfile>
      <anchor>ga0e5d96031a1621da03da1d0032d0123a</anchor>
      <arglist>(m)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>WATCH</name>
      <anchorfile>group__MacrosWatch.html</anchorfile>
      <anchor>ga0878b62c3a2dcb0388c967a4acb2f18a</anchor>
      <arglist>(variable)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>WATCH_RW</name>
      <anchorfile>group__MacrosWatch.html</anchorfile>
      <anchor>ga3f13d05484bd1eb370c51dbd176688b2</anchor>
      <arglist>(variable)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>WATCH_OBJ</name>
      <anchorfile>group__MacrosWatch.html</anchorfile>
      <anchor>ga9546e1fef910bea22f9bc3172bb24743</anchor>
      <arglist>(variable)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>WATCH_PTR</name>
      <anchorfile>group__MacrosWatch.html</anchorfile>
      <anchor>ga36540d0cfbab96aa1cd3b571f4d7aeb6</anchor>
      <arglist>(variable)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>RandomNumbersCont</name>
    <title>Continuous distributions</title>
    <filename>group__RandomNumbersCont.html</filename>
    <member kind="function">
      <type>SIM_API double</type>
      <name>uniform</name>
      <anchorfile>group__RandomNumbersCont.html</anchorfile>
      <anchor>ga4a63082fca94b8abf6d6164aea972a0f</anchor>
      <arglist>(double a, double b, int rng=0)</arglist>
    </member>
    <member kind="function">
      <type>SimTime</type>
      <name>uniform</name>
      <anchorfile>group__RandomNumbersCont.html</anchorfile>
      <anchor>ga15545a7b7c68fb5a1af7dab00a60df7f</anchor>
      <arglist>(SimTime a, SimTime b, int rng=0)</arglist>
    </member>
    <member kind="function">
      <type>SIM_API double</type>
      <name>exponential</name>
      <anchorfile>group__RandomNumbersCont.html</anchorfile>
      <anchor>ga1f77033d9815fe55a847f5aefdbbb1a7</anchor>
      <arglist>(double mean, int rng=0)</arglist>
    </member>
    <member kind="function">
      <type>SimTime</type>
      <name>exponential</name>
      <anchorfile>group__RandomNumbersCont.html</anchorfile>
      <anchor>ga701fef6e251f21b1d364bc955ec73cd5</anchor>
      <arglist>(SimTime mean, int rng=0)</arglist>
    </member>
    <member kind="function">
      <type>SIM_API double</type>
      <name>normal</name>
      <anchorfile>group__RandomNumbersCont.html</anchorfile>
      <anchor>ga339847dfd140ff80d07a5f81aae9dcef</anchor>
      <arglist>(double mean, double stddev, int rng=0)</arglist>
    </member>
    <member kind="function">
      <type>SimTime</type>
      <name>normal</name>
      <anchorfile>group__RandomNumbersCont.html</anchorfile>
      <anchor>ga4df419af4a3525abb0dbf12c80189dd4</anchor>
      <arglist>(SimTime mean, SimTime stddev, int rng=0)</arglist>
    </member>
    <member kind="function">
      <type>SIM_API double</type>
      <name>truncnormal</name>
      <anchorfile>group__RandomNumbersCont.html</anchorfile>
      <anchor>ga80b20109dbe65191c8404c58cef90917</anchor>
      <arglist>(double mean, double stddev, int rng=0)</arglist>
    </member>
    <member kind="function">
      <type>SimTime</type>
      <name>truncnormal</name>
      <anchorfile>group__RandomNumbersCont.html</anchorfile>
      <anchor>gae59607f50d297c0f8ce72b833c343c50</anchor>
      <arglist>(SimTime mean, SimTime stddev, int rng=0)</arglist>
    </member>
    <member kind="function">
      <type>SIM_API double</type>
      <name>gamma_d</name>
      <anchorfile>group__RandomNumbersCont.html</anchorfile>
      <anchor>gacec17872dcfa3818ec561952508bd238</anchor>
      <arglist>(double alpha, double theta, int rng=0)</arglist>
    </member>
    <member kind="function">
      <type>SIM_API double</type>
      <name>beta</name>
      <anchorfile>group__RandomNumbersCont.html</anchorfile>
      <anchor>ga6b74765a4925076830a9b6d9d7773b14</anchor>
      <arglist>(double alpha1, double alpha2, int rng=0)</arglist>
    </member>
    <member kind="function">
      <type>SIM_API double</type>
      <name>erlang_k</name>
      <anchorfile>group__RandomNumbersCont.html</anchorfile>
      <anchor>ga1cd45ae178452f587400f12504921531</anchor>
      <arglist>(unsigned int k, double mean, int rng=0)</arglist>
    </member>
    <member kind="function">
      <type>SIM_API double</type>
      <name>chi_square</name>
      <anchorfile>group__RandomNumbersCont.html</anchorfile>
      <anchor>ga062a4433201160a92078339e7b67cef9</anchor>
      <arglist>(unsigned int k, int rng=0)</arglist>
    </member>
    <member kind="function">
      <type>SIM_API double</type>
      <name>student_t</name>
      <anchorfile>group__RandomNumbersCont.html</anchorfile>
      <anchor>ga40ffc6d70ae53a1e0c8fa180ea896fc7</anchor>
      <arglist>(unsigned int i, int rng=0)</arglist>
    </member>
    <member kind="function">
      <type>SIM_API double</type>
      <name>cauchy</name>
      <anchorfile>group__RandomNumbersCont.html</anchorfile>
      <anchor>ga3993349b4903bcd3940facc8eb3c3289</anchor>
      <arglist>(double a, double b, int rng=0)</arglist>
    </member>
    <member kind="function">
      <type>SIM_API double</type>
      <name>triang</name>
      <anchorfile>group__RandomNumbersCont.html</anchorfile>
      <anchor>ga420c4783712a2f1742e3c3e240810f64</anchor>
      <arglist>(double a, double b, double c, int rng=0)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>lognormal</name>
      <anchorfile>group__RandomNumbersCont.html</anchorfile>
      <anchor>ga680d31a423f6e1a96d468d22dbadf42c</anchor>
      <arglist>(double m, double w, int rng=0)</arglist>
    </member>
    <member kind="function">
      <type>SIM_API double</type>
      <name>weibull</name>
      <anchorfile>group__RandomNumbersCont.html</anchorfile>
      <anchor>gacd8b973129e9dbf2936d3aed65eb00d3</anchor>
      <arglist>(double a, double b, int rng=0)</arglist>
    </member>
    <member kind="function">
      <type>SIM_API double</type>
      <name>pareto_shifted</name>
      <anchorfile>group__RandomNumbersCont.html</anchorfile>
      <anchor>gacd24b1b115e588575bd4da594b8581fe</anchor>
      <arglist>(double a, double b, double c, int rng=0)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>RandomNumbersDiscr</name>
    <title>Discrete distributions</title>
    <filename>group__RandomNumbersDiscr.html</filename>
    <member kind="function">
      <type>SIM_API int</type>
      <name>intuniform</name>
      <anchorfile>group__RandomNumbersDiscr.html</anchorfile>
      <anchor>gaee8ce6ae7e43b06e968a023f25c91b4f</anchor>
      <arglist>(int a, int b, int rng=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>bernoulli</name>
      <anchorfile>group__RandomNumbersDiscr.html</anchorfile>
      <anchor>gadc74bbd9ad42c4ae6c66759c9eb38e4e</anchor>
      <arglist>(double p, int rng=0)</arglist>
    </member>
    <member kind="function">
      <type>SIM_API int</type>
      <name>binomial</name>
      <anchorfile>group__RandomNumbersDiscr.html</anchorfile>
      <anchor>gab463f5b0e53075285380074c571c0e42</anchor>
      <arglist>(int n, double p, int rng=0)</arglist>
    </member>
    <member kind="function">
      <type>SIM_API int</type>
      <name>geometric</name>
      <anchorfile>group__RandomNumbersDiscr.html</anchorfile>
      <anchor>ga3fe7f3d0632097a2af6eb977c4b7f293</anchor>
      <arglist>(double p, int rng=0)</arglist>
    </member>
    <member kind="function">
      <type>SIM_API int</type>
      <name>negbinomial</name>
      <anchorfile>group__RandomNumbersDiscr.html</anchorfile>
      <anchor>gaea474d332471724499075443debb9d50</anchor>
      <arglist>(int n, double p, int rng=0)</arglist>
    </member>
    <member kind="function">
      <type>SIM_API int</type>
      <name>poisson</name>
      <anchorfile>group__RandomNumbersDiscr.html</anchorfile>
      <anchor>ga6061702ca848fec5a5878941b3afa01c</anchor>
      <arglist>(double lambda, int rng=0)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>SimCore</name>
    <title>Simulation core classes</title>
    <filename>group__SimCore.html</filename>
    <class kind="class">cChannel</class>
    <class kind="class">cIdealChannel</class>
    <class kind="class">cComponent</class>
    <class kind="class">cDatarateChannel</class>
    <class kind="class">cDelayChannel</class>
    <class kind="class">cDynamicExpression</class>
    <class kind="class">cExpression</class>
    <class kind="class">cGate</class>
    <class kind="class">cMessage</class>
    <class kind="class">cPacket</class>
    <class kind="class">cModelChangeNotification</class>
    <class kind="class">cModule</class>
    <class kind="class">cMsgPar</class>
    <class kind="class">cNamedObject</class>
    <class kind="class">cObject</class>
    <class kind="class">cOwnedObject</class>
    <class kind="class">cNoncopyableOwnedObject</class>
    <class kind="class">cPar</class>
    <class kind="class">cSimpleModule</class>
    <class kind="class">cSimulation</class>
    <class kind="class">cVisitor</class>
    <member kind="define">
      <type>#define</type>
      <name>simulation</name>
      <anchorfile>group__SimCore.html</anchorfile>
      <anchor>ga148138ad1231c2fb67ee5cd1e56ce3ad</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>Containers</name>
    <title>Container classes</title>
    <filename>group__Containers.html</filename>
    <class kind="class">cArray</class>
    <class kind="class">cLinkedList</class>
    <class kind="class">cPacketQueue</class>
    <class kind="class">cQueue</class>
  </compound>
  <compound kind="group">
    <name>RandomNumbers</name>
    <title>Random number generation</title>
    <filename>group__RandomNumbers.html</filename>
    <class kind="class">cRNG</class>
    <subgroup>RandomNumbersCont</subgroup>
    <subgroup>RandomNumbersDiscr</subgroup>
    <subgroup>RandomNumbersGen</subgroup>
  </compound>
  <compound kind="group">
    <name>Statistics</name>
    <title>Statistical data collection</title>
    <filename>group__Statistics.html</filename>
    <class kind="class">cDensityEstBase</class>
    <class kind="class">cTransientDetection</class>
    <class kind="class">cAccuracyDetection</class>
    <class kind="class">cTDExpandingWindows</class>
    <class kind="class">cADByStddev</class>
    <class kind="class">cHistogramBase</class>
    <class kind="class">cHistogram</class>
    <class kind="class">cLongHistogram</class>
    <class kind="class">cDoubleHistogram</class>
    <class kind="class">cKSplit</class>
    <class kind="class">cOutVector</class>
    <class kind="class">cPSquare</class>
    <class kind="class">cStatistic</class>
    <class kind="class">cStdDev</class>
    <class kind="class">cWeightedStdDev</class>
    <class kind="class">cVarHistogram</class>
  </compound>
  <compound kind="group">
    <name>SimSupport</name>
    <title>Utility classes</title>
    <filename>group__SimSupport.html</filename>
    <class kind="class">cDisplayString</class>
    <class kind="class">cException</class>
    <class kind="class">cFSM</class>
    <class kind="class">cStringTokenizer</class>
    <class kind="class">cTopology</class>
    <class kind="class">cVisitor</class>
    <class kind="class">cXMLElement</class>
  </compound>
  <compound kind="group">
    <name>Envir</name>
    <title>User interface: cEnvir and ev</title>
    <filename>group__Envir.html</filename>
    <class kind="class">cEnvir</class>
    <class kind="class">cRunnableEnvir</class>
    <class kind="class">cNullEnvir</class>
    <member kind="define">
      <type>#define</type>
      <name>ev</name>
      <anchorfile>group__Envir.html</anchorfile>
      <anchor>gad68b7777ea70ef452e0aadb4ea2df455</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EV</name>
      <anchorfile>group__Envir.html</anchorfile>
      <anchor>ga650ef3eff8a2900bef69dae29c05d2dd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>EnumsTypes</name>
    <title>Enums, types, function typedefs</title>
    <filename>group__EnumsTypes.html</filename>
    <class kind="class">cNEDValue</class>
    <member kind="typedef">
      <type>void(*</type>
      <name>CoroutineFnp</name>
      <anchorfile>group__EnumsTypes.html</anchorfile>
      <anchor>ga5082fb55ece1f2bcc5f8c363940fdd51</anchor>
      <arglist>)(void *)</arglist>
    </member>
    <member kind="typedef">
      <type>void(*</type>
      <name>PostTDFunc</name>
      <anchorfile>group__EnumsTypes.html</anchorfile>
      <anchor>ga1911cf4a98767faf7f10f04113491294</anchor>
      <arglist>)(cTransientDetection *, void *)</arglist>
    </member>
    <member kind="typedef">
      <type>void(*</type>
      <name>PostADFunc</name>
      <anchorfile>group__EnumsTypes.html</anchorfile>
      <anchor>ga47ba470d5316b4490141319a7f7d9d45</anchor>
      <arglist>)(cAccuracyDetection *, void *)</arglist>
    </member>
    <member kind="typedef">
      <type>int(*</type>
      <name>CritFunc</name>
      <anchorfile>group__EnumsTypes.html</anchorfile>
      <anchor>ga253ef95979a4524c9c19e1b477215ce5</anchor>
      <arglist>)(const cKSplit &amp;, cKSplit::Grid &amp;, int, double *)</arglist>
    </member>
    <member kind="typedef">
      <type>double(*</type>
      <name>DivFunc</name>
      <anchorfile>group__EnumsTypes.html</anchorfile>
      <anchor>gade5c525991f38f272681b30cf390d940</anchor>
      <arglist>)(const cKSplit &amp;, cKSplit::Grid &amp;, double, double *)</arglist>
    </member>
    <member kind="typedef">
      <type>double(*</type>
      <name>MathFuncNoArg</name>
      <anchorfile>group__EnumsTypes.html</anchorfile>
      <anchor>ga34fb283ee632e346870a8baca410c7dc</anchor>
      <arglist>)()</arglist>
    </member>
    <member kind="typedef">
      <type>double(*</type>
      <name>MathFunc1Arg</name>
      <anchorfile>group__EnumsTypes.html</anchorfile>
      <anchor>ga3279cd74e9efb4bfc039c473e12219ac</anchor>
      <arglist>)(double)</arglist>
    </member>
    <member kind="typedef">
      <type>double(*</type>
      <name>MathFunc2Args</name>
      <anchorfile>group__EnumsTypes.html</anchorfile>
      <anchor>gaa7906ba126493cedf17f179e0f17d51e</anchor>
      <arglist>)(double, double)</arglist>
    </member>
    <member kind="typedef">
      <type>double(*</type>
      <name>MathFunc3Args</name>
      <anchorfile>group__EnumsTypes.html</anchorfile>
      <anchor>ga17b34e3481c3b3109f62e0be61987b8e</anchor>
      <arglist>)(double, double, double)</arglist>
    </member>
    <member kind="typedef">
      <type>double(*</type>
      <name>MathFunc4Args</name>
      <anchorfile>group__EnumsTypes.html</anchorfile>
      <anchor>gad3926f4c5f03adcd8711aba50ebf92e3</anchor>
      <arglist>)(double, double, double, double)</arglist>
    </member>
    <member kind="typedef">
      <type>void(*</type>
      <name>VoidDelFunc</name>
      <anchorfile>group__EnumsTypes.html</anchorfile>
      <anchor>ga4b8f31d53f8936a0c556ceece17a058f</anchor>
      <arglist>)(void *)</arglist>
    </member>
    <member kind="typedef">
      <type>void *(*</type>
      <name>VoidDupFunc</name>
      <anchorfile>group__EnumsTypes.html</anchorfile>
      <anchor>ga0f99009fbbd87108d6c0679188d7730a</anchor>
      <arglist>)(void *)</arglist>
    </member>
    <member kind="variable">
      <type>NAMESPACE_BEGIN typedef cNEDValue(*</type>
      <name>NEDFunction</name>
      <anchorfile>group__EnumsTypes.html</anchorfile>
      <anchor>ga863e3ae302e9cdbe18b4d67d2d9bcdf1</anchor>
      <arglist>)(cComponent *context, cNEDValue argv[], int argc)</arglist>
    </member>
    <member kind="variable">
      <type>NAMESPACE_BEGIN typedef double(*</type>
      <name>MathFunc</name>
      <anchorfile>group__EnumsTypes.html</anchorfile>
      <anchor>ga231c2ca7a2641286ea185942e2f5317c</anchor>
      <arglist>)(...)</arglist>
    </member>
    <member kind="variable">
      <type>NAMESPACE_BEGIN typedef void(*</type>
      <name>RecordFunc</name>
      <anchorfile>group__EnumsTypes.html</anchorfile>
      <anchor>ga7d4cb9b40bf408088eee2d9b42fb9e73</anchor>
      <arglist>)(void *, simtime_t, double, double)</arglist>
    </member>
    <member kind="variable">
      <type>NAMESPACE_BEGIN typedef int(*</type>
      <name>CompareFunc</name>
      <anchorfile>group__EnumsTypes.html</anchorfile>
      <anchor>ga88ff9824df66a8f560302bdfdd90dc8a</anchor>
      <arglist>)(cObject *a, cObject *b)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>Functions</name>
    <title>Functions</title>
    <filename>group__Functions.html</filename>
    <subgroup>FunctionsString</subgroup>
    <member kind="function">
      <type>cObject *</type>
      <name>createOne</name>
      <anchorfile>group__Functions.html</anchorfile>
      <anchor>gaa370054d4585c54d79bd424e32e4d7a0</anchor>
      <arglist>(const char *classname)</arglist>
    </member>
    <member kind="function">
      <type>cObject *</type>
      <name>createOneIfClassIsKnown</name>
      <anchorfile>group__Functions.html</anchorfile>
      <anchor>gad323a15a34f4414326df8e82bcfca21d</anchor>
      <arglist>(const char *classname)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>check_and_cast</name>
      <anchorfile>group__Functions.html</anchorfile>
      <anchor>gac05a322b9912da77f8b797eeab7805f4</anchor>
      <arglist>(cObject *p)</arglist>
    </member>
    <member kind="function">
      <type>const T</type>
      <name>check_and_cast</name>
      <anchorfile>group__Functions.html</anchorfile>
      <anchor>gae6db3a6c8fed0c01884a83c609e1ee64</anchor>
      <arglist>(const cObject *p)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>Macros</name>
    <title>Macros</title>
    <filename>group__Macros.html</filename>
    <subgroup>MacrosFSM</subgroup>
    <subgroup>MacrosWatch</subgroup>
    <subgroup>MacrosReg</subgroup>
  </compound>
  <compound kind="group">
    <name>EnvirExtensions</name>
    <title>Extension interfaces</title>
    <filename>group__EnvirExtensions.html</filename>
    <class kind="class">cConfiguration</class>
    <class kind="class">cConfigurationEx</class>
    <class kind="class">cEnvir</class>
    <class kind="class">cRunnableEnvir</class>
    <class kind="class">cMessagePrinter</class>
    <class kind="class">cNullEnvir</class>
    <class kind="class">cResultFilter</class>
    <class kind="class">cNumericResultFilter</class>
    <class kind="class">cObjectResultFilter</class>
    <class kind="class">cResultListener</class>
    <class kind="class">cResultRecorder</class>
    <class kind="class">cNumericResultRecorder</class>
    <class kind="class">cRNG</class>
    <class kind="class">cScheduler</class>
    <class kind="class">cOutputVectorManager</class>
    <class kind="class">cOutputScalarManager</class>
    <class kind="class">cSnapshotManager</class>
  </compound>
  <compound kind="group">
    <name>Internals</name>
    <title>Internal classes</title>
    <filename>group__Internals.html</filename>
    <class kind="class">cBoolParImpl</class>
    <class kind="class">cClassDescriptor</class>
    <class kind="class">cComponentType</class>
    <class kind="class">cModuleType</class>
    <class kind="class">cChannelType</class>
    <class kind="class">cConfigOption</class>
    <class kind="class">cCoroutine</class>
    <class kind="class">cDefaultList</class>
    <class kind="class">cDoubleParImpl</class>
    <class kind="class">cEnum</class>
    <class kind="class">cTerminationException</class>
    <class kind="class">cRuntimeError</class>
    <class kind="class">cDeleteModuleException</class>
    <class kind="class">cStackCleanupException</class>
    <class kind="class">cLongParImpl</class>
    <class kind="class">cMessageHeap</class>
    <class kind="class">cNEDFunction</class>
    <class kind="class">cNEDMathFunction</class>
    <class kind="class">cObjectFactory</class>
    <class kind="class">cParImpl</class>
    <class kind="class">cProperties</class>
    <class kind="class">cProperty</class>
    <class kind="class">cGlobalRegistrationList</class>
    <class kind="class">cResultFilterDescriptor</class>
    <class kind="class">cResultRecorderDescriptor</class>
    <class kind="class">cScheduler</class>
    <class kind="class">cSequentialScheduler</class>
    <class kind="class">cRealTimeScheduler</class>
    <class kind="class">cSimulation</class>
    <class kind="class">cStringParImpl</class>
    <class kind="class">cWatchBase</class>
    <class kind="class">cGenericReadonlyWatch</class>
    <class kind="class">cGenericAssignableWatch</class>
    <class kind="class">cWatch_bool</class>
    <class kind="class">cWatch_char</class>
    <class kind="class">cWatch_uchar</class>
    <class kind="class">cWatch_stdstring</class>
    <class kind="class">cWatch_cObject</class>
    <class kind="class">cWatch_cObjectPtr</class>
    <class kind="class">cXMLParImpl</class>
    <class kind="class">cErrorMessages</class>
    <class kind="class">CodeFragments</class>
    <class kind="class">opp_string</class>
    <class kind="class">opp_string_vector</class>
    <class kind="class">opp_string_map</class>
    <class kind="class">cContextSwitcher</class>
    <class kind="class">cMethodCallContextSwitcher</class>
    <class kind="class">cContextTypeSwitcher</class>
  </compound>
  <compound kind="group">
    <name>ParsimBrief</name>
    <title>Parallel simulation extension</title>
    <filename>group__ParsimBrief.html</filename>
    <class kind="class">cCommBuffer</class>
    <class kind="class">cParsimCommunications</class>
    <member kind="define">
      <type>#define</type>
      <name>MAX_PARSIM_PARTITIONS</name>
      <anchorfile>group__ParsimBrief.html</anchorfile>
      <anchor>gaa82c54be13c3f5bcbebe1d4d648e8c77</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>RandomNumbersGen</name>
    <title>Random number generation</title>
    <filename>group__RandomNumbersGen.html</filename>
    <member kind="function">
      <type>long</type>
      <name>intrand</name>
      <anchorfile>group__RandomNumbersGen.html</anchorfile>
      <anchor>ga32afdb2fe034097beccc22642ac63d99</anchor>
      <arglist>(long r)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dblrand</name>
      <anchorfile>group__RandomNumbersGen.html</anchorfile>
      <anchor>gac48f353c2a520353fb2abb326e719571</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>genk_intrand</name>
      <anchorfile>group__RandomNumbersGen.html</anchorfile>
      <anchor>gaca3af1e3dfdec1f3ba44754af298bcb0</anchor>
      <arglist>(int k, long r)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>genk_dblrand</name>
      <anchorfile>group__RandomNumbersGen.html</anchorfile>
      <anchor>ga1882667c39732668d58486c1c435bad4</anchor>
      <arglist>(int k)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>MacrosReg</name>
    <title>Registration macros</title>
    <filename>group__MacrosReg.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>Register_ResultFilter</name>
      <anchorfile>group__MacrosReg.html</anchorfile>
      <anchor>ga6f2d3c14629d4841a0e08a4f495a7f3a</anchor>
      <arglist>(NAME, CLASSNAME)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Register_ResultRecorder</name>
      <anchorfile>group__MacrosReg.html</anchorfile>
      <anchor>ga9afee497008788618fda74c8d6e782b4</anchor>
      <arglist>(NAME, CLASSNAME)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Define_NED_Math_Function</name>
      <anchorfile>group__MacrosReg.html</anchorfile>
      <anchor>ga6443da94f0c425c2f6a4e2796ae0d930</anchor>
      <arglist>(NAME, ARGCOUNT)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Define_NED_Math_Function2</name>
      <anchorfile>group__MacrosReg.html</anchorfile>
      <anchor>ga32775e2c56ecc55d5a26c22cb8b14c21</anchor>
      <arglist>(NAME, FUNCTION, ARGCOUNT)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Define_NED_Math_Function3</name>
      <anchorfile>group__MacrosReg.html</anchorfile>
      <anchor>ga17008e10fe2c26046a2dfb2372376e74</anchor>
      <arglist>(NAME, ARGCOUNT, CATEGORY, DESCRIPTION)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Define_NED_Math_Function4</name>
      <anchorfile>group__MacrosReg.html</anchorfile>
      <anchor>gafb4652c1aa744a704decd8bf8495badd</anchor>
      <arglist>(NAME, FUNCTION, ARGCOUNT, CATEGORY, DESCRIPTION)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Define_Function</name>
      <anchorfile>group__MacrosReg.html</anchorfile>
      <anchor>ga093680bd8078c9b2874e4e6ae9bf2f43</anchor>
      <arglist>(NAME, ARGCOUNT)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Define_Function2</name>
      <anchorfile>group__MacrosReg.html</anchorfile>
      <anchor>gad4e71fac8998b5055de446895b3d2bea</anchor>
      <arglist>(NAME, FUNCTION, ARGCOUNT)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Define_Function3</name>
      <anchorfile>group__MacrosReg.html</anchorfile>
      <anchor>gae19cf3c7c61ff62682213b373127a51a</anchor>
      <arglist>(NAME, ARGCOUNT, CATEGORY, DESCRIPTION)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Define_Function4</name>
      <anchorfile>group__MacrosReg.html</anchorfile>
      <anchor>ga3d2e14240a36aef146f66c7f3a22ed34</anchor>
      <arglist>(NAME, FUNCTION, ARGCOUNT, CATEGORY, DESCRIPTION)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Define_NED_Function</name>
      <anchorfile>group__MacrosReg.html</anchorfile>
      <anchor>gafa65854bb341b99eb44a29b8f6805589</anchor>
      <arglist>(FUNCTION, SIGNATURE)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Define_NED_Function2</name>
      <anchorfile>group__MacrosReg.html</anchorfile>
      <anchor>gac94af17dc21c6f86787d54f51e2eccef</anchor>
      <arglist>(FUNCTION, SIGNATURE, CATEGORY, DESCRIPTION)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Register_Class</name>
      <anchorfile>group__MacrosReg.html</anchorfile>
      <anchor>gadbca479a455e4ba1bb47e9cb699e8765</anchor>
      <arglist>(CLASSNAME)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Register_Abstract_Class</name>
      <anchorfile>group__MacrosReg.html</anchorfile>
      <anchor>ga18681258c0394e5167e4d282b44a4be4</anchor>
      <arglist>(CLASSNAME)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Define_Module</name>
      <anchorfile>group__MacrosReg.html</anchorfile>
      <anchor>ga109b3bf65513bbe25360c5f4c08cd2d1</anchor>
      <arglist>(CLASSNAME)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Define_Channel</name>
      <anchorfile>group__MacrosReg.html</anchorfile>
      <anchor>ga07e252d0422dfc02058dfa801ea66deb</anchor>
      <arglist>(CLASSNAME)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Register_ClassDescriptor</name>
      <anchorfile>group__MacrosReg.html</anchorfile>
      <anchor>ga380ca4378934e280a8b7d00294ed6ba7</anchor>
      <arglist>(DESCRIPTORCLASS)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Module_Class_Members</name>
      <anchorfile>group__MacrosReg.html</anchorfile>
      <anchor>ga96dc1cfbc4574094cdd29d04c1a4d94a</anchor>
      <arglist>(CLASSNAME, BASECLASS, STACK)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Register_GlobalConfigOption</name>
      <anchorfile>group__MacrosReg.html</anchorfile>
      <anchor>gae02e9864add2a397723ab930d623adc0</anchor>
      <arglist>(ID, NAME, TYPE, DEFAULTVALUE, DESCRIPTION)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Register_PerRunConfigOption</name>
      <anchorfile>group__MacrosReg.html</anchorfile>
      <anchor>ga932711ee76eb90de1f725deabf4d440f</anchor>
      <arglist>(ID, NAME, TYPE, DEFAULTVALUE, DESCRIPTION)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Register_GlobalConfigOptionU</name>
      <anchorfile>group__MacrosReg.html</anchorfile>
      <anchor>ga1a2e531079c5d8a6ee323812d1ba717d</anchor>
      <arglist>(ID, NAME, UNIT, DEFAULTVALUE, DESCRIPTION)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Register_PerRunConfigOptionU</name>
      <anchorfile>group__MacrosReg.html</anchorfile>
      <anchor>gaa248a1484a581af34c8995b3cc42479c</anchor>
      <arglist>(ID, NAME, UNIT, DEFAULTVALUE, DESCRIPTION)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Register_PerObjectConfigOption</name>
      <anchorfile>group__MacrosReg.html</anchorfile>
      <anchor>gaf1a96476aabfaf442a9bb421ba647717</anchor>
      <arglist>(ID, NAME, KIND, TYPE, DEFAULTVALUE, DESCRIPTION)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Register_PerObjectConfigOptionU</name>
      <anchorfile>group__MacrosReg.html</anchorfile>
      <anchor>ga597fb33bbc90f9cd8f46fe628bee0203</anchor>
      <arglist>(ID, NAME, KIND, UNIT, DEFAULTVALUE, DESCRIPTION)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Register_MessagePrinter</name>
      <anchorfile>group__MacrosReg.html</anchorfile>
      <anchor>ga404cfee50d31b0a4ea475fc2302f04f6</anchor>
      <arglist>(CLASSNAME)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>FunctionsString</name>
    <title>String-related</title>
    <filename>group__FunctionsString.html</filename>
    <member kind="function">
      <type>int</type>
      <name>opp_strlen</name>
      <anchorfile>group__FunctionsString.html</anchorfile>
      <anchor>ga5b35bf42f5261c56fb5c0cade0f05ea7</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>opp_strdup</name>
      <anchorfile>group__FunctionsString.html</anchorfile>
      <anchor>ga2ff9851aa2bc996cca97b20b81e5ab80</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>opp_strcpy</name>
      <anchorfile>group__FunctionsString.html</anchorfile>
      <anchor>gad904f75ebf7debc890f5f2bcf75e79df</anchor>
      <arglist>(char *, const char *)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>opp_strcmp</name>
      <anchorfile>group__FunctionsString.html</anchorfile>
      <anchor>gaca723c5e22d4626cd50158df8a0ea302</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function">
      <type>SIM_API char *</type>
      <name>opp_strprettytrunc</name>
      <anchorfile>group__FunctionsString.html</anchorfile>
      <anchor>ga1e5a2f95c88cc0cc272063b7d8b381a0</anchor>
      <arglist>(char *dest, const char *src, unsigned maxlen)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cAbstractLineFigure</name>
    <filename>classcAbstractLineFigure.html</filename>
    <base>cFigure</base>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcAbstractLineFigure.html</anchorfile>
      <anchor>a85f2cd5898706b35daf6a7f3b3dbb6f7</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cAbstractShapeFigure</name>
    <filename>classcAbstractShapeFigure.html</filename>
    <base>cFigure</base>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcAbstractShapeFigure.html</anchorfile>
      <anchor>aa485000b3438724ebdfef0e083058317</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cAccuracyDetection</name>
    <filename>classcAccuracyDetection.html</filename>
    <base>cOwnedObject</base>
    <member kind="function">
      <type></type>
      <name>cAccuracyDetection</name>
      <anchorfile>classcAccuracyDetection.html</anchorfile>
      <anchor>a08d13cf5c55e2bb68bb4f21274ef4221</anchor>
      <arglist>(const char *name=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cAccuracyDetection</name>
      <anchorfile>classcAccuracyDetection.html</anchorfile>
      <anchor>aea718007d5e2325d300036f98c82a88a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cAccuracyDetection *</type>
      <name>dup</name>
      <anchorfile>classcAccuracyDetection.html</anchorfile>
      <anchor>a05d44ae0ec3bcc7b1c5d6e1c53e66fcf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>collect</name>
      <anchorfile>classcAccuracyDetection.html</anchorfile>
      <anchor>a06d50270a12209ca48323a75825a0b70</anchor>
      <arglist>(double val)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>detected</name>
      <anchorfile>classcAccuracyDetection.html</anchorfile>
      <anchor>ab7d031cf1c04ee877f4014b81ae04a52</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classcAccuracyDetection.html</anchorfile>
      <anchor>ad2f68b089ba71ba578c00546bec2f25b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>stop</name>
      <anchorfile>classcAccuracyDetection.html</anchorfile>
      <anchor>a291c771d2a5fd2b6918dcf6705253b2d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>start</name>
      <anchorfile>classcAccuracyDetection.html</anchorfile>
      <anchor>aa7bc70060277d3c348a1e76222d2de4e</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPostDetectFunction</name>
      <anchorfile>classcAccuracyDetection.html</anchorfile>
      <anchor>a694da093ea1215b67bf027513dc72a5b</anchor>
      <arglist>(PostADFunc f, void *p)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setHostObject</name>
      <anchorfile>classcAccuracyDetection.html</anchorfile>
      <anchor>afd2cde7c7ce00acbe683fd805b07ac10</anchor>
      <arglist>(cStatistic *ptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cStatistic *</type>
      <name>getHostObject</name>
      <anchorfile>classcAccuracyDetection.html</anchorfile>
      <anchor>ae3e7af12f93205e6e5a51ff637f80d2b</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cADByStddev</name>
    <filename>classcADByStddev.html</filename>
    <base>cAccuracyDetection</base>
    <member kind="function">
      <type></type>
      <name>cADByStddev</name>
      <anchorfile>classcADByStddev.html</anchorfile>
      <anchor>a66057c6f94a417f86866cf51f7e22407</anchor>
      <arglist>(const cADByStddev &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cADByStddev</name>
      <anchorfile>classcADByStddev.html</anchorfile>
      <anchor>aac25617c036a43222f32a8e4bbc81745</anchor>
      <arglist>(const char *name=NULL, double acc=0.01, int reps=3, PostADFunc f=NULL, void *p=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cADByStddev</name>
      <anchorfile>classcADByStddev.html</anchorfile>
      <anchor>a6871f7339506d46ffd9131b09451c177</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cADByStddev &amp;</type>
      <name>operator=</name>
      <anchorfile>classcADByStddev.html</anchorfile>
      <anchor>a0190a11d040c977e816371cda0ea7fba</anchor>
      <arglist>(const cADByStddev &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cADByStddev *</type>
      <name>dup</name>
      <anchorfile>classcADByStddev.html</anchorfile>
      <anchor>a67abd143db1a6fa468606fb05beb4846</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collect</name>
      <anchorfile>classcADByStddev.html</anchorfile>
      <anchor>aeee4598422a057145d904ea635c05411</anchor>
      <arglist>(double val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>detected</name>
      <anchorfile>classcADByStddev.html</anchorfile>
      <anchor>a41885082850a4255b510ecd6c404c90c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classcADByStddev.html</anchorfile>
      <anchor>af463cd52c305ae2b1bf147d204364e2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>stop</name>
      <anchorfile>classcADByStddev.html</anchorfile>
      <anchor>a7b6cd45ce363fde938e0d4ace1862034</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>start</name>
      <anchorfile>classcADByStddev.html</anchorfile>
      <anchor>a7e7d8d2cfccf862f471b4e39da1603ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameters</name>
      <anchorfile>classcADByStddev.html</anchorfile>
      <anchor>a251e85e8e71c9f239d9490282c7d3911</anchor>
      <arglist>(double acc=0.1, int reps=3)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cArcFigure</name>
    <filename>classcArcFigure.html</filename>
    <base>cAbstractLineFigure</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cArcFigure *</type>
      <name>dup</name>
      <anchorfile>classcArcFigure.html</anchorfile>
      <anchor>a73bbf855e7ecc4307e70cc4fd0a8cc7c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcArcFigure.html</anchorfile>
      <anchor>aa2e8b80760be7ea935039f805492accd</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cArray</name>
    <filename>classcArray.html</filename>
    <base>cOwnedObject</base>
    <class kind="class">cArray::Iterator</class>
    <member kind="function">
      <type></type>
      <name>cArray</name>
      <anchorfile>classcArray.html</anchorfile>
      <anchor>a078d434d737766f6bcfd4529b0b735fc</anchor>
      <arglist>(const cArray &amp;list)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cArray</name>
      <anchorfile>classcArray.html</anchorfile>
      <anchor>a8a5ab23ca5313be66ec88df69b493cfe</anchor>
      <arglist>(const char *name=NULL, int capacity=0, int delta=10)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cArray</name>
      <anchorfile>classcArray.html</anchorfile>
      <anchor>a40e99652feeb3a18780aa06adf96bd59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cArray &amp;</type>
      <name>operator=</name>
      <anchorfile>classcArray.html</anchorfile>
      <anchor>abd9d65c58f29846fe5c470b4d4b388a1</anchor>
      <arglist>(const cArray &amp;list)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cArray *</type>
      <name>dup</name>
      <anchorfile>classcArray.html</anchorfile>
      <anchor>aef65e15e1a8dd4a787e6d1a7ab02508a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcArray.html</anchorfile>
      <anchor>a03e55dabc34f509861b7dac14755a4b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classcArray.html</anchorfile>
      <anchor>ad8eccb83d1edc5763a6f371e3d8b1f7d</anchor>
      <arglist>(cVisitor *v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classcArray.html</anchorfile>
      <anchor>a5c7b7b805e04ad9cacfb186d682e7a2a</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classcArray.html</anchorfile>
      <anchor>a8b7f4345157840f9d05b68842e3ad910</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classcArray.html</anchorfile>
      <anchor>a9979491d902478a8e3671ae7448ec022</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classcArray.html</anchorfile>
      <anchor>a0da117c972273d5e9b3704a0b113a27d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCapacity</name>
      <anchorfile>classcArray.html</anchorfile>
      <anchor>ab0c413f8b82badb473790d02a191e822</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCapacity</name>
      <anchorfile>classcArray.html</anchorfile>
      <anchor>a5470c3dbc98c5c794a8c5fd8d5be374a</anchor>
      <arglist>(int capacity)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>add</name>
      <anchorfile>classcArray.html</anchorfile>
      <anchor>ac7d7369e49551ecdd74d8d1e528d106c</anchor>
      <arglist>(cObject *obj)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addAt</name>
      <anchorfile>classcArray.html</anchorfile>
      <anchor>ab6c7b0685080875ad7094058c40625da</anchor>
      <arglist>(int m, cObject *obj)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>set</name>
      <anchorfile>classcArray.html</anchorfile>
      <anchor>aa25f57d777fee370642449a929837c83</anchor>
      <arglist>(cObject *obj)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>find</name>
      <anchorfile>classcArray.html</anchorfile>
      <anchor>acef2706d235a0865acaa995fafdb62da</anchor>
      <arglist>(cObject *obj) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>find</name>
      <anchorfile>classcArray.html</anchorfile>
      <anchor>a84bd671ec352e5e08924b115e1f7105c</anchor>
      <arglist>(const char *objname) const </arglist>
    </member>
    <member kind="function">
      <type>cObject *</type>
      <name>get</name>
      <anchorfile>classcArray.html</anchorfile>
      <anchor>ade73d719c14680d9299ca4d6c97624d8</anchor>
      <arglist>(int m)</arglist>
    </member>
    <member kind="function">
      <type>cObject *</type>
      <name>get</name>
      <anchorfile>classcArray.html</anchorfile>
      <anchor>adac7bf33c49a77cf2c136525de900314</anchor>
      <arglist>(const char *objname)</arglist>
    </member>
    <member kind="function">
      <type>const cObject *</type>
      <name>get</name>
      <anchorfile>classcArray.html</anchorfile>
      <anchor>a980e44e2497636ff6c5b74499173c15a</anchor>
      <arglist>(int m) const </arglist>
    </member>
    <member kind="function">
      <type>const cObject *</type>
      <name>get</name>
      <anchorfile>classcArray.html</anchorfile>
      <anchor>a23243b109e240f371da297c12594bc84</anchor>
      <arglist>(const char *objname) const </arglist>
    </member>
    <member kind="function">
      <type>cObject *</type>
      <name>operator[]</name>
      <anchorfile>classcArray.html</anchorfile>
      <anchor>a012611712633929717e33af71409f23c</anchor>
      <arglist>(int m)</arglist>
    </member>
    <member kind="function">
      <type>cObject *</type>
      <name>operator[]</name>
      <anchorfile>classcArray.html</anchorfile>
      <anchor>ae1469ca2af6cbd6fcee6d3da9fb1d865</anchor>
      <arglist>(const char *objname)</arglist>
    </member>
    <member kind="function">
      <type>const cObject *</type>
      <name>operator[]</name>
      <anchorfile>classcArray.html</anchorfile>
      <anchor>a26422b40fdeb8a2415b463701ab71ee4</anchor>
      <arglist>(int m) const </arglist>
    </member>
    <member kind="function">
      <type>const cObject *</type>
      <name>operator[]</name>
      <anchorfile>classcArray.html</anchorfile>
      <anchor>ae69cacba1f3e05f33b696e05049e0690</anchor>
      <arglist>(const char *objname) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exist</name>
      <anchorfile>classcArray.html</anchorfile>
      <anchor>ad8780c71b4aabe1563d31a13095f10c5</anchor>
      <arglist>(int m) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exist</name>
      <anchorfile>classcArray.html</anchorfile>
      <anchor>afdb684281aea1f3e6829a4c6c234659e</anchor>
      <arglist>(const char *objname) const </arglist>
    </member>
    <member kind="function">
      <type>cObject *</type>
      <name>remove</name>
      <anchorfile>classcArray.html</anchorfile>
      <anchor>a4897e70a8589f1c5af2b67ba5552ffba</anchor>
      <arglist>(int m)</arglist>
    </member>
    <member kind="function">
      <type>cObject *</type>
      <name>remove</name>
      <anchorfile>classcArray.html</anchorfile>
      <anchor>a9a187290628f1768c7f0777ed4493a13</anchor>
      <arglist>(const char *objname)</arglist>
    </member>
    <member kind="function">
      <type>cObject *</type>
      <name>remove</name>
      <anchorfile>classcArray.html</anchorfile>
      <anchor>aacbef0803684810bce105d8371116b42</anchor>
      <arglist>(cObject *obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTakeOwnership</name>
      <anchorfile>classcArray.html</anchorfile>
      <anchor>a3a9472d67b782cc5436e27cc48aa6cb2</anchor>
      <arglist>(bool tk)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getTakeOwnership</name>
      <anchorfile>classcArray.html</anchorfile>
      <anchor>ab1370ce0a879b58fc5e8de385708136f</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cArray::Iterator</name>
    <filename>classcArray_1_1Iterator.html</filename>
    <member kind="function">
      <type></type>
      <name>Iterator</name>
      <anchorfile>classcArray_1_1Iterator.html</anchorfile>
      <anchor>a0eaf2d60635efa66a3724661c861e03c</anchor>
      <arglist>(const cArray &amp;a, bool athead=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classcArray_1_1Iterator.html</anchorfile>
      <anchor>affc40a3067ecd2a7a8079e452b88d4e1</anchor>
      <arglist>(const cArray &amp;a, bool athead=true)</arglist>
    </member>
    <member kind="function">
      <type>cObject *</type>
      <name>operator()</name>
      <anchorfile>classcArray_1_1Iterator.html</anchorfile>
      <anchor>a506dc6412417257f44535bd1d35f18b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>end</name>
      <anchorfile>classcArray_1_1Iterator.html</anchorfile>
      <anchor>a11641867f05e8a9d8b2cd84e94a6723f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cObject *</type>
      <name>operator++</name>
      <anchorfile>classcArray_1_1Iterator.html</anchorfile>
      <anchor>a2025c0bdacc5125fb39dfaa8559cf1d7</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>cObject *</type>
      <name>operator--</name>
      <anchorfile>classcArray_1_1Iterator.html</anchorfile>
      <anchor>a161e950a195d65ab9db9045a5e6523d7</anchor>
      <arglist>(int)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cBoolParImpl</name>
    <filename>classcBoolParImpl.html</filename>
    <base>cParImpl</base>
    <member kind="function">
      <type></type>
      <name>cBoolParImpl</name>
      <anchorfile>classcBoolParImpl.html</anchorfile>
      <anchor>a901a59f98a85f35d4f08e45360a8016a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cBoolParImpl</name>
      <anchorfile>classcBoolParImpl.html</anchorfile>
      <anchor>a2c8dfa6741377bd4892c898493624f4f</anchor>
      <arglist>(const cBoolParImpl &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cBoolParImpl</name>
      <anchorfile>classcBoolParImpl.html</anchorfile>
      <anchor>ac425818f806ee16f165beb506834f82e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classcBoolParImpl.html</anchorfile>
      <anchor>a90b93b26baca5b13bea3e2bdd9be121a</anchor>
      <arglist>(const cBoolParImpl &amp;otherpar)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cBoolParImpl *</type>
      <name>dup</name>
      <anchorfile>classcBoolParImpl.html</anchorfile>
      <anchor>a524fdac98af66e761b66ce47da63115f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classcBoolParImpl.html</anchorfile>
      <anchor>ac35d8d88272a6059240cea660b266709</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classcBoolParImpl.html</anchorfile>
      <anchor>a87f1c825e882c889e5d6c813efdcc062</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBoolValue</name>
      <anchorfile>classcBoolParImpl.html</anchorfile>
      <anchor>aa78c367c7c984108160c07971f1db7c8</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLongValue</name>
      <anchorfile>classcBoolParImpl.html</anchorfile>
      <anchor>a68a089f98ee662fa972d398cf0bb491c</anchor>
      <arglist>(long l)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDoubleValue</name>
      <anchorfile>classcBoolParImpl.html</anchorfile>
      <anchor>a34bfdba3f3877fa2bda1f8b3bd61d072</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStringValue</name>
      <anchorfile>classcBoolParImpl.html</anchorfile>
      <anchor>aa38691f3947d8bfbe0af126258307da8</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setXMLValue</name>
      <anchorfile>classcBoolParImpl.html</anchorfile>
      <anchor>ac4dcd751d052719b6cf784c83df95d20</anchor>
      <arglist>(cXMLElement *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setExpression</name>
      <anchorfile>classcBoolParImpl.html</anchorfile>
      <anchor>a688e5abcb9f614e47eab511e768269e0</anchor>
      <arglist>(cExpression *e)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>boolValue</name>
      <anchorfile>classcBoolParImpl.html</anchorfile>
      <anchor>a306d051cb3efcec3ce87e2c0718d7e37</anchor>
      <arglist>(cComponent *context) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>longValue</name>
      <anchorfile>classcBoolParImpl.html</anchorfile>
      <anchor>a667ce53997466cf9745bc81dae1778cb</anchor>
      <arglist>(cComponent *context) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>doubleValue</name>
      <anchorfile>classcBoolParImpl.html</anchorfile>
      <anchor>ac87319dd496c69a149f1e29f357f1fe5</anchor>
      <arglist>(cComponent *context) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>stringValue</name>
      <anchorfile>classcBoolParImpl.html</anchorfile>
      <anchor>aaea7dc62d1ed899d4a1b882c6f6242a9</anchor>
      <arglist>(cComponent *context) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>stdstringValue</name>
      <anchorfile>classcBoolParImpl.html</anchorfile>
      <anchor>a3cf215daa20e33650702486b35907c01</anchor>
      <arglist>(cComponent *context) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>xmlValue</name>
      <anchorfile>classcBoolParImpl.html</anchorfile>
      <anchor>ad71902fefc24fe73d44562392ffe75c3</anchor>
      <arglist>(cComponent *context) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cExpression *</type>
      <name>getExpression</name>
      <anchorfile>classcBoolParImpl.html</anchorfile>
      <anchor>a05644741c369d79c103f7bf9986fdb21</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Type</type>
      <name>getType</name>
      <anchorfile>classcBoolParImpl.html</anchorfile>
      <anchor>ad01625eaf660a98676b1313c09a9b773</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isNumeric</name>
      <anchorfile>classcBoolParImpl.html</anchorfile>
      <anchor>a447e32ab1402f1bf8cb5ba500a2e6dc9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>convertToConst</name>
      <anchorfile>classcBoolParImpl.html</anchorfile>
      <anchor>a6a183200e4c8dde168dcc8039eccbbb7</anchor>
      <arglist>(cComponent *context)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classcBoolParImpl.html</anchorfile>
      <anchor>aa5ce952639a8ce1658bccadb00d44167</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classcBoolParImpl.html</anchorfile>
      <anchor>a3c7e88f12623c1ccf9042cc9946438f8</anchor>
      <arglist>(const char *text)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compare</name>
      <anchorfile>classcBoolParImpl.html</anchorfile>
      <anchor>a471b94b08a6f57e2f11598a7a0f83d4b</anchor>
      <arglist>(const cParImpl *other) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cCanvas</name>
    <filename>classcCanvas.html</filename>
    <base>cOwnedObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cCanvas *</type>
      <name>dup</name>
      <anchorfile>classcCanvas.html</anchorfile>
      <anchor>a23a691e49a6543ab19d280e6dfbd9daa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classcCanvas.html</anchorfile>
      <anchor>a78a90114bf4c75f35c84950d8040d66f</anchor>
      <arglist>(cVisitor *v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcCanvas.html</anchorfile>
      <anchor>a546582077c827f1bb954805a197916a7</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cChannel</name>
    <filename>classcChannel.html</filename>
    <base>cComponent</base>
    <class kind="class">cChannel::MessageSentSignalValue</class>
    <class kind="struct">cChannel::result_t</class>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finalizeParameters</name>
      <anchorfile>classcChannel.html</anchorfile>
      <anchor>aac8dab68b3a4d1b73da5fae33987b6eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cChannel</name>
      <anchorfile>classcChannel.html</anchorfile>
      <anchor>a6ebb865ffa87fcc90b881e1e09698260</anchor>
      <arglist>(const char *name=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cChannel</name>
      <anchorfile>classcChannel.html</anchorfile>
      <anchor>a30288a446d117ab8c6555f76386062ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcChannel.html</anchorfile>
      <anchor>a3ac54f458ff7328d99d4d16969d2b79b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classcChannel.html</anchorfile>
      <anchor>abceb8a93cd18daade33738507c57b427</anchor>
      <arglist>(cVisitor *v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classcChannel.html</anchorfile>
      <anchor>ace46b3e0db1d239ceff86ff0254ee341</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classcChannel.html</anchorfile>
      <anchor>a8f39c0856fb2e97625dfbe21d6784fa4</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callInitialize</name>
      <anchorfile>classcChannel.html</anchorfile>
      <anchor>a6039e824e1c2081e7379462f3bf223c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>callInitialize</name>
      <anchorfile>classcChannel.html</anchorfile>
      <anchor>a8abfc36f81bc7b5fa080cdee48540390</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callFinish</name>
      <anchorfile>classcChannel.html</anchorfile>
      <anchor>a26d003fd443d2b026b81db8e1a496406</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cModule *</type>
      <name>getParentModule</name>
      <anchorfile>classcChannel.html</anchorfile>
      <anchor>ab3165dfa2445454d18da18eba10c5d66</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cChannelType *</type>
      <name>getChannelType</name>
      <anchorfile>classcChannel.html</anchorfile>
      <anchor>aced7ba7516d510629baa7c0690ea39ee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cProperties *</type>
      <name>getProperties</name>
      <anchorfile>classcChannel.html</anchorfile>
      <anchor>a545aa9fb6ea428d9e85fc2f9233d6e11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cGate *</type>
      <name>getSourceGate</name>
      <anchorfile>classcChannel.html</anchorfile>
      <anchor>abb65dda2ba99f75ad5bf2b17caac42fb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isTransmissionChannel</name>
      <anchorfile>classcChannel.html</anchorfile>
      <anchor>a142574fefc35dc9c96ad5e9004ca8f4a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>processMessage</name>
      <anchorfile>classcChannel.html</anchorfile>
      <anchor>af20990b051b5f7049b460cd57c4fdc87</anchor>
      <arglist>(cMessage *msg, simtime_t t, result_t &amp;result)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getNominalDatarate</name>
      <anchorfile>classcChannel.html</anchorfile>
      <anchor>ac1326107322b511637488daf98466509</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual simtime_t</type>
      <name>calculateDuration</name>
      <anchorfile>classcChannel.html</anchorfile>
      <anchor>ab9ce6c937d788787a28c60135c8543a7</anchor>
      <arglist>(cMessage *msg) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual simtime_t</type>
      <name>getTransmissionFinishTime</name>
      <anchorfile>classcChannel.html</anchorfile>
      <anchor>a2b8df0e7e5081368346f7c19ca41ab46</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isBusy</name>
      <anchorfile>classcChannel.html</anchorfile>
      <anchor>a1ea6603e4ed7d16bc9557e866641ef2f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>forceTransmissionFinishTime</name>
      <anchorfile>classcChannel.html</anchorfile>
      <anchor>a707271d862ee64e99f4a691f5c44953d</anchor>
      <arglist>(simtime_t t)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cChannel::MessageSentSignalValue</name>
    <filename>classcChannel_1_1MessageSentSignalValue.html</filename>
    <base>cITimestampedValue</base>
    <base>cObject</base>
    <member kind="function">
      <type></type>
      <name>MessageSentSignalValue</name>
      <anchorfile>classcChannel_1_1MessageSentSignalValue.html</anchorfile>
      <anchor>a7ab15334082be6f545312dbbb1130511</anchor>
      <arglist>(simtime_t_cref t, cMessage *m, result_t *r)</arglist>
    </member>
    <member kind="function">
      <type>cMessage *</type>
      <name>getMessage</name>
      <anchorfile>classcChannel_1_1MessageSentSignalValue.html</anchorfile>
      <anchor>a40228a5b4ae95c36e21396a898fed867</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>result_t *</type>
      <name>getChannelResult</name>
      <anchorfile>classcChannel_1_1MessageSentSignalValue.html</anchorfile>
      <anchor>a34af0646c5d58e2689442b817ecbeae6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t_cref</type>
      <name>getTimestamp</name>
      <anchorfile>classcChannel_1_1MessageSentSignalValue.html</anchorfile>
      <anchor>a2e6c0b8045dde3481f3d834f83f2fe22</anchor>
      <arglist>(simsignal_t signalID) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SimsignalType</type>
      <name>getValueType</name>
      <anchorfile>classcChannel_1_1MessageSentSignalValue.html</anchorfile>
      <anchor>a640a3f6ff46bf001e6ac356876282488</anchor>
      <arglist>(simsignal_t signalID) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>objectValue</name>
      <anchorfile>classcChannel_1_1MessageSentSignalValue.html</anchorfile>
      <anchor>acc7b48217ab4ef06ad7aa35f3c2f020c</anchor>
      <arglist>(simsignal_t signalID) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>boolValue</name>
      <anchorfile>classcChannel_1_1MessageSentSignalValue.html</anchorfile>
      <anchor>a66384e115e7efdf2bc197f1c5631944e</anchor>
      <arglist>(simsignal_t signalID) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>longValue</name>
      <anchorfile>classcChannel_1_1MessageSentSignalValue.html</anchorfile>
      <anchor>ad3939bd05c1a35471fc4f5b0c60b33c3</anchor>
      <arglist>(simsignal_t signalID) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned long</type>
      <name>unsignedLongValue</name>
      <anchorfile>classcChannel_1_1MessageSentSignalValue.html</anchorfile>
      <anchor>ac7f8f0860f63d9b6810461ed883596da</anchor>
      <arglist>(simsignal_t signalID) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>doubleValue</name>
      <anchorfile>classcChannel_1_1MessageSentSignalValue.html</anchorfile>
      <anchor>aa6d9abe55f62e9a2b077d9dc27d0211c</anchor>
      <arglist>(simsignal_t signalID) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SimTime</type>
      <name>simtimeValue</name>
      <anchorfile>classcChannel_1_1MessageSentSignalValue.html</anchorfile>
      <anchor>a125dccdd9cc3e16254119b4a1f334be4</anchor>
      <arglist>(simsignal_t signalID) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>stringValue</name>
      <anchorfile>classcChannel_1_1MessageSentSignalValue.html</anchorfile>
      <anchor>afeaba05a50f34858b5e216118bf58c07</anchor>
      <arglist>(simsignal_t signalID) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>error</name>
      <anchorfile>classcChannel_1_1MessageSentSignalValue.html</anchorfile>
      <anchor>afa97c98844e65b2c59dc84e150a896a6</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cChannel::result_t</name>
    <filename>structcChannel_1_1result__t.html</filename>
    <member kind="variable">
      <type>simtime_t</type>
      <name>delay</name>
      <anchorfile>structcChannel_1_1result__t.html</anchorfile>
      <anchor>abfef402a841b2cf15549d3107d60754b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>duration</name>
      <anchorfile>structcChannel_1_1result__t.html</anchorfile>
      <anchor>acb8bc35f3c3e1e4c0d09eef09d4dfd0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>discard</name>
      <anchorfile>structcChannel_1_1result__t.html</anchorfile>
      <anchor>a008a5c54d6a06538fcba7426210900a8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cChannelType</name>
    <filename>classcChannelType.html</filename>
    <base>cComponentType</base>
    <member kind="function">
      <type></type>
      <name>cChannelType</name>
      <anchorfile>classcChannelType.html</anchorfile>
      <anchor>a8637d2121074d21811c2ef1a937d5622</anchor>
      <arglist>(const char *qname=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cChannel *</type>
      <name>create</name>
      <anchorfile>classcChannelType.html</anchorfile>
      <anchor>ac6634ac7a2415b923d72624f09fc368b</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cChannelType *</type>
      <name>find</name>
      <anchorfile>classcChannelType.html</anchorfile>
      <anchor>a3862168c8e7b6148f8dfe8f50a5c7f11</anchor>
      <arglist>(const char *qname)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cChannelType *</type>
      <name>get</name>
      <anchorfile>classcChannelType.html</anchorfile>
      <anchor>aa2fab5d1780a4d73a4f1be38c8e3ad85</anchor>
      <arglist>(const char *qname)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cChannelType *</type>
      <name>getIdealChannelType</name>
      <anchorfile>classcChannelType.html</anchorfile>
      <anchor>a2b4d14a132968e4b28d178bc288f6950</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cChannelType *</type>
      <name>getDelayChannelType</name>
      <anchorfile>classcChannelType.html</anchorfile>
      <anchor>a2e6d316c668c7296274e15091548f35b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cChannelType *</type>
      <name>getDatarateChannelType</name>
      <anchorfile>classcChannelType.html</anchorfile>
      <anchor>a0fda1b47b4463088d7b7c74d9bc9d08d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static _OPPDEPRECATED cIdealChannel *</type>
      <name>createIdealChannel</name>
      <anchorfile>classcChannelType.html</anchorfile>
      <anchor>a1faeb5d6923a617c89e1cacb22b80ce1</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static _OPPDEPRECATED cDelayChannel *</type>
      <name>createDelayChannel</name>
      <anchorfile>classcChannelType.html</anchorfile>
      <anchor>a9b1b0324491faa4fb6f070eeaa6c41db</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static _OPPDEPRECATED cDatarateChannel *</type>
      <name>createDatarateChannel</name>
      <anchorfile>classcChannelType.html</anchorfile>
      <anchor>a73040563d23dcf3b0ebd6cd8de95540e</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual cChannel *</type>
      <name>createChannelObject</name>
      <anchorfile>classcChannelType.html</anchorfile>
      <anchor>ad4d089c17581d9a2ea1efc151625e9bc</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>addParametersTo</name>
      <anchorfile>classcChannelType.html</anchorfile>
      <anchor>abc3420bf3a8bce15fb5a70c2312184f9</anchor>
      <arglist>(cChannel *channel)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>cChannel *</type>
      <name>instantiateChannelClass</name>
      <anchorfile>classcChannelType.html</anchorfile>
      <anchor>a55473a2d1ef6ca48b5d7d9966c2fd8fc</anchor>
      <arglist>(const char *classname)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cClassDescriptor</name>
    <filename>classcClassDescriptor.html</filename>
    <base>cNoncopyableOwnedObject</base>
    <member kind="enumvalue">
      <name>FD_ISARRAY</name>
      <anchorfile>classcClassDescriptor.html</anchorfile>
      <anchor>a75ba1409955d49b24856af80b171ebddab5d9931ef565f2292b1ff42939a29e76</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FD_ISCOMPOUND</name>
      <anchorfile>classcClassDescriptor.html</anchorfile>
      <anchor>a75ba1409955d49b24856af80b171ebddabbf8b7dd92cf7178b320acda764249d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FD_ISPOINTER</name>
      <anchorfile>classcClassDescriptor.html</anchorfile>
      <anchor>a75ba1409955d49b24856af80b171ebddaf82468f1ec3c7ba5b5812a81a1d0c083</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FD_ISCOBJECT</name>
      <anchorfile>classcClassDescriptor.html</anchorfile>
      <anchor>a75ba1409955d49b24856af80b171ebddaba72fec7c3dfd36fe0030011963784ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FD_ISCOWNEDOBJECT</name>
      <anchorfile>classcClassDescriptor.html</anchorfile>
      <anchor>a75ba1409955d49b24856af80b171ebdda985fb5bf5073179ee7b59576a975dd38</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FD_ISEDITABLE</name>
      <anchorfile>classcClassDescriptor.html</anchorfile>
      <anchor>a75ba1409955d49b24856af80b171ebddacecf6c17866919f371e8635b2fedda84</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getFieldDeclaredOn</name>
      <anchorfile>classcClassDescriptor.html</anchorfile>
      <anchor>a4e6e4f9982e6b3d83aa44f4bdc10f3d5</anchor>
      <arglist>(void *object, int field) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getFieldTypeString</name>
      <anchorfile>classcClassDescriptor.html</anchorfile>
      <anchor>a30c8f6fa1d24a4559696d3d9f89dabc1</anchor>
      <arglist>(void *object, int field) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getFieldProperty</name>
      <anchorfile>classcClassDescriptor.html</anchorfile>
      <anchor>a08418a28cb71b3340534ef88b92cf019</anchor>
      <arglist>(void *object, int field, const char *propertyname) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getArraySize</name>
      <anchorfile>classcClassDescriptor.html</anchorfile>
      <anchor>a326a15e46e43bb8b68771bf7637d99ac</anchor>
      <arglist>(void *object, int field) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getFieldAsString</name>
      <anchorfile>classcClassDescriptor.html</anchorfile>
      <anchor>a88e8d584e3123189945fe84b5377db23</anchor>
      <arglist>(void *object, int field, int i) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual _OPPDEPRECATED bool</type>
      <name>getFieldAsString</name>
      <anchorfile>classcClassDescriptor.html</anchorfile>
      <anchor>ab5a93785178ac06c4ca8e6036889b7c1</anchor>
      <arglist>(void *object, int field, int i, char *buf, int bufsize) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>setFieldAsString</name>
      <anchorfile>classcClassDescriptor.html</anchorfile>
      <anchor>a6e1bb96410d74a29dee5070d7511d5bd</anchor>
      <arglist>(void *object, int field, int i, const char *value) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getFieldStructName</name>
      <anchorfile>classcClassDescriptor.html</anchorfile>
      <anchor>a26e1e11b39935991e8c66700509b8ad8</anchor>
      <arglist>(void *object, int field) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void *</type>
      <name>getFieldStructPointer</name>
      <anchorfile>classcClassDescriptor.html</anchorfile>
      <anchor>a52fb04304e63ef5427c38bebe2a582b6</anchor>
      <arglist>(void *object, int field, int i) const =0</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cClassDescriptor</name>
      <anchorfile>classcClassDescriptor.html</anchorfile>
      <anchor>a000f3c3e3926ae9baebe4325d97e30eb</anchor>
      <arglist>(const char *classname, const char *_baseclassname=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cClassDescriptor</name>
      <anchorfile>classcClassDescriptor.html</anchorfile>
      <anchor>a5c5c8f319eb6eee0587a002e85fc1fc8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>doesSupport</name>
      <anchorfile>classcClassDescriptor.html</anchorfile>
      <anchor>a24bc2122cebb722c0b92f90c0a4676cc</anchor>
      <arglist>(cObject *obj) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cClassDescriptor *</type>
      <name>getBaseClassDescriptor</name>
      <anchorfile>classcClassDescriptor.html</anchorfile>
      <anchor>aa92ea13418510bfb26fedfc8831a6154</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>extendsCObject</name>
      <anchorfile>classcClassDescriptor.html</anchorfile>
      <anchor>a11a2e80bfd397ae5b82a0e8f03ec41ce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getInheritanceChainLength</name>
      <anchorfile>classcClassDescriptor.html</anchorfile>
      <anchor>a562d8eb819201809c64c518303e793d2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getProperty</name>
      <anchorfile>classcClassDescriptor.html</anchorfile>
      <anchor>a4640b43ec1306762721ee933ae25b597</anchor>
      <arglist>(const char *propertyname) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getFieldCount</name>
      <anchorfile>classcClassDescriptor.html</anchorfile>
      <anchor>aeaf73d14912a1fdbfaa7b11910bcd526</anchor>
      <arglist>(void *object) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getFieldName</name>
      <anchorfile>classcClassDescriptor.html</anchorfile>
      <anchor>ab3deb2b34382ba7b1464c02ebbe7cf96</anchor>
      <arglist>(void *object, int field) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>findField</name>
      <anchorfile>classcClassDescriptor.html</anchorfile>
      <anchor>a303fbc20c8cd5b02c72f4f2715ec779d</anchor>
      <arglist>(void *object, const char *fieldName) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned int</type>
      <name>getFieldTypeFlags</name>
      <anchorfile>classcClassDescriptor.html</anchorfile>
      <anchor>ac856e7f3de3f0287ccfebe5a6092c1b7</anchor>
      <arglist>(void *object, int field) const =0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getFieldIsArray</name>
      <anchorfile>classcClassDescriptor.html</anchorfile>
      <anchor>a4f153655988ad522a89b3346cf76b74d</anchor>
      <arglist>(void *object, int field) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getFieldIsCompound</name>
      <anchorfile>classcClassDescriptor.html</anchorfile>
      <anchor>abd2700c33cb94264f6672e962e3cd7cd</anchor>
      <arglist>(void *object, int field) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getFieldIsPointer</name>
      <anchorfile>classcClassDescriptor.html</anchorfile>
      <anchor>ad7c0ae97725e3fdde67f30223001ea12</anchor>
      <arglist>(void *object, int field) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getFieldIsCObject</name>
      <anchorfile>classcClassDescriptor.html</anchorfile>
      <anchor>add004be6170bb71b0c8fa1e34a0170b0</anchor>
      <arglist>(void *object, int field) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getFieldIsCOwnedObject</name>
      <anchorfile>classcClassDescriptor.html</anchorfile>
      <anchor>a9f3ce4e320d1aadd5430aa7913926f97</anchor>
      <arglist>(void *object, int field) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getFieldIsEditable</name>
      <anchorfile>classcClassDescriptor.html</anchorfile>
      <anchor>ad25b4a9efb666c65deaaac9b8fa88772</anchor>
      <arglist>(void *object, int field) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cClassDescriptor *</type>
      <name>getDescriptorFor</name>
      <anchorfile>classcClassDescriptor.html</anchorfile>
      <anchor>a3c06f83880165ad6cb6c66646acc0ba9</anchor>
      <arglist>(const char *classname)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cClassDescriptor *</type>
      <name>getDescriptorFor</name>
      <anchorfile>classcClassDescriptor.html</anchorfile>
      <anchor>acb2b295db94bba5056e07be55459cd34</anchor>
      <arglist>(cObject *object)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cCommBuffer</name>
    <filename>classcCommBuffer.html</filename>
    <base>cObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cCommBuffer</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>a8e793c4954115c07f01c42446de1e8b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isBufferEmpty</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>adca5aa507c8778160f0d39915515bcc2</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>assertBufferEmpty</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>a993c4142fca24716900be92a6e9d272b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>a09289f7ea3174f8447471765a8bae560</anchor>
      <arglist>(char d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>ab33eaec50cfef2233642f4cd0f0c3fc9</anchor>
      <arglist>(unsigned char d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>a81e83264abe0ceda1d636ee8df8db8f6</anchor>
      <arglist>(bool d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>a402a6b5630d3ce66fe15652c15eb4207</anchor>
      <arglist>(short d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>a70a6f6e3d5c4dd7fb914647d758dddbd</anchor>
      <arglist>(unsigned short d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>aa17b0788bca7b334278bb0430dfcd395</anchor>
      <arglist>(int d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>aa873a7dbcff44b3bb802897921c3e0dd</anchor>
      <arglist>(unsigned int d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>a3ccb86d5f784c50521f7c460355d836a</anchor>
      <arglist>(long d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>acdd7a43cb47fb1094e072a76d0c7dbd8</anchor>
      <arglist>(unsigned long d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>affcfd485ee9530d338433a6e61f4c9c7</anchor>
      <arglist>(opp_long_long d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>aaf9114d93a0e6cff887d61d54bfb8595</anchor>
      <arglist>(opp_unsigned_long_long d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>afe0d9e877f4cd0af21e4b8c11fb270ac</anchor>
      <arglist>(float d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>a80f54834dd92ce1c60eea9a619d09e30</anchor>
      <arglist>(double d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>aa216607fd97a1d5dc72a1c6a0935ccfb</anchor>
      <arglist>(long double d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>ae78b2047b7ae6672331a2f790bd63cd0</anchor>
      <arglist>(const char *d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>a3b4117220a8d9acfaa3f6716fa746097</anchor>
      <arglist>(const opp_string &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>accdd3b77bbe829278439b3ddbc6c81db</anchor>
      <arglist>(SimTime d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>a8fbb88c238195212e1110e179c78ebf4</anchor>
      <arglist>(const char *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>a4256f7b4076d5e46d9e992e5de955aaa</anchor>
      <arglist>(const unsigned char *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>a6e2ff603611aeaac8fe33bceec9c6b7a</anchor>
      <arglist>(const bool *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>a6863115973fc1eab50c5f5c4bd9085e3</anchor>
      <arglist>(const short *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>ab67eb4672af2ea6ee8fbbc0b4033990e</anchor>
      <arglist>(const unsigned short *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>a029dbff69dc98b438efc3b04cbf9f45c</anchor>
      <arglist>(const int *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>aefe78176d4a6c607169d49ff11fe2c3e</anchor>
      <arglist>(const unsigned int *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>a8b78cf95a4df2b6a00c36e4c3bd7359a</anchor>
      <arglist>(const long *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>ae68fedb9c06bee919dfac9b282dd7c5f</anchor>
      <arglist>(const unsigned long *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>a6908b00a308ef2f6f29f96d9f3e41991</anchor>
      <arglist>(const opp_long_long *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>aa1353d4f925665fb50bccc7132ced539</anchor>
      <arglist>(const opp_unsigned_long_long *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>ad057077285cb7e0229947dc901e287ba</anchor>
      <arglist>(const float *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>a9bce6605e78b36ba02616e7a5299673d</anchor>
      <arglist>(const double *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>a44722d38601844e9cce60a49bf8a6530</anchor>
      <arglist>(const long double *d, int size)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>aa483c3adb9e1e9d6fc4e9f285ac78ae1</anchor>
      <arglist>(char **d, int size)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>ad3d17504cc11001856c8d6f75a1be9d0</anchor>
      <arglist>(const char **d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>aa97e46abf50065832229fd532bba2c17</anchor>
      <arglist>(const opp_string *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>a544878650aef221865874a81be80db64</anchor>
      <arglist>(const SimTime *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>a6712584846ab9474aa3bb38e35cfee1b</anchor>
      <arglist>(char &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>a74fb639e76e12f4711fff916b4bc3251</anchor>
      <arglist>(unsigned char &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>aa6fd22c18c89e1ba1896eb479895f9aa</anchor>
      <arglist>(bool &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>ad85235962ba6419acaf0ead672ed4824</anchor>
      <arglist>(short &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>af78414f06d7b6950107e46adc8a97686</anchor>
      <arglist>(unsigned short &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>a51cb0651c232fc189f69474b676824e9</anchor>
      <arglist>(int &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>a336d7c8278a538816748f07104a28630</anchor>
      <arglist>(unsigned int &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>adcadb244d1419cd1c804511364f59707</anchor>
      <arglist>(long &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>adcce9be1fe21d6ca016eda81d9070c66</anchor>
      <arglist>(unsigned long &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>a07052843d371440f2fee20690f3015d6</anchor>
      <arglist>(opp_long_long &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>aca0c2e010cf5f878b5a23b881eea8165</anchor>
      <arglist>(opp_unsigned_long_long &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>aa959e1c99e43bfd6eac97cc82d602367</anchor>
      <arglist>(float &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>aea983064b25b4e54c2ee9e316d5a8635</anchor>
      <arglist>(double &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>a2dc63cce40e8a756f4800f25a9c2a088</anchor>
      <arglist>(long double &amp;d)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unpack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>a2563f82c41090acc404bc024746a2b3e</anchor>
      <arglist>(char *&amp;d)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>adb91ee368e9f4c2ba5a333257f525159</anchor>
      <arglist>(const char *&amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>ae1e115a6762ca12da483855fa87f69d6</anchor>
      <arglist>(opp_string &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>adf9c6fc3c50cc922b8dc272c53eb736a</anchor>
      <arglist>(SimTime &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>abf9eefe83ac50108bfc81260b26ec64c</anchor>
      <arglist>(char *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>ac96cb7c4ddf43c3fec284e7e1ca82b30</anchor>
      <arglist>(unsigned char *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>a8ea21c2674898af1ca4fc0d0d2d5c626</anchor>
      <arglist>(bool *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>abd0aa47b37173838520340dc45e4bffe</anchor>
      <arglist>(short *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>a5d4e22da07e23cf6fb6b7c9cb74797f1</anchor>
      <arglist>(unsigned short *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>a6ffde14580afcb745061597ef6700506</anchor>
      <arglist>(int *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>afcac39d17151b03f2e1d02b2ae0e6db3</anchor>
      <arglist>(unsigned int *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>a21936c6ffee505c7b13eaf8868665f27</anchor>
      <arglist>(long *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>aa427dfd10d4575d97117c9b4bbbd08a6</anchor>
      <arglist>(unsigned long *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>a88e7911ca996f0ff53982c7cd79155cd</anchor>
      <arglist>(opp_long_long *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>a818c5d21150d2505939d4974ea137c34</anchor>
      <arglist>(opp_unsigned_long_long *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>a3e4eac0675eaa8d4c348e94b86e63a2c</anchor>
      <arglist>(float *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>a1eae90c52c114d17f6237bc75f9e76bd</anchor>
      <arglist>(double *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>ae754cf1bfb1fc9935be3c8538246bb09</anchor>
      <arglist>(long double *d, int size)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unpack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>a0cb862a9375f908e74dbc7dc2f5c7b92</anchor>
      <arglist>(char **d, int size)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>a40dc0160bbe735eacb82901df2f510bd</anchor>
      <arglist>(const char **d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>a43ca6c966b570eca4501b15c716af992</anchor>
      <arglist>(opp_string *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>a23655a816ca667ca8f7f3fa4126aa755</anchor>
      <arglist>(SimTime *d, int size)=0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>packFlag</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>aff9ccb39b4e929b8a72b4c90fdc6545f</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkFlag</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>a948809da19742357fe3f8b75f72d4d08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>packObject</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>a210a14f8be02202445a66e79142f3f8c</anchor>
      <arglist>(cObject *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>unpackObject</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>a1883240b619e95811217c7d1550596b6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cComponent</name>
    <filename>classcComponent.html</filename>
    <base>cDefaultList</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finalizeParameters</name>
      <anchorfile>classcComponent.html</anchorfile>
      <anchor>a48d55859565b5f34616adeac268040e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cComponent</name>
      <anchorfile>classcComponent.html</anchorfile>
      <anchor>a4bc7fa6f8781a636cda751dfbe285bb3</anchor>
      <arglist>(const char *name=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cComponent</name>
      <anchorfile>classcComponent.html</anchorfile>
      <anchor>a3c839245ddf3e03b79abedf77eead93e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classcComponent.html</anchorfile>
      <anchor>a942c1c9d273567b34947659151f52d76</anchor>
      <arglist>(cVisitor *v)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cProperties *</type>
      <name>getProperties</name>
      <anchorfile>classcComponent.html</anchorfile>
      <anchor>a474370c3157dbd6eb9203f8543ae40b1</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>cComponentType *</type>
      <name>getComponentType</name>
      <anchorfile>classcComponent.html</anchorfile>
      <anchor>a4908a781e9c0da8d720ed4c1a324a591</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getNedTypeName</name>
      <anchorfile>classcComponent.html</anchorfile>
      <anchor>a4c211e317ca16d4aa76f3f685ed82843</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isModule</name>
      <anchorfile>classcComponent.html</anchorfile>
      <anchor>a45d487696267e78b4424258fe0005e60</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isChannel</name>
      <anchorfile>classcComponent.html</anchorfile>
      <anchor>ad92e0f4043c24f40841087dc3ea1551b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cModule *</type>
      <name>getParentModule</name>
      <anchorfile>classcComponent.html</anchorfile>
      <anchor>a54ae9602442ca021ce8f660cd0b9969a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>cRNG *</type>
      <name>getRNG</name>
      <anchorfile>classcComponent.html</anchorfile>
      <anchor>ac4e039cdcc1e367b6ec6a2f39ab2ea56</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>callInitialize</name>
      <anchorfile>classcComponent.html</anchorfile>
      <anchor>ab164f60f671d675a83247c109b679ea8</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>callInitialize</name>
      <anchorfile>classcComponent.html</anchorfile>
      <anchor>a375336cd9e73e0067e27ef8e9b47276b</anchor>
      <arglist>(int stage)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>callFinish</name>
      <anchorfile>classcComponent.html</anchorfile>
      <anchor>a6d81bdafdf5168081513b1c139e0970b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumParams</name>
      <anchorfile>classcComponent.html</anchorfile>
      <anchor>ac5ea6541addadd46502e2107617f4ef4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPar &amp;</type>
      <name>par</name>
      <anchorfile>classcComponent.html</anchorfile>
      <anchor>a73111b3f286cc723519595a4d8d318f7</anchor>
      <arglist>(int k)</arglist>
    </member>
    <member kind="function">
      <type>const cPar &amp;</type>
      <name>par</name>
      <anchorfile>classcComponent.html</anchorfile>
      <anchor>af4876798369fb9172718eaab520ccb90</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPar &amp;</type>
      <name>par</name>
      <anchorfile>classcComponent.html</anchorfile>
      <anchor>aa856b0c8dffe0a2975f9b6e6ba1ca4a0</anchor>
      <arglist>(const char *parname)</arglist>
    </member>
    <member kind="function">
      <type>const cPar &amp;</type>
      <name>par</name>
      <anchorfile>classcComponent.html</anchorfile>
      <anchor>a62bfd9669ffbb2641d84283b447e4d49</anchor>
      <arglist>(const char *parname) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>findPar</name>
      <anchorfile>classcComponent.html</anchorfile>
      <anchor>a01b9807cc42599a4686baf0dd8cddf59</anchor>
      <arglist>(const char *parname) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasPar</name>
      <anchorfile>classcComponent.html</anchorfile>
      <anchor>ab141a27f189cdb719678436363e19ae2</anchor>
      <arglist>(const char *s) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subscribe</name>
      <anchorfile>classcComponent.html</anchorfile>
      <anchor>a4dbe8d7d2186f4aaf9aeef08837ae88a</anchor>
      <arglist>(simsignal_t signalID, cIListener *listener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subscribe</name>
      <anchorfile>classcComponent.html</anchorfile>
      <anchor>af3e503770625c2ae2bda60fe29313bd2</anchor>
      <arglist>(const char *signalName, cIListener *listener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unsubscribe</name>
      <anchorfile>classcComponent.html</anchorfile>
      <anchor>ae1dcd8ec53fffd225eb9e3a5fcaa84a8</anchor>
      <arglist>(simsignal_t signalID, cIListener *listener)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unsubscribe</name>
      <anchorfile>classcComponent.html</anchorfile>
      <anchor>a346eb92670a9f8cb40736d4a515d53ce</anchor>
      <arglist>(const char *signalName, cIListener *listener)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSubscribed</name>
      <anchorfile>classcComponent.html</anchorfile>
      <anchor>a20a4b325b28e4e3d5f4031e0cd2d9714</anchor>
      <arglist>(simsignal_t signalID, cIListener *listener) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSubscribed</name>
      <anchorfile>classcComponent.html</anchorfile>
      <anchor>a76f0fb3022ff4ebbe6ce523a83e7b982</anchor>
      <arglist>(const char *signalName, cIListener *listener) const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; simsignal_t &gt;</type>
      <name>getLocalListenedSignals</name>
      <anchorfile>classcComponent.html</anchorfile>
      <anchor>a4976aff5964c81e018dce0b08d5fd375</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; cIListener * &gt;</type>
      <name>getLocalSignalListeners</name>
      <anchorfile>classcComponent.html</anchorfile>
      <anchor>afd298dd800d2d1e31b368a74e5e89168</anchor>
      <arglist>(simsignal_t signalID) const </arglist>
    </member>
    <member kind="function">
      <type>cDisplayString &amp;</type>
      <name>getDisplayString</name>
      <anchorfile>classcComponent.html</anchorfile>
      <anchor>abc85b4eac8e4fc6dbcb91844ea6dd670</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDisplayString</name>
      <anchorfile>classcComponent.html</anchorfile>
      <anchor>aa93ee7c9ef7a94d4023a4136a1863462</anchor>
      <arglist>(const char *dispstr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bubble</name>
      <anchorfile>classcComponent.html</anchorfile>
      <anchor>a8b1160aa2bb4f94af176df5da5075afb</anchor>
      <arglist>(const char *text)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>recordScalar</name>
      <anchorfile>classcComponent.html</anchorfile>
      <anchor>a733836a2f7dec4e1fb5c659df92a35aa</anchor>
      <arglist>(const char *name, double value, const char *unit=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>recordScalar</name>
      <anchorfile>classcComponent.html</anchorfile>
      <anchor>a746b190cd1f29f19839002368f9c30b2</anchor>
      <arglist>(const char *name, SimTime value, const char *unit=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>recordStatistic</name>
      <anchorfile>classcComponent.html</anchorfile>
      <anchor>acbe4510ac31121d107799f9e787ee61c</anchor>
      <arglist>(cStatistic *stats, const char *unit=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>recordStatistic</name>
      <anchorfile>classcComponent.html</anchorfile>
      <anchor>ad1fda8896cea16029268d8dc05e204df</anchor>
      <arglist>(const char *name, cStatistic *stats, const char *unit=NULL)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classcComponent.html</anchorfile>
      <anchor>a504f2d6eb1bcd03d3ef9809648e4988f</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>classcComponent.html</anchorfile>
      <anchor>a2d9bf75f1f04462929e85e10f5f4a24d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classcComponent.html</anchorfile>
      <anchor>a0532af98c1157359b60adcb09f3fefca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>classcComponent.html</anchorfile>
      <anchor>a85912f961df471a9795d4e8454d9f6b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleParameterChange</name>
      <anchorfile>classcComponent.html</anchorfile>
      <anchor>a2c290c145b8c16e2de68def880659506</anchor>
      <arglist>(const char *parname)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>cPar</name>
      <anchorfile>classcComponent.html</anchorfile>
      <anchor>aedc4b0da4712a71be5a2369e324a3808</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>cChannel</name>
      <anchorfile>classcComponent.html</anchorfile>
      <anchor>a78a9090d8b4218b8c96cb24330ee124c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>cModule</name>
      <anchorfile>classcComponent.html</anchorfile>
      <anchor>a37aa51760d5f85b54d00668308b926c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>cGate</name>
      <anchorfile>classcComponent.html</anchorfile>
      <anchor>ad65e9293fb55c44ed30eef8b1f27df95</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emit</name>
      <anchorfile>classcComponent.html</anchorfile>
      <anchor>a29022c0570003b4722ebc58df66967eb</anchor>
      <arglist>(simsignal_t signalID, bool b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emit</name>
      <anchorfile>classcComponent.html</anchorfile>
      <anchor>ab1e3136869f00a9d71f418a26b8e1518</anchor>
      <arglist>(simsignal_t signalID, long l)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emit</name>
      <anchorfile>classcComponent.html</anchorfile>
      <anchor>ae287b4ac5b78448e62e7bab5f27b79a1</anchor>
      <arglist>(simsignal_t signalID, unsigned long l)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emit</name>
      <anchorfile>classcComponent.html</anchorfile>
      <anchor>a0d8eff13ca5cbc2302835e9cd258877a</anchor>
      <arglist>(simsignal_t signalID, double d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emit</name>
      <anchorfile>classcComponent.html</anchorfile>
      <anchor>a347fd459c6ac59452c8c05b0fb2e9693</anchor>
      <arglist>(simsignal_t signalID, const SimTime &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emit</name>
      <anchorfile>classcComponent.html</anchorfile>
      <anchor>a96e079233d2be0003ab9b498763ed451</anchor>
      <arglist>(simsignal_t signalID, const char *s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emit</name>
      <anchorfile>classcComponent.html</anchorfile>
      <anchor>a14a8e851db321f549b049a56b771c52c</anchor>
      <arglist>(simsignal_t signalID, cObject *obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emit</name>
      <anchorfile>classcComponent.html</anchorfile>
      <anchor>a2e39e13451f12feb93b532227c9e63f4</anchor>
      <arglist>(simsignal_t signalID, const cObject *obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emit</name>
      <anchorfile>classcComponent.html</anchorfile>
      <anchor>ab4d997bd8e1eb959941287ec99132c2c</anchor>
      <arglist>(simsignal_t signalID, char c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emit</name>
      <anchorfile>classcComponent.html</anchorfile>
      <anchor>a5de4de4c7246644286686b31381ad2ec</anchor>
      <arglist>(simsignal_t signalID, unsigned char c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emit</name>
      <anchorfile>classcComponent.html</anchorfile>
      <anchor>aea2c958f7575d8b88b4868297b9a70f8</anchor>
      <arglist>(simsignal_t signalID, short i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emit</name>
      <anchorfile>classcComponent.html</anchorfile>
      <anchor>ae66c6f0089ba1ad6791b645efad4d5f2</anchor>
      <arglist>(simsignal_t signalID, unsigned short i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emit</name>
      <anchorfile>classcComponent.html</anchorfile>
      <anchor>a9fbe83ee27b78dda6938c59e52fb92c8</anchor>
      <arglist>(simsignal_t signalID, int i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emit</name>
      <anchorfile>classcComponent.html</anchorfile>
      <anchor>a3da6c892f3ae3a2fdf0056c36e767372</anchor>
      <arglist>(simsignal_t signalID, unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emit</name>
      <anchorfile>classcComponent.html</anchorfile>
      <anchor>a991aeea5fc5bb8d56574c14bb77f35ba</anchor>
      <arglist>(simsignal_t signalID, float f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emit</name>
      <anchorfile>classcComponent.html</anchorfile>
      <anchor>a2dd544a2e996df1b6c6d8b0aa41659e6</anchor>
      <arglist>(simsignal_t signalID, long double d)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mayHaveListeners</name>
      <anchorfile>classcComponent.html</anchorfile>
      <anchor>ab546525a9dc8b2525fb0365310708d33</anchor>
      <arglist>(simsignal_t signalID) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasListeners</name>
      <anchorfile>classcComponent.html</anchorfile>
      <anchor>a8e2590846c81c1c78795f48e66782aec</anchor>
      <arglist>(simsignal_t signalID) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static simsignal_t</type>
      <name>registerSignal</name>
      <anchorfile>classcComponent.html</anchorfile>
      <anchor>aeaa2a3ca2cb5f2c798ff0bea82f38a91</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>getSignalName</name>
      <anchorfile>classcComponent.html</anchorfile>
      <anchor>a0fbf136a19ddb82c077261b860c562e9</anchor>
      <arglist>(simsignal_t signalID)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cComponentType</name>
    <filename>classcComponentType.html</filename>
    <base>cNoncopyableOwnedObject</base>
    <member kind="function">
      <type></type>
      <name>cComponentType</name>
      <anchorfile>classcComponentType.html</anchorfile>
      <anchor>adb9954174d495568b1a709508d401779</anchor>
      <arglist>(const char *qname=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cComponentType</name>
      <anchorfile>classcComponentType.html</anchorfile>
      <anchor>aad67ec57221b43f6deef54619241ed60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getFullName</name>
      <anchorfile>classcComponentType.html</anchorfile>
      <anchor>a4d166ac99405c7159590ec673fe97c93</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cComponentType *</type>
      <name>find</name>
      <anchorfile>classcComponentType.html</anchorfile>
      <anchor>a9e4081d00439b942b47ed56eba0c236f</anchor>
      <arglist>(const char *qname)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cComponentType *</type>
      <name>get</name>
      <anchorfile>classcComponentType.html</anchorfile>
      <anchor>a600fd49b2a44dd0800b58defaba71a0c</anchor>
      <arglist>(const char *qname)</arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>cComponent</name>
      <anchorfile>classcComponentType.html</anchorfile>
      <anchor>add0207c9829c1a1ae29f9c10cc899454</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>cModule</name>
      <anchorfile>classcComponentType.html</anchorfile>
      <anchor>a37aa51760d5f85b54d00668308b926c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>cChannel</name>
      <anchorfile>classcComponentType.html</anchorfile>
      <anchor>a78a9090d8b4218b8c96cb24330ee124c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>cPar</name>
      <anchorfile>classcComponentType.html</anchorfile>
      <anchor>aedc4b0da4712a71be5a2369e324a3808</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>cGate</name>
      <anchorfile>classcComponentType.html</anchorfile>
      <anchor>ad65e9293fb55c44ed30eef8b1f27df95</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cConfigOption</name>
    <filename>classcConfigOption.html</filename>
    <base>cNoncopyableOwnedObject</base>
    <member kind="enumeration">
      <name>Type</name>
      <anchorfile>classcConfigOption.html</anchorfile>
      <anchor>af4a1d608a199a5732612d6427aae7f95</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ObjectKind</name>
      <anchorfile>classcConfigOption.html</anchorfile>
      <anchor>a1aec918182175c547aabb03a9583ab25</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cConfigOption</name>
      <anchorfile>classcConfigOption.html</anchorfile>
      <anchor>a162b8ba125e324f4e9a7199c0772d2d8</anchor>
      <arglist>(const char *name, bool isGlobal, Type type, const char *unit, const char *defaultValue, const char *description)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cConfigOption</name>
      <anchorfile>classcConfigOption.html</anchorfile>
      <anchor>a59f1d498957a7ea53f8f10d0fb4a34dc</anchor>
      <arglist>(const char *name, ObjectKind kind, Type type, const char *unit, const char *defaultValue, const char *description)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcConfigOption.html</anchorfile>
      <anchor>aae9bcd4769e617110240286127d74a65</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPerObject</name>
      <anchorfile>classcConfigOption.html</anchorfile>
      <anchor>adc22061b028513ee43c589bc98ba5256</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isGlobal</name>
      <anchorfile>classcConfigOption.html</anchorfile>
      <anchor>ae01526646c910ab993823392b28d9b4a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ObjectKind</type>
      <name>getObjectKind</name>
      <anchorfile>classcConfigOption.html</anchorfile>
      <anchor>a25dc560dcef62bd9020e88650bf61103</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>getType</name>
      <anchorfile>classcConfigOption.html</anchorfile>
      <anchor>abdf3619deb273dccd98d8da508a6c93b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getUnit</name>
      <anchorfile>classcConfigOption.html</anchorfile>
      <anchor>a0f7be97cb070b805ce5f054115cfb2fd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getDefaultValue</name>
      <anchorfile>classcConfigOption.html</anchorfile>
      <anchor>a1cc49cee2f8a95ce63f86ab55475a30e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getDescription</name>
      <anchorfile>classcConfigOption.html</anchorfile>
      <anchor>a534e47e8225cc1ce171f77b0f54e44bc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>getObjectKindName</name>
      <anchorfile>classcConfigOption.html</anchorfile>
      <anchor>a7f128b87c80fd3f89adc8b8da733825f</anchor>
      <arglist>(ObjectKind kind)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>getTypeName</name>
      <anchorfile>classcConfigOption.html</anchorfile>
      <anchor>a451ec9059d7da5b602969b84bd3d1b84</anchor>
      <arglist>(Type type)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cConfiguration</name>
    <filename>classcConfiguration.html</filename>
    <base>cObject</base>
    <class kind="class">cConfiguration::KeyValue</class>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getConfigValue</name>
      <anchorfile>classcConfiguration.html</anchorfile>
      <anchor>a4e75eb1598d166faa65e15962cb602a6</anchor>
      <arglist>(const char *key) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const KeyValue &amp;</type>
      <name>getConfigEntry</name>
      <anchorfile>classcConfiguration.html</anchorfile>
      <anchor>a422419a036acf0223beb462720429d46</anchor>
      <arglist>(const char *key) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getPerObjectConfigValue</name>
      <anchorfile>classcConfiguration.html</anchorfile>
      <anchor>ac609e5bf2ca16f76ace0ad0ff182c219</anchor>
      <arglist>(const char *objectFullPath, const char *keySuffix) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const KeyValue &amp;</type>
      <name>getPerObjectConfigEntry</name>
      <anchorfile>classcConfiguration.html</anchorfile>
      <anchor>a348b57439ecac584f2a211e22f4d39db</anchor>
      <arglist>(const char *objectFullPath, const char *keySuffix) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAsCustom</name>
      <anchorfile>classcConfiguration.html</anchorfile>
      <anchor>ab7ba61b758f1369356291d24a76fd6ca</anchor>
      <arglist>(cConfigOption *option, const char *fallbackValue=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getAsBool</name>
      <anchorfile>classcConfiguration.html</anchorfile>
      <anchor>a97b93ac631660a7bce4168443da6f2f2</anchor>
      <arglist>(cConfigOption *option, bool fallbackValue=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>getAsInt</name>
      <anchorfile>classcConfiguration.html</anchorfile>
      <anchor>a36179c8500deae3dc169d1ca41092cac</anchor>
      <arglist>(cConfigOption *option, long fallbackValue=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getAsDouble</name>
      <anchorfile>classcConfiguration.html</anchorfile>
      <anchor>aaf91276f6d8d4a5fcab8fc1d93560290</anchor>
      <arglist>(cConfigOption *option, double fallbackValue=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getAsString</name>
      <anchorfile>classcConfiguration.html</anchorfile>
      <anchor>a234269462895b3e28bdee7f1feb06750</anchor>
      <arglist>(cConfigOption *option, const char *fallbackValue=&quot;&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getAsFilename</name>
      <anchorfile>classcConfiguration.html</anchorfile>
      <anchor>a59643097e46224c05028a0c8cb5a1c7d</anchor>
      <arglist>(cConfigOption *option)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getAsFilenames</name>
      <anchorfile>classcConfiguration.html</anchorfile>
      <anchor>af3699d41cf6044526d91963b18c36608</anchor>
      <arglist>(cConfigOption *option)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getAsPath</name>
      <anchorfile>classcConfiguration.html</anchorfile>
      <anchor>ab6f11917f3a770e9d244a1d452ee48a7</anchor>
      <arglist>(cConfigOption *option)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAsCustom</name>
      <anchorfile>classcConfiguration.html</anchorfile>
      <anchor>a1152d8016f3d9df8d6b29d366f443e14</anchor>
      <arglist>(const char *objectFullPath, cConfigOption *option, const char *fallbackValue=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getAsBool</name>
      <anchorfile>classcConfiguration.html</anchorfile>
      <anchor>a2fb1bcb97a141fe4780f9ae18a735035</anchor>
      <arglist>(const char *objectFullPath, cConfigOption *option, bool fallbackValue=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>getAsInt</name>
      <anchorfile>classcConfiguration.html</anchorfile>
      <anchor>a818f60e73533808c573d3e72166e9bb3</anchor>
      <arglist>(const char *objectFullPath, cConfigOption *option, long fallbackValue=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getAsDouble</name>
      <anchorfile>classcConfiguration.html</anchorfile>
      <anchor>aa60d21e165248b5159a8d16939998615</anchor>
      <arglist>(const char *objectFullPath, cConfigOption *option, double fallbackValue=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getAsString</name>
      <anchorfile>classcConfiguration.html</anchorfile>
      <anchor>a3be964ecc4a8b9a243b6ee6ba2ce52a8</anchor>
      <arglist>(const char *objectFullPath, cConfigOption *option, const char *fallbackValue=&quot;&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getAsFilename</name>
      <anchorfile>classcConfiguration.html</anchorfile>
      <anchor>ad0a60828e5483d019d0eb453dd44a425</anchor>
      <arglist>(const char *objectFullPath, cConfigOption *option)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getAsFilenames</name>
      <anchorfile>classcConfiguration.html</anchorfile>
      <anchor>a4ddf306154c5485f0bfff0ec3fdcae30</anchor>
      <arglist>(const char *objectFullPath, cConfigOption *option)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getAsPath</name>
      <anchorfile>classcConfiguration.html</anchorfile>
      <anchor>a6558d3c87abf2483d4c03f5bb73b5fae</anchor>
      <arglist>(const char *objectFullPath, cConfigOption *option)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>substituteVariables</name>
      <anchorfile>classcConfiguration.html</anchorfile>
      <anchor>a50aa9a4a12dc0c3686aaafc8910e7893</anchor>
      <arglist>(const char *value)=0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>parseBool</name>
      <anchorfile>classcConfiguration.html</anchorfile>
      <anchor>a98776e4af0d01849468123567f5e7991</anchor>
      <arglist>(const char *s, const char *defaultValue, bool fallbackValue=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static long</type>
      <name>parseLong</name>
      <anchorfile>classcConfiguration.html</anchorfile>
      <anchor>a654c2af985d838439b067742e756093c</anchor>
      <arglist>(const char *s, const char *defaultValue, long fallbackValue=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>parseDouble</name>
      <anchorfile>classcConfiguration.html</anchorfile>
      <anchor>a081f0a98d62c804c48b8420e8c4677cf</anchor>
      <arglist>(const char *s, const char *unit, const char *defaultValue, double fallbackValue=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>parseString</name>
      <anchorfile>classcConfiguration.html</anchorfile>
      <anchor>a11ac926ceda53c72636148fbc498f338</anchor>
      <arglist>(const char *s, const char *defaultValue, const char *fallbackValue=&quot;&quot;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>parseFilename</name>
      <anchorfile>classcConfiguration.html</anchorfile>
      <anchor>a37e4aa3465654942d9f33bb8526ae038</anchor>
      <arglist>(const char *s, const char *baseDir, const char *defaultValue)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::vector&lt; std::string &gt;</type>
      <name>parseFilenames</name>
      <anchorfile>classcConfiguration.html</anchorfile>
      <anchor>a53da6fc288311dc68181086a5c1bc37f</anchor>
      <arglist>(const char *s, const char *baseDir, const char *defaultValue)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>adjustPath</name>
      <anchorfile>classcConfiguration.html</anchorfile>
      <anchor>aa9895f330121939599222d527d05be41</anchor>
      <arglist>(const char *s, const char *baseDir, const char *defaultValue)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cConfiguration::KeyValue</name>
    <filename>classcConfiguration_1_1KeyValue.html</filename>
  </compound>
  <compound kind="class">
    <name>cConfigurationEx</name>
    <filename>classcConfigurationEx.html</filename>
    <base>cConfiguration</base>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>initializeFrom</name>
      <anchorfile>classcConfigurationEx.html</anchorfile>
      <anchor>a6219a192d2da4ba21c7d1b4dcd4cc593</anchor>
      <arglist>(cConfiguration *bootConfig)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getFileName</name>
      <anchorfile>classcConfigurationEx.html</anchorfile>
      <anchor>a53f5a4ebc6feadb8131003c05015ef22</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>validate</name>
      <anchorfile>classcConfigurationEx.html</anchorfile>
      <anchor>ad80ffa7651982fe30377eafc8190f0ee</anchor>
      <arglist>(const char *ignorableConfigKeys=NULL) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getConfigNames</name>
      <anchorfile>classcConfigurationEx.html</anchorfile>
      <anchor>abb4af41200f2c29413d7b6ead81809bd</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>activateConfig</name>
      <anchorfile>classcConfigurationEx.html</anchorfile>
      <anchor>a3999f7c140af876bea003d2a57a8087b</anchor>
      <arglist>(const char *configName, int runNumber=0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getConfigDescription</name>
      <anchorfile>classcConfigurationEx.html</anchorfile>
      <anchor>a7a2407f52b8ae29056410738b4014f97</anchor>
      <arglist>(const char *configName) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getBaseConfigs</name>
      <anchorfile>classcConfigurationEx.html</anchorfile>
      <anchor>a12e8c2759e69970753d864b8725c8c8a</anchor>
      <arglist>(const char *configName) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getConfigChain</name>
      <anchorfile>classcConfigurationEx.html</anchorfile>
      <anchor>aef5eaa95d39a875e56c5c4997fd5e14b</anchor>
      <arglist>(const char *configName) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumRunsInConfig</name>
      <anchorfile>classcConfigurationEx.html</anchorfile>
      <anchor>a0419ce4a506536c68caa405652aeba4a</anchor>
      <arglist>(const char *configName) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>unrollConfig</name>
      <anchorfile>classcConfigurationEx.html</anchorfile>
      <anchor>a7da7e6b65c1683e2366e0d768b6bbb3a</anchor>
      <arglist>(const char *configName, bool detailed=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getActiveConfigName</name>
      <anchorfile>classcConfigurationEx.html</anchorfile>
      <anchor>af520190b3030ac10320f9e846abbd299</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getActiveRunNumber</name>
      <anchorfile>classcConfigurationEx.html</anchorfile>
      <anchor>abe3819f5f7c2dafc56a1c5696970dbb5</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getVariable</name>
      <anchorfile>classcConfigurationEx.html</anchorfile>
      <anchor>ad113c55058b4b76b15b12bb8a0ecc3e4</anchor>
      <arglist>(const char *varname) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; const char * &gt;</type>
      <name>getIterationVariableNames</name>
      <anchorfile>classcConfigurationEx.html</anchorfile>
      <anchor>a063562a777a4a289e047562b2ad84770</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; const char * &gt;</type>
      <name>getPredefinedVariableNames</name>
      <anchorfile>classcConfigurationEx.html</anchorfile>
      <anchor>ae7df0a851369834ccf36756dd35b9b79</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getVariableDescription</name>
      <anchorfile>classcConfigurationEx.html</anchorfile>
      <anchor>ab90157b72cce3271bbd524d47f854ec6</anchor>
      <arglist>(const char *varname) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>dump</name>
      <anchorfile>classcConfigurationEx.html</anchorfile>
      <anchor>a8e4e9aa97906d14cd9176daa58a6de23</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; const char * &gt;</type>
      <name>getMatchingConfigKeys</name>
      <anchorfile>classcConfigurationEx.html</anchorfile>
      <anchor>a5f1a932741e6c421841e1b3aadbac658</anchor>
      <arglist>(const char *pattern) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getParameterValue</name>
      <anchorfile>classcConfigurationEx.html</anchorfile>
      <anchor>a99fe8f60d26d82843a7fb4c1a04e72c1</anchor>
      <arglist>(const char *moduleFullPath, const char *paramName, bool hasDefaultValue) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const KeyValue &amp;</type>
      <name>getParameterEntry</name>
      <anchorfile>classcConfigurationEx.html</anchorfile>
      <anchor>a8b9a225e12b5e641c09222c87408cfb8</anchor>
      <arglist>(const char *moduleFullPath, const char *paramName, bool hasDefaultValue) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; const char * &gt;</type>
      <name>getParameterKeyValuePairs</name>
      <anchorfile>classcConfigurationEx.html</anchorfile>
      <anchor>a9dfa0fb53c73abf7f72136b373b56eb2</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; const char * &gt;</type>
      <name>getMatchingPerObjectConfigKeys</name>
      <anchorfile>classcConfigurationEx.html</anchorfile>
      <anchor>ad04f8031163c8e61130f7e8ca71d80b0</anchor>
      <arglist>(const char *objectFullPath, const char *keySuffixPattern) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; const char * &gt;</type>
      <name>getMatchingPerObjectConfigKeySuffixes</name>
      <anchorfile>classcConfigurationEx.html</anchorfile>
      <anchor>a93444b7c7828e635ce4c112b509bf798</anchor>
      <arglist>(const char *objectFullPath, const char *keySuffixPattern) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cConfigurationReader</name>
    <filename>classcConfigurationReader.html</filename>
    <class kind="class">cConfigurationReader::KeyValue</class>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cConfigurationReader</name>
      <anchorfile>classcConfigurationReader.html</anchorfile>
      <anchor>a5dda01605e3993308984760ea500d2c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>initializeFrom</name>
      <anchorfile>classcConfigurationReader.html</anchorfile>
      <anchor>a8180537a3b2500d87624e72687c2e95c</anchor>
      <arglist>(cConfiguration *bootConfig)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getFileName</name>
      <anchorfile>classcConfigurationReader.html</anchorfile>
      <anchor>a83c5454ef0e546f36c2a6b3562df147c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getDefaultBaseDirectory</name>
      <anchorfile>classcConfigurationReader.html</anchorfile>
      <anchor>ad25bf3875bc1a766d419b8c1e553aa55</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumSections</name>
      <anchorfile>classcConfigurationReader.html</anchorfile>
      <anchor>ad205282583910e61aea898655f9c4988</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getSectionName</name>
      <anchorfile>classcConfigurationReader.html</anchorfile>
      <anchor>a597ac6b1b8e4bc7dfc77e353e46fa7a1</anchor>
      <arglist>(int sectionId) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumEntries</name>
      <anchorfile>classcConfigurationReader.html</anchorfile>
      <anchor>aff1d72f3c47d553c7eb9f12bb42532c2</anchor>
      <arglist>(int sectionId) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const KeyValue &amp;</type>
      <name>getEntry</name>
      <anchorfile>classcConfigurationReader.html</anchorfile>
      <anchor>a709811a76209cf8c9b8b87264155c019</anchor>
      <arglist>(int sectionId, int entryId) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>dump</name>
      <anchorfile>classcConfigurationReader.html</anchorfile>
      <anchor>af1427ab686b3e311b603318d027328c7</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cConfigurationReader::KeyValue</name>
    <filename>classcConfigurationReader_1_1KeyValue.html</filename>
  </compound>
  <compound kind="class">
    <name>cContextSwitcher</name>
    <filename>classcContextSwitcher.html</filename>
    <member kind="function">
      <type></type>
      <name>cContextSwitcher</name>
      <anchorfile>classcContextSwitcher.html</anchorfile>
      <anchor>a265548d306222dfad827174d9acbcb25</anchor>
      <arglist>(const cComponent *newContext)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~cContextSwitcher</name>
      <anchorfile>classcContextSwitcher.html</anchorfile>
      <anchor>a5056b1a3508c8b80b63a8d2169066568</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cContextTypeSwitcher</name>
    <filename>classcContextTypeSwitcher.html</filename>
    <member kind="function">
      <type></type>
      <name>cContextTypeSwitcher</name>
      <anchorfile>classcContextTypeSwitcher.html</anchorfile>
      <anchor>ad6bb42958c02c7f271340a51ee3313ce</anchor>
      <arglist>(int contexttype)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~cContextTypeSwitcher</name>
      <anchorfile>classcContextTypeSwitcher.html</anchorfile>
      <anchor>afcfb9d1c7e70d0a167b9555ee715d2a2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cCoroutine</name>
    <filename>classcCoroutine.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>setup</name>
      <anchorfile>classcCoroutine.html</anchorfile>
      <anchor>aa28d47689379f53aada0130ddf07bb4a</anchor>
      <arglist>(CoroutineFnp fnp, void *arg, unsigned stack_size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cCoroutine</name>
      <anchorfile>classcCoroutine.html</anchorfile>
      <anchor>a03978af1f95966a51d3a09a1446fd863</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cCoroutine</name>
      <anchorfile>classcCoroutine.html</anchorfile>
      <anchor>ae66f141d8beb3fffb207dba791d02c0e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasStackOverflow</name>
      <anchorfile>classcCoroutine.html</anchorfile>
      <anchor>ad9ca3ee1464887f1c5110049e3223724</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned</type>
      <name>getStackSize</name>
      <anchorfile>classcCoroutine.html</anchorfile>
      <anchor>ae62aba6c90f2f5d567b7ad3ab0723430</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned</type>
      <name>getStackUsage</name>
      <anchorfile>classcCoroutine.html</anchorfile>
      <anchor>a688104a83d103cd8e4c5940dead58ade</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>init</name>
      <anchorfile>classcCoroutine.html</anchorfile>
      <anchor>a8362bdfd9b2744f9737b0a2a8b869b22</anchor>
      <arglist>(unsigned total_stack, unsigned main_stack)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>switchTo</name>
      <anchorfile>classcCoroutine.html</anchorfile>
      <anchor>a51453982a5de8246527593b960dbcb6c</anchor>
      <arglist>(cCoroutine *cor)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>switchToMain</name>
      <anchorfile>classcCoroutine.html</anchorfile>
      <anchor>a9499edcba31be69a71dbe33ea22815c1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cDatarateChannel</name>
    <filename>classcDatarateChannel.html</filename>
    <base>cChannel</base>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcDatarateChannel.html</anchorfile>
      <anchor>a0d839b648f54db5e7d06327b96916410</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isTransmissionChannel</name>
      <anchorfile>classcDatarateChannel.html</anchorfile>
      <anchor>a42f064d4dbdd1bafc98efbf95e565fe3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDelay</name>
      <anchorfile>classcDatarateChannel.html</anchorfile>
      <anchor>a832b852215eacc6eff09c92578386640</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDatarate</name>
      <anchorfile>classcDatarateChannel.html</anchorfile>
      <anchor>a6bf36cbb51ce69728dd61c0bf4af9d16</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBitErrorRate</name>
      <anchorfile>classcDatarateChannel.html</anchorfile>
      <anchor>aa591b910a7d26c263b012aaf6c884c15</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPacketErrorRate</name>
      <anchorfile>classcDatarateChannel.html</anchorfile>
      <anchor>a8e4698c4b2b004f74e29732576129bde</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDisabled</name>
      <anchorfile>classcDatarateChannel.html</anchorfile>
      <anchor>aea134acf63b3ef25d73d74eb94af63c7</anchor>
      <arglist>(bool d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getDelay</name>
      <anchorfile>classcDatarateChannel.html</anchorfile>
      <anchor>a36da3c9f61815e78f1bec99d05711b9b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getDatarate</name>
      <anchorfile>classcDatarateChannel.html</anchorfile>
      <anchor>ade8bc64055ddcd9e5e0aa346cc8c0390</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getBitErrorRate</name>
      <anchorfile>classcDatarateChannel.html</anchorfile>
      <anchor>ad16da50561800b2059dd99a23c3af65d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getPacketErrorRate</name>
      <anchorfile>classcDatarateChannel.html</anchorfile>
      <anchor>a01386e05d53c8bbdc61bfb5f99247f99</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isDisabled</name>
      <anchorfile>classcDatarateChannel.html</anchorfile>
      <anchor>a1863892f29767d4968ec4de967f1c390</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getNominalDatarate</name>
      <anchorfile>classcDatarateChannel.html</anchorfile>
      <anchor>ae80d1af91d5e77ca6871cb70a5448f4f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>calculateDuration</name>
      <anchorfile>classcDatarateChannel.html</anchorfile>
      <anchor>a6054f82dca4323c1af69f4b21e1d779c</anchor>
      <arglist>(cMessage *msg) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getTransmissionFinishTime</name>
      <anchorfile>classcDatarateChannel.html</anchorfile>
      <anchor>a6553db55a3067ea41ea1a6334de75fdb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isBusy</name>
      <anchorfile>classcDatarateChannel.html</anchorfile>
      <anchor>add1bf37e817e8bf785e0eab5f59e2a24</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forceTransmissionFinishTime</name>
      <anchorfile>classcDatarateChannel.html</anchorfile>
      <anchor>a23d9c8bdf8a440c642078162fb1cb240</anchor>
      <arglist>(simtime_t t)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classcDatarateChannel.html</anchorfile>
      <anchor>a276435093966c29795d757ffe03ce4be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>processMessage</name>
      <anchorfile>classcDatarateChannel.html</anchorfile>
      <anchor>a483b06c3f71bf4dcb4a0387883ef6b45</anchor>
      <arglist>(cMessage *msg, simtime_t t, result_t &amp;result)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleParameterChange</name>
      <anchorfile>classcDatarateChannel.html</anchorfile>
      <anchor>a2ac0771fe54446fd174401f589c1aaba</anchor>
      <arglist>(const char *parname)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cDatarateChannel</name>
      <anchorfile>classcDatarateChannel.html</anchorfile>
      <anchor>a3d755d851b1a9d16f7b4ca6df952bc96</anchor>
      <arglist>(const char *name=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cDatarateChannel</name>
      <anchorfile>classcDatarateChannel.html</anchorfile>
      <anchor>a8119da7d5c3148dcc2156d522c68fada</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cDatarateChannel *</type>
      <name>create</name>
      <anchorfile>classcDatarateChannel.html</anchorfile>
      <anchor>a1d93fb2f1976f781ec5e6dfe4da63651</anchor>
      <arglist>(const char *name)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cDefaultList</name>
    <filename>classcDefaultList.html</filename>
    <base>cNoncopyableOwnedObject</base>
    <member kind="function">
      <type></type>
      <name>cDefaultList</name>
      <anchorfile>classcDefaultList.html</anchorfile>
      <anchor>a9b6484c0b4e09bb6fe0978d66e9838da</anchor>
      <arglist>(const char *name=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cDefaultList</name>
      <anchorfile>classcDefaultList.html</anchorfile>
      <anchor>a77554c9768e0e7ebb0766de8a9e65b5a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isSoftOwner</name>
      <anchorfile>classcDefaultList.html</anchorfile>
      <anchor>ac0afe692f964fae517dd3566458b306e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcDefaultList.html</anchorfile>
      <anchor>a5e4a58b629cfdd7e238fb87615c0bd06</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classcDefaultList.html</anchorfile>
      <anchor>a7b8e50f507960865cd7abc7a53d5eaec</anchor>
      <arglist>(cVisitor *v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classcDefaultList.html</anchorfile>
      <anchor>abd755e89f8b1ec7b62285e504c4ffa7e</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classcDefaultList.html</anchorfile>
      <anchor>a60fadb9973d3e9574b1263485219b98f</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getPerformFinalGC</name>
      <anchorfile>classcDefaultList.html</anchorfile>
      <anchor>aa7f0180ad54439015e40d83c8817f99c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPerformFinalGC</name>
      <anchorfile>classcDefaultList.html</anchorfile>
      <anchor>a1c5cdb3a149168089bac49063683a861</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>defaultListSize</name>
      <anchorfile>classcDefaultList.html</anchorfile>
      <anchor>a73b05ebbb99f2ba9255e6279f57812ca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cOwnedObject *</type>
      <name>defaultListGet</name>
      <anchorfile>classcDefaultList.html</anchorfile>
      <anchor>ab8b83def9def5aa2fb7df59e5f29457f</anchor>
      <arglist>(int k)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>defaultListContains</name>
      <anchorfile>classcDefaultList.html</anchorfile>
      <anchor>a870a312fd08197603db7565fdf2b6e6f</anchor>
      <arglist>(cOwnedObject *obj) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>take</name>
      <anchorfile>classcDefaultList.html</anchorfile>
      <anchor>af405aafaa28a558018d7f3966154a437</anchor>
      <arglist>(cOwnedObject *obj)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>drop</name>
      <anchorfile>classcDefaultList.html</anchorfile>
      <anchor>ab39936ea71102303d81cceb856bbbf21</anchor>
      <arglist>(cOwnedObject *obj)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>cObject</name>
      <anchorfile>classcDefaultList.html</anchorfile>
      <anchor>a2f1e5d0432ca9dc331362760416b2b20</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>cOwnedObject</name>
      <anchorfile>classcDefaultList.html</anchorfile>
      <anchor>a211f8296c58dede811fa2264079fb5a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>cChannelType</name>
      <anchorfile>classcDefaultList.html</anchorfile>
      <anchor>a34161f0247581027e5e313d34f76fdbf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cDelayChannel</name>
    <filename>classcDelayChannel.html</filename>
    <base>cChannel</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isTransmissionChannel</name>
      <anchorfile>classcDelayChannel.html</anchorfile>
      <anchor>ac3a4ceb39162437a7bc24860fb0bbf88</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getNominalDatarate</name>
      <anchorfile>classcDelayChannel.html</anchorfile>
      <anchor>aeef2c5466aa78bfb00ee31e84aa82647</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>calculateDuration</name>
      <anchorfile>classcDelayChannel.html</anchorfile>
      <anchor>adfaac5b6af8df6bab0fccc29140055ca</anchor>
      <arglist>(cMessage *msg) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getTransmissionFinishTime</name>
      <anchorfile>classcDelayChannel.html</anchorfile>
      <anchor>a90a54ac1ffe4a4731b8540170cf3d4a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isBusy</name>
      <anchorfile>classcDelayChannel.html</anchorfile>
      <anchor>a9c3c1a54a6e7c94e685d202c3e04df52</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forceTransmissionFinishTime</name>
      <anchorfile>classcDelayChannel.html</anchorfile>
      <anchor>aaf8473a5baae93c65927973d259c3570</anchor>
      <arglist>(simtime_t t)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDelay</name>
      <anchorfile>classcDelayChannel.html</anchorfile>
      <anchor>af4ce2f4c89bbe00cdc07492c1fce04f7</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDisabled</name>
      <anchorfile>classcDelayChannel.html</anchorfile>
      <anchor>a941c6f5305c9dc18b56f4e24f0f88e0a</anchor>
      <arglist>(bool d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getDelay</name>
      <anchorfile>classcDelayChannel.html</anchorfile>
      <anchor>a62fb771dc7b3b80c861bfcee63617f61</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isDisabled</name>
      <anchorfile>classcDelayChannel.html</anchorfile>
      <anchor>a4c68c8d2cb0afd72aa0739f1857b4c8e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classcDelayChannel.html</anchorfile>
      <anchor>a5d6f2fe4e9fef7d3ae92c19cea9bc8e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>processMessage</name>
      <anchorfile>classcDelayChannel.html</anchorfile>
      <anchor>a3141f05b336a7f35aeb9180975677862</anchor>
      <arglist>(cMessage *msg, simtime_t t, result_t &amp;result)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleParameterChange</name>
      <anchorfile>classcDelayChannel.html</anchorfile>
      <anchor>ae9ece70c6f3c38ffb458ab6db0c07175</anchor>
      <arglist>(const char *parname)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cDelayChannel</name>
      <anchorfile>classcDelayChannel.html</anchorfile>
      <anchor>ac54e44ef6377e7e23bfb02f8b66297a0</anchor>
      <arglist>(const char *name=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cDelayChannel</name>
      <anchorfile>classcDelayChannel.html</anchorfile>
      <anchor>a13c7615bb7b5fce0bfdb3612c29f3176</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cDelayChannel *</type>
      <name>create</name>
      <anchorfile>classcDelayChannel.html</anchorfile>
      <anchor>ad615fe90f69272fce2b15ed94d02ad04</anchor>
      <arglist>(const char *name)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cDeleteModuleException</name>
    <filename>classcDeleteModuleException.html</filename>
    <base>cException</base>
    <member kind="function">
      <type></type>
      <name>cDeleteModuleException</name>
      <anchorfile>classcDeleteModuleException.html</anchorfile>
      <anchor>a8d5f2d140f7dc42fa2d99f3169c2a6d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cDeleteModuleException</name>
      <anchorfile>classcDeleteModuleException.html</anchorfile>
      <anchor>ae1d6382243c3b16abbb9e9d02b9da9a2</anchor>
      <arglist>(const cDeleteModuleException &amp;e)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cDeleteModuleException *</type>
      <name>dup</name>
      <anchorfile>classcDeleteModuleException.html</anchorfile>
      <anchor>a66df169476c0f09ae5a66bd3616c6143</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isError</name>
      <anchorfile>classcDeleteModuleException.html</anchorfile>
      <anchor>a69946544e7468f833e5526a4478746a4</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cDensityEstBase</name>
    <filename>classcDensityEstBase.html</filename>
    <base>cStdDev</base>
    <class kind="struct">cDensityEstBase::Cell</class>
    <member kind="enumeration">
      <name>RangeMode</name>
      <anchorfile>classcDensityEstBase.html</anchorfile>
      <anchor>ab8f2a313481c3f2a71e2b6a5c378ad15</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cDensityEstBase</name>
      <anchorfile>classcDensityEstBase.html</anchorfile>
      <anchor>adeeed67fecc4948ada7fef8790d18390</anchor>
      <arglist>(const cDensityEstBase &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cDensityEstBase</name>
      <anchorfile>classcDensityEstBase.html</anchorfile>
      <anchor>a3ef33e6159be8e30b787cc4ddfa5c3df</anchor>
      <arglist>(const char *name=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cDensityEstBase</name>
      <anchorfile>classcDensityEstBase.html</anchorfile>
      <anchor>a7008aa31dccc7341dab9ad85b7b47706</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cDensityEstBase &amp;</type>
      <name>operator=</name>
      <anchorfile>classcDensityEstBase.html</anchorfile>
      <anchor>af7e026238ca85b60f1b7f35a0b6e5949</anchor>
      <arglist>(const cDensityEstBase &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>detailedInfo</name>
      <anchorfile>classcDensityEstBase.html</anchorfile>
      <anchor>a4ad20050d422758c01875c3592d51dc9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classcDensityEstBase.html</anchorfile>
      <anchor>af6143d6dd2aea1da04485ff0ee09eb74</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classcDensityEstBase.html</anchorfile>
      <anchor>a163a398a7ec4fe23689cba694c40be14</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collect</name>
      <anchorfile>classcDensityEstBase.html</anchorfile>
      <anchor>a4f7bed2a99f10d479a529b7f7f3bc797</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collect</name>
      <anchorfile>classcDensityEstBase.html</anchorfile>
      <anchor>a10f030f4bd05a5a1b8439d1b1ebef86c</anchor>
      <arglist>(SimTime value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>merge</name>
      <anchorfile>classcDensityEstBase.html</anchorfile>
      <anchor>a9b578517043c3b87b8e643123d6af2f1</anchor>
      <arglist>(const cStatistic *other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clearResult</name>
      <anchorfile>classcDensityEstBase.html</anchorfile>
      <anchor>a09271f6e748cfaa4f42a9a0f4e55b735</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>saveToFile</name>
      <anchorfile>classcDensityEstBase.html</anchorfile>
      <anchor>af6232fde1963e8f2f26eddf70a32980d</anchor>
      <arglist>(FILE *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>loadFromFile</name>
      <anchorfile>classcDensityEstBase.html</anchorfile>
      <anchor>aeb768aa8f647a94acb2eb889a9c52825</anchor>
      <arglist>(FILE *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRange</name>
      <anchorfile>classcDensityEstBase.html</anchorfile>
      <anchor>a8eb5cea3b1bcda29076171b07a9325b9</anchor>
      <arglist>(double lower, double upper)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRangeAuto</name>
      <anchorfile>classcDensityEstBase.html</anchorfile>
      <anchor>a9b70b4e03a497f5833ac90d3a4a988ef</anchor>
      <arglist>(int num_firstvals=100, double range_ext_fact=2.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRangeAutoLower</name>
      <anchorfile>classcDensityEstBase.html</anchorfile>
      <anchor>acb10286bad9070f82d7a746800359fff</anchor>
      <arglist>(double upper, int num_firstvals=100, double range_ext_fact=2.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRangeAutoUpper</name>
      <anchorfile>classcDensityEstBase.html</anchorfile>
      <anchor>af3f765ec36b3e8f9ae66303be25e297c</anchor>
      <arglist>(double lower, int num_firstvals=100, double range_ext_fact=2.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNumFirstVals</name>
      <anchorfile>classcDensityEstBase.html</anchorfile>
      <anchor>a3084764bfa576847fc5b976bfaad8ef5</anchor>
      <arglist>(int num_firstvals)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumFirstVals</name>
      <anchorfile>classcDensityEstBase.html</anchorfile>
      <anchor>a9df0b8b5edd5ebdbfc3d82d199385230</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getRangeExtensionFactor</name>
      <anchorfile>classcDensityEstBase.html</anchorfile>
      <anchor>ad29aacfa32670c245e2eee71893fc1a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isTransformed</name>
      <anchorfile>classcDensityEstBase.html</anchorfile>
      <anchor>a49d7670f9cd111ae2d7fc857c306b202</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>transform</name>
      <anchorfile>classcDensityEstBase.html</anchorfile>
      <anchor>a05869a439ce93498ff14c6b727280f60</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumCells</name>
      <anchorfile>classcDensityEstBase.html</anchorfile>
      <anchor>a553db21ce3d406e488409dba52ef9838</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getBasepoint</name>
      <anchorfile>classcDensityEstBase.html</anchorfile>
      <anchor>aa4f59ad92648bd41ea4e549979ff9c73</anchor>
      <arglist>(int k) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getCellValue</name>
      <anchorfile>classcDensityEstBase.html</anchorfile>
      <anchor>af9178a88fcc6359fd58be385526d661e</anchor>
      <arglist>(int k) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getCellPDF</name>
      <anchorfile>classcDensityEstBase.html</anchorfile>
      <anchor>aa8f78779f86e183963319700f12b54ab</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned long</type>
      <name>getUnderflowCell</name>
      <anchorfile>classcDensityEstBase.html</anchorfile>
      <anchor>a4be9b3562dd3605ded5a203b1c45d255</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned long</type>
      <name>getOverflowCell</name>
      <anchorfile>classcDensityEstBase.html</anchorfile>
      <anchor>a639e3e4c00050b1b2dd16cafd07a21e3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Cell</type>
      <name>getCellInfo</name>
      <anchorfile>classcDensityEstBase.html</anchorfile>
      <anchor>a1a4f269e4677fce9d3a5d6bab637a120</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getPDF</name>
      <anchorfile>classcDensityEstBase.html</anchorfile>
      <anchor>acbac62c0b9868e7bf3a45ba372d35f93</anchor>
      <arglist>(double x) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getCDF</name>
      <anchorfile>classcDensityEstBase.html</anchorfile>
      <anchor>afdfb4e1a663b137f80d17090b24f639c</anchor>
      <arglist>(double x) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setupRange</name>
      <anchorfile>classcDensityEstBase.html</anchorfile>
      <anchor>a812b20ff3cebc9bffe7e5e3c43b17606</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>collectTransformed</name>
      <anchorfile>classcDensityEstBase.html</anchorfile>
      <anchor>a6f16a894e72fd2d38947cedbc49abdb8</anchor>
      <arglist>(double value)=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cDensityEstBase::Cell</name>
    <filename>structcDensityEstBase_1_1Cell.html</filename>
  </compound>
  <compound kind="class">
    <name>cDisplayString</name>
    <filename>classcDisplayString.html</filename>
    <member kind="function">
      <type></type>
      <name>cDisplayString</name>
      <anchorfile>classcDisplayString.html</anchorfile>
      <anchor>a94dc5c44e19695015b7bf5e555fdd91f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cDisplayString</name>
      <anchorfile>classcDisplayString.html</anchorfile>
      <anchor>ab2f783c8490e6be2cf847c6ff4e7e7ab</anchor>
      <arglist>(const char *dispstr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cDisplayString</name>
      <anchorfile>classcDisplayString.html</anchorfile>
      <anchor>a1da2c61cefdb5510c9e41cb930bc1118</anchor>
      <arglist>(const cDisplayString &amp;ds)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~cDisplayString</name>
      <anchorfile>classcDisplayString.html</anchorfile>
      <anchor>a36172a0dd326bb71eae7ea8e8e75f5cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cDisplayString &amp;</type>
      <name>operator=</name>
      <anchorfile>classcDisplayString.html</anchorfile>
      <anchor>ad707911a30a822f1b0958e03f55135cc</anchor>
      <arglist>(const cDisplayString &amp;ds)</arglist>
    </member>
    <member kind="function">
      <type>cDisplayString &amp;</type>
      <name>operator=</name>
      <anchorfile>classcDisplayString.html</anchorfile>
      <anchor>a7261a5aa65b62b49c2dabd5b9a00bacc</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const char *</name>
      <anchorfile>classcDisplayString.html</anchorfile>
      <anchor>a2e99754610155d472f6c7e74ec325059</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>str</name>
      <anchorfile>classcDisplayString.html</anchorfile>
      <anchor>a9db3ed698df31d2766bf17cb9410ee26</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classcDisplayString.html</anchorfile>
      <anchor>a417e96c5548166c448754fd0f638ff97</anchor>
      <arglist>(const char *displaystr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parse</name>
      <anchorfile>classcDisplayString.html</anchorfile>
      <anchor>aec782f16f40102d1506cb6c35dbf77f2</anchor>
      <arglist>(const char *displaystr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateWith</name>
      <anchorfile>classcDisplayString.html</anchorfile>
      <anchor>aab21a409db377deb6bd1ddc631aaac98</anchor>
      <arglist>(const cDisplayString &amp;ds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateWith</name>
      <anchorfile>classcDisplayString.html</anchorfile>
      <anchor>a3052bd34b6fe1682b909d11b37aecc0d</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsTag</name>
      <anchorfile>classcDisplayString.html</anchorfile>
      <anchor>adaa80085d373059f7f1d46588eda28c8</anchor>
      <arglist>(const char *tagname) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumArgs</name>
      <anchorfile>classcDisplayString.html</anchorfile>
      <anchor>a1ac0e5587ab9b333d277cb6a6d0e021f</anchor>
      <arglist>(const char *tagname) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getTagArg</name>
      <anchorfile>classcDisplayString.html</anchorfile>
      <anchor>abc04d7dedcd472d6c9b60cd9c2bb308e</anchor>
      <arglist>(const char *tagname, int index) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setTagArg</name>
      <anchorfile>classcDisplayString.html</anchorfile>
      <anchor>ae021b0e1e95b8da261455a66f286e7ab</anchor>
      <arglist>(const char *tagname, int index, const char *value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setTagArg</name>
      <anchorfile>classcDisplayString.html</anchorfile>
      <anchor>ac5a4fdce91f1f57bb0069dc30d8dda51</anchor>
      <arglist>(const char *tagname, int index, long value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeTag</name>
      <anchorfile>classcDisplayString.html</anchorfile>
      <anchor>a1dc728c962fac76dc8cee62432f23088</anchor>
      <arglist>(const char *tagname)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumTags</name>
      <anchorfile>classcDisplayString.html</anchorfile>
      <anchor>a930b6cb06cbfbed8b5e72d0a5d25ff4d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getTagName</name>
      <anchorfile>classcDisplayString.html</anchorfile>
      <anchor>a00dc38dbce45f88d46c4b38d2ec932bf</anchor>
      <arglist>(int tagindex) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTagIndex</name>
      <anchorfile>classcDisplayString.html</anchorfile>
      <anchor>a7273d557d96e1d201acf3169ad709aae</anchor>
      <arglist>(const char *tagname) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumArgs</name>
      <anchorfile>classcDisplayString.html</anchorfile>
      <anchor>a17ed49dcfed48d6cc713d9bfe0a86bc8</anchor>
      <arglist>(int tagindex) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getTagArg</name>
      <anchorfile>classcDisplayString.html</anchorfile>
      <anchor>a65bdeb7e71d3710efc07f08b692392e6</anchor>
      <arglist>(int tagindex, int index) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setTagArg</name>
      <anchorfile>classcDisplayString.html</anchorfile>
      <anchor>aa9177564c5fac3253993643a86e5a125</anchor>
      <arglist>(int tagindex, int index, const char *value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insertTag</name>
      <anchorfile>classcDisplayString.html</anchorfile>
      <anchor>a5b304e6cdd2c0d06059ebdb6a57dde9c</anchor>
      <arglist>(const char *tagname, int atindex=0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeTag</name>
      <anchorfile>classcDisplayString.html</anchorfile>
      <anchor>ae85d8c3b15be88e758f01f3cad4ce60c</anchor>
      <arglist>(int tagindex)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cDoubleHistogram</name>
    <filename>classcDoubleHistogram.html</filename>
    <base>cHistogram</base>
    <member kind="function">
      <type></type>
      <name>cDoubleHistogram</name>
      <anchorfile>classcDoubleHistogram.html</anchorfile>
      <anchor>a4cb00dacbf4db66a9e31b6cf3a824671</anchor>
      <arglist>(const cDoubleHistogram &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cDoubleHistogram</name>
      <anchorfile>classcDoubleHistogram.html</anchorfile>
      <anchor>a2e76eab4e146f4f610a8f73be08068f8</anchor>
      <arglist>(const char *name=NULL, int numcells=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cDoubleHistogram</name>
      <anchorfile>classcDoubleHistogram.html</anchorfile>
      <anchor>adc46521da522c3b0c3d7607c30044abe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cDoubleHistogram &amp;</type>
      <name>operator=</name>
      <anchorfile>classcDoubleHistogram.html</anchorfile>
      <anchor>a3d5fe7593d0716fc5a55a56f9b1eb582</anchor>
      <arglist>(const cDoubleHistogram &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cDoubleHistogram *</type>
      <name>dup</name>
      <anchorfile>classcDoubleHistogram.html</anchorfile>
      <anchor>aae2da431a13be1491a09852e299f94a5</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cDoubleParImpl</name>
    <filename>classcDoubleParImpl.html</filename>
    <base>cParImpl</base>
    <member kind="function">
      <type></type>
      <name>cDoubleParImpl</name>
      <anchorfile>classcDoubleParImpl.html</anchorfile>
      <anchor>ad43c975e843dae719892ba17f839c37e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cDoubleParImpl</name>
      <anchorfile>classcDoubleParImpl.html</anchorfile>
      <anchor>aebce4473e4613397d5087e0242b764a3</anchor>
      <arglist>(const cDoubleParImpl &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cDoubleParImpl</name>
      <anchorfile>classcDoubleParImpl.html</anchorfile>
      <anchor>a794122614b4da323ec7e34e43af08846</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classcDoubleParImpl.html</anchorfile>
      <anchor>a6836e7d3e9a1aaabf4a7b5d7c03146ad</anchor>
      <arglist>(const cDoubleParImpl &amp;otherpar)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cDoubleParImpl *</type>
      <name>dup</name>
      <anchorfile>classcDoubleParImpl.html</anchorfile>
      <anchor>a15775323817bf4fe27b9a2ec0b61e97f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classcDoubleParImpl.html</anchorfile>
      <anchor>a8eb7d2c1b213af30e91ddb77f15c0bcb</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classcDoubleParImpl.html</anchorfile>
      <anchor>a70e3d975e75528b2b68cd54993d461b8</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBoolValue</name>
      <anchorfile>classcDoubleParImpl.html</anchorfile>
      <anchor>a73571d3ffbb360255c45d8b8ae844e89</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLongValue</name>
      <anchorfile>classcDoubleParImpl.html</anchorfile>
      <anchor>a08b4046979d33eaae16d3ee278a0ed8f</anchor>
      <arglist>(long l)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDoubleValue</name>
      <anchorfile>classcDoubleParImpl.html</anchorfile>
      <anchor>a6b390587cc4f0a4c4cab372fef8bb3ff</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStringValue</name>
      <anchorfile>classcDoubleParImpl.html</anchorfile>
      <anchor>ae1c17e7b5e8f1da7b617c7b3fc1d1280</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setXMLValue</name>
      <anchorfile>classcDoubleParImpl.html</anchorfile>
      <anchor>a00a9120cc2f1d625a2c99332e2ee8f8c</anchor>
      <arglist>(cXMLElement *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setExpression</name>
      <anchorfile>classcDoubleParImpl.html</anchorfile>
      <anchor>add7a63039a24f209d10a311bc3d8262f</anchor>
      <arglist>(cExpression *e)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>boolValue</name>
      <anchorfile>classcDoubleParImpl.html</anchorfile>
      <anchor>aa4ed73060b38c7dc705218785f516b52</anchor>
      <arglist>(cComponent *context) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>longValue</name>
      <anchorfile>classcDoubleParImpl.html</anchorfile>
      <anchor>aa2d6bf602520cf89002c5e5d06eca86b</anchor>
      <arglist>(cComponent *context) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>doubleValue</name>
      <anchorfile>classcDoubleParImpl.html</anchorfile>
      <anchor>a0ebefd8920153dc99e27d435630815f4</anchor>
      <arglist>(cComponent *context) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>stringValue</name>
      <anchorfile>classcDoubleParImpl.html</anchorfile>
      <anchor>a3c7a775bb5f44ad8b3028fd8ba01a586</anchor>
      <arglist>(cComponent *context) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>stdstringValue</name>
      <anchorfile>classcDoubleParImpl.html</anchorfile>
      <anchor>af7b136533efa2a769ba1a5f869829217</anchor>
      <arglist>(cComponent *context) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>xmlValue</name>
      <anchorfile>classcDoubleParImpl.html</anchorfile>
      <anchor>a1db5bd2c8e346b30402538d47594755f</anchor>
      <arglist>(cComponent *context) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cExpression *</type>
      <name>getExpression</name>
      <anchorfile>classcDoubleParImpl.html</anchorfile>
      <anchor>ad5c02c3a908bbe75ad0018c08c10bca1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Type</type>
      <name>getType</name>
      <anchorfile>classcDoubleParImpl.html</anchorfile>
      <anchor>a6cbda522e0f06c118a44001b0de969de</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isNumeric</name>
      <anchorfile>classcDoubleParImpl.html</anchorfile>
      <anchor>a02001dbdd27babd70dcbb07bb80b9e50</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>convertToConst</name>
      <anchorfile>classcDoubleParImpl.html</anchorfile>
      <anchor>a0c2a931b3a38f86e56dc0f800fdc71dd</anchor>
      <arglist>(cComponent *context)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classcDoubleParImpl.html</anchorfile>
      <anchor>ae9c704f5cd39e40547bfbd720184123e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classcDoubleParImpl.html</anchorfile>
      <anchor>af49f1a8a18e9a2c4df965596833a4569</anchor>
      <arglist>(const char *text)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compare</name>
      <anchorfile>classcDoubleParImpl.html</anchorfile>
      <anchor>a2a2fa1995dff76d075ab960dea52b365</anchor>
      <arglist>(const cParImpl *other) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cDynamicExpression</name>
    <filename>classcDynamicExpression.html</filename>
    <base>cExpression</base>
    <class kind="class">cDynamicExpression::Elem</class>
    <class kind="class">cDynamicExpression::Functor</class>
    <member kind="enumeration">
      <name>OpType</name>
      <anchorfile>classcDynamicExpression.html</anchorfile>
      <anchor>a9c0e48b0297bf6501285584666679235</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cDynamicExpression</name>
      <anchorfile>classcDynamicExpression.html</anchorfile>
      <anchor>ac86e2f4322ee2f99019aed2c162f6490</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cDynamicExpression</name>
      <anchorfile>classcDynamicExpression.html</anchorfile>
      <anchor>a8ed264463efc9af83846456fb127f993</anchor>
      <arglist>(const cDynamicExpression &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cDynamicExpression</name>
      <anchorfile>classcDynamicExpression.html</anchorfile>
      <anchor>ab7ca73e38b136e56639d98c6afc0f709</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cDynamicExpression &amp;</type>
      <name>operator=</name>
      <anchorfile>classcDynamicExpression.html</anchorfile>
      <anchor>a5decac9bd22ae75d7faa68de5528c70b</anchor>
      <arglist>(const cDynamicExpression &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cDynamicExpression *</type>
      <name>dup</name>
      <anchorfile>classcDynamicExpression.html</anchorfile>
      <anchor>af81cfb225f3a87422bac2c4cede7df33</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcDynamicExpression.html</anchorfile>
      <anchor>a72a38c4c8903c8f3877c21210e643acb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setExpression</name>
      <anchorfile>classcDynamicExpression.html</anchorfile>
      <anchor>a832c49101af8e9385e9bd53b7d966808</anchor>
      <arglist>(Elem e[], int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cNEDValue</type>
      <name>evaluate</name>
      <anchorfile>classcDynamicExpression.html</anchorfile>
      <anchor>a927951e875e391b4237ab36bb996caa0</anchor>
      <arglist>(cComponent *context) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>boolValue</name>
      <anchorfile>classcDynamicExpression.html</anchorfile>
      <anchor>a9aa8205dc70c7767f838304ce88c6177</anchor>
      <arglist>(cComponent *context)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>longValue</name>
      <anchorfile>classcDynamicExpression.html</anchorfile>
      <anchor>a1ca137841516d01d05f834cfb5628125</anchor>
      <arglist>(cComponent *context, const char *expectedUnit=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>doubleValue</name>
      <anchorfile>classcDynamicExpression.html</anchorfile>
      <anchor>a7adeeda2c990b74eb72fd4e883aa232f</anchor>
      <arglist>(cComponent *context, const char *expectedUnit=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>stringValue</name>
      <anchorfile>classcDynamicExpression.html</anchorfile>
      <anchor>a4bde997241e75ca39f9c17e94db064d9</anchor>
      <arglist>(cComponent *context)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>xmlValue</name>
      <anchorfile>classcDynamicExpression.html</anchorfile>
      <anchor>a2dcace57c2a3c97b9b0b9e3130aad889</anchor>
      <arglist>(cComponent *context)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classcDynamicExpression.html</anchorfile>
      <anchor>a01cdf931c0c2405f0e74e88f78971d0c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classcDynamicExpression.html</anchorfile>
      <anchor>a1397baf02d1461aabbb6a2a93aab1076</anchor>
      <arglist>(const char *text)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compare</name>
      <anchorfile>classcDynamicExpression.html</anchorfile>
      <anchor>a8ec4df492fbb1c97f90d0d31f9fefd23</anchor>
      <arglist>(const cExpression *other) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isAConstant</name>
      <anchorfile>classcDynamicExpression.html</anchorfile>
      <anchor>a49297f1fbf872147d13f4c74e804e487</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>containsConstSubexpressions</name>
      <anchorfile>classcDynamicExpression.html</anchorfile>
      <anchor>a105741a4f61de8886cca81dbb8b475e5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>evaluateConstSubexpressions</name>
      <anchorfile>classcDynamicExpression.html</anchorfile>
      <anchor>a226b3a9973055e82cb7b726b18e6d639</anchor>
      <arglist>(cComponent *context)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>convertUnit</name>
      <anchorfile>classcDynamicExpression.html</anchorfile>
      <anchor>ac476853757697cb1511c153671d12bd6</anchor>
      <arglist>(double d, const char *unit, const char *targetUnit)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cDynamicExpression::Elem</name>
    <filename>classcDynamicExpression_1_1Elem.html</filename>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classcDynamicExpression_1_1Elem.html</anchorfile>
      <anchor>ae15e16c7d457d0ea57e4fd7ec8da5299</anchor>
      <arglist>(const Elem &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classcDynamicExpression_1_1Elem.html</anchorfile>
      <anchor>a70c8ca0c7cedca3fa79a7a39810481ff</anchor>
      <arglist>(bool _b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classcDynamicExpression_1_1Elem.html</anchorfile>
      <anchor>a9b932322e625dbdea78293b2e45f4505</anchor>
      <arglist>(int _i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classcDynamicExpression_1_1Elem.html</anchorfile>
      <anchor>ab5d3f37848d75413f3440cab6cbe3c41</anchor>
      <arglist>(short _i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classcDynamicExpression_1_1Elem.html</anchorfile>
      <anchor>a166c98114406ac17411db92f68e64ebb</anchor>
      <arglist>(long _l)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classcDynamicExpression_1_1Elem.html</anchorfile>
      <anchor>a2095f9570603e844aa278b810439f48f</anchor>
      <arglist>(double _d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUnit</name>
      <anchorfile>classcDynamicExpression_1_1Elem.html</anchorfile>
      <anchor>a7fa921703a32fc05e2a6df2b7365c417</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classcDynamicExpression_1_1Elem.html</anchorfile>
      <anchor>a2d945db7ed6a660f37332f6899ea8ef9</anchor>
      <arglist>(const char *_s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classcDynamicExpression_1_1Elem.html</anchorfile>
      <anchor>a3971d84828586311cee620260cfc7fbc</anchor>
      <arglist>(cXMLElement *_x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classcDynamicExpression_1_1Elem.html</anchorfile>
      <anchor>a3f1f3100312459fbed0d7b6781d78c40</anchor>
      <arglist>(cNEDMathFunction *_f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classcDynamicExpression_1_1Elem.html</anchorfile>
      <anchor>aaad158ccd27ea86c5e8ca5adbdbe0300</anchor>
      <arglist>(cNEDFunction *f, int argc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classcDynamicExpression_1_1Elem.html</anchorfile>
      <anchor>ab49a1a768eed55538481e30436252f2c</anchor>
      <arglist>(Functor *f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classcDynamicExpression_1_1Elem.html</anchorfile>
      <anchor>ab7143d292cef6bf35bf89479a69521d3</anchor>
      <arglist>(OpType _op)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classcDynamicExpression_1_1Elem.html</anchorfile>
      <anchor>a8ff070f45d5966014deb6ed0f10ce2b4</anchor>
      <arglist>(cExpression *_expr)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classcDynamicExpression_1_1Elem.html</anchorfile>
      <anchor>a141cbbe416b209dd73af50e153a48e4d</anchor>
      <arglist>(const Elem &amp;other) const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>cDynamicExpression</name>
      <anchorfile>classcDynamicExpression_1_1Elem.html</anchorfile>
      <anchor>a008e504f6137d4e68139e67721af37a6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cDynamicExpression::Functor</name>
    <filename>classcDynamicExpression_1_1Functor.html</filename>
    <base>cObject</base>
  </compound>
  <compound kind="class">
    <name>cEnum</name>
    <filename>classcEnum.html</filename>
    <base>cOwnedObject</base>
    <member kind="function">
      <type>std::string</type>
      <name>str</name>
      <anchorfile>classcEnum.html</anchorfile>
      <anchor>afee08a14aa2955d57ea5a42f1930a05b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cEnum</name>
      <anchorfile>classcEnum.html</anchorfile>
      <anchor>a41e3515d45b3ec83431a26171d20748e</anchor>
      <arglist>(const char *name=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cEnum</name>
      <anchorfile>classcEnum.html</anchorfile>
      <anchor>a8d574db7d568e2a81fe4bd7d08a45897</anchor>
      <arglist>(const char *name, const char *str,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cEnum</name>
      <anchorfile>classcEnum.html</anchorfile>
      <anchor>a33148560278b200220c805b51f0844f5</anchor>
      <arglist>(const cEnum &amp;cenum)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cEnum</name>
      <anchorfile>classcEnum.html</anchorfile>
      <anchor>aff31fa82106756e25277dfe130983fc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cEnum &amp;</type>
      <name>operator=</name>
      <anchorfile>classcEnum.html</anchorfile>
      <anchor>a636e7e66cf03d63bad1b6d32c48d33b1</anchor>
      <arglist>(const cEnum &amp;list)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cEnum *</type>
      <name>dup</name>
      <anchorfile>classcEnum.html</anchorfile>
      <anchor>aaa9d4f5beacf91d008bb4dfe55778fab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcEnum.html</anchorfile>
      <anchor>a73aef4f48ba6131dad21cc2b4ce42a8c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classcEnum.html</anchorfile>
      <anchor>afdb74f6a6f3680d60038d5b7d6f202af</anchor>
      <arglist>(int value, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getStringFor</name>
      <anchorfile>classcEnum.html</anchorfile>
      <anchor>a79560b74f73680e9c8ac85e10ab7b641</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>lookup</name>
      <anchorfile>classcEnum.html</anchorfile>
      <anchor>abebdff4bc72fecd48dad7d9c6ce3482a</anchor>
      <arglist>(const char *name, int fallback=-1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cEnum *</type>
      <name>find</name>
      <anchorfile>classcEnum.html</anchorfile>
      <anchor>a15810bc3b00496fd227bb5c9e8a9a1e4</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cEnum *</type>
      <name>get</name>
      <anchorfile>classcEnum.html</anchorfile>
      <anchor>a4e7242efc8f73f353566b82ce904fd1e</anchor>
      <arglist>(const char *name)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cEnvir</name>
    <filename>classcEnvir.html</filename>
    <member kind="function">
      <type></type>
      <name>cEnvir</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>a89e10bce36b4724a7436fe301e7bd056</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cEnvir</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>ac66b2fc6feefe723759470439d5c7a11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>objectDeleted</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>a6da74914baf112ab0cb663f436321969</anchor>
      <arglist>(cObject *object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>componentInitBegin</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>a6bb9ebed06903e6a6aaf814e1c378c71</anchor>
      <arglist>(cComponent *component, int stage)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>simulationEvent</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>abb87570a9157550fc7f94588e03c5d2c</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>messageSent_OBSOLETE</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>a9eef7e631f5a24b36982d71fefa50eeb</anchor>
      <arglist>(cMessage *msg, cGate *directToGate=NULL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>messageScheduled</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>a88d50309381b96e6f6084cd60c2841b7</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>messageCancelled</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>ac447fd831aa0dc4aaf143747631679ff</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>beginSend</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>ae51dd633f9b11395f035ceadfa688a32</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>messageSendDirect</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>a83a93c2d78b4ecef2c1278294f5e45b9</anchor>
      <arglist>(cMessage *msg, cGate *toGate, simtime_t propagationDelay, simtime_t transmissionDelay)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>messageSendHop</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>add3b8f64754f3fc24390b33dd6b5f933</anchor>
      <arglist>(cMessage *msg, cGate *srcGate)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>messageSendHop</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>a361ea6909c85b0aaf05daed17175db65</anchor>
      <arglist>(cMessage *msg, cGate *srcGate, simtime_t propagationDelay, simtime_t transmissionDelay)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>endSend</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>ad310f5f6d616d2f617e43adb7070306e</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>messageCreated</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>abd2be06fdaabd8f6d6d11233b406e2da</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>messageCloned</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>af42805eda85423b6124eed9a79188e84</anchor>
      <arglist>(cMessage *msg, cMessage *clone)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>messageDeleted</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>a5de56da84c47a72bf5cab1d06c770355</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>moduleReparented</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>a151c4b7a96b788f710b5145904bfbb88</anchor>
      <arglist>(cModule *module, cModule *oldparent)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>componentMethodBegin</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>a29fd793f0b8a5dc2c05ecdcd3b82b2fc</anchor>
      <arglist>(cComponent *from, cComponent *to, const char *methodFmt, va_list va, bool silent)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>componentMethodEnd</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>a11505ed0abf421446e947336d6fc9294</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>moduleCreated</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>a9628209d54003eaa05a456f6ba550f14</anchor>
      <arglist>(cModule *newmodule)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>moduleDeleted</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>a3dda47caf470eafe4a93825c982fd63f</anchor>
      <arglist>(cModule *module)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>gateCreated</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>a5aceea64d732115df44e4493d27ec84d</anchor>
      <arglist>(cGate *newgate)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>gateDeleted</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>aadc8d12b5a4887df11b2bfc0f51de459</anchor>
      <arglist>(cGate *gate)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>connectionCreated</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>a418660d2ad3eb7934a87979454797bed</anchor>
      <arglist>(cGate *srcgate)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>connectionDeleted</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>a4022f4d061e84964c15bf33b19b3a7d4</anchor>
      <arglist>(cGate *srcgate)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>displayStringChanged</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>a4b2bcb105cd547ac197038d861800ed5</anchor>
      <arglist>(cComponent *component)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>undisposedObject</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>af2b3dd8aebf5a4a3b02b3e1ad798d073</anchor>
      <arglist>(cObject *obj)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>configure</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>ae820ebd655e44ca1af91cae32a4db9c0</anchor>
      <arglist>(cComponent *component)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>readParameter</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>af71434f15310c1d498ef96ac76dc7448</anchor>
      <arglist>(cPar *parameter)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isModuleLocal</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>a7e52bfa1e275213fde560705b50e9896</anchor>
      <arglist>(cModule *parentmod, const char *modname, int index)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cXMLElement *</type>
      <name>getXMLDocument</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>a7bcc404b7ec8660372ef5d3fbd96a481</anchor>
      <arglist>(const char *filename, const char *xpath=NULL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cXMLElement *</type>
      <name>getParsedXMLString</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>a223065b26193b235602f4f106444a655</anchor>
      <arglist>(const char *content, const char *xpath=NULL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>forgetXMLDocument</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>a3693f6fccc632ee4b28a8ca9d0e01b57</anchor>
      <arglist>(const char *filename)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>forgetParsedXMLString</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>a5448f56651e12b9ae4d82036935ac904</anchor>
      <arglist>(const char *content)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>flushXMLDocumentCache</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>aa3feb3abcce3c4c12f9f84448f10d9a2</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>flushXMLParsedContentCache</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>a8b07f689c19ed2549b9ab9ec5af8f55c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned</type>
      <name>getExtraStackForEnvir</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>a29a346f237c673266780dedb314e05fa</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cConfiguration *</type>
      <name>getConfig</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>ac8969bf84752c4a9788d13221ea7f9ef</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cConfigurationEx *</type>
      <name>getConfigEx</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>a68a21b6318ec50f28bea88df891ad4e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isGUI</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>ad7977fe3d06b35169ec81beab4bdf369</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDisabled</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>a15953f40cda7ebf0baf2553e88c701e9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cEnvir &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>a8de23df34209caa8c7b7b3774095f00b</anchor>
      <arglist>(const std::string &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>cEnvir &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>a8df3018cf98f4f34254238890e71c0e4</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>cEnvir &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>a19779c7b842e1fbe63f03b61a06c45ca</anchor>
      <arglist>(std::ostream &amp;(t)(std::ostream &amp;))</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>getOStream</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>a9c4f75edf79ac2f1e8423a85bcb68df4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>bubble</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>af9c68fbf1eb86bacbf61662473a51f0d</anchor>
      <arglist>(cComponent *component, const char *text)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printfmsg</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>a8685b30c3ae6cc93f1744ae4dfc8cb14</anchor>
      <arglist>(const char *fmt,...)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>printf</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>ae2fede12d2e365aefb2248df908fce54</anchor>
      <arglist>(const char *fmt,...)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cEnvir &amp;</type>
      <name>flush</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>ade31fea1e280b49dcc90a062dedb0f30</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>gets</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>a3809b89e2ad4cf8fb07e8413ea767a94</anchor>
      <arglist>(const char *prompt, const char *defaultreply=NULL)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>askYesNo</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>ae0248ab37d08b9cdd8ef9c1ab41cc128</anchor>
      <arglist>(const char *fmt,...)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumRNGs</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>a17c3da81bee02374ebba5524598f3fe5</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cRNG *</type>
      <name>getRNG</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>abb6a1edea4054285bfa1ce02c85956ed</anchor>
      <arglist>(int k)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getRNGMappingFor</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>ab8c4f55bd5b38bf2ccb0bdeafa1de1cd</anchor>
      <arglist>(cComponent *component)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void *</type>
      <name>registerOutputVector</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>aac782996e35ab2648b04d60123770ce3</anchor>
      <arglist>(const char *modulename, const char *vectorname)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>deregisterOutputVector</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>aae598b6b64802f3fbc1a6b441291fff1</anchor>
      <arglist>(void *vechandle)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setVectorAttribute</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>ae7c253062b5936a49b804d5c5161bb60</anchor>
      <arglist>(void *vechandle, const char *name, const char *value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>recordInOutputVector</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>af9281db3020ab474cac335c82d2a8596</anchor>
      <arglist>(void *vechandle, simtime_t t, double value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>recordScalar</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>a71370a958395ffa1adaa798588978c14</anchor>
      <arglist>(cComponent *component, const char *name, double value, opp_string_map *attributes=NULL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>recordStatistic</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>a6e14e4019d4b148bd9fda6c859a04efd</anchor>
      <arglist>(cComponent *component, const char *name, cStatistic *statistic, opp_string_map *attributes=NULL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>addResultRecorders</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>af2121cf752e8d9635025ff33b96e1fed</anchor>
      <arglist>(cComponent *component, simsignal_t signal, const char *statisticName, cProperty *statisticTemplateProperty)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::ostream *</type>
      <name>getStreamForSnapshot</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>a3b30adbd8a70013157a54c5ff03178d6</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>releaseStreamForSnapshot</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>a1c84357c380016e044d8c58044b78ca9</anchor>
      <arglist>(std::ostream *os)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getArgCount</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>ac694d0a0932a0fb252881b5ff1261c0f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual char **</type>
      <name>getArgVector</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>ab38ba1eebac9b5936c24781328171e47</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getParsimProcId</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>a0020b6594a125437a3772c4c3670d505</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getParsimNumPartitions</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>a70e0e03a47e949ba0426e283205fc0ff</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned long</type>
      <name>getUniqueNumber</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>a3bfdcc3536d70673a145893a59a820a1</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>idle</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>ada48fb91d397bd32cf3baeaadc60e2e0</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>attachDebugger</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>a4f2f33af05ebd2b4ca63819303113cbb</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cErrorMessages</name>
    <filename>classcErrorMessages.html</filename>
  </compound>
  <compound kind="class">
    <name>cException</name>
    <filename>classcException.html</filename>
    <member kind="function">
      <type></type>
      <name>cException</name>
      <anchorfile>classcException.html</anchorfile>
      <anchor>ae37c072e7711457f2baadd31e0dc99b2</anchor>
      <arglist>(OppErrorCode errcode,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cException</name>
      <anchorfile>classcException.html</anchorfile>
      <anchor>a7f7fcd4d98b0c32fb9b85030a90f3c54</anchor>
      <arglist>(const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cException</name>
      <anchorfile>classcException.html</anchorfile>
      <anchor>a49e99763b394cd114aef2dc543958472</anchor>
      <arglist>(const cObject *where, OppErrorCode errcode,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cException</name>
      <anchorfile>classcException.html</anchorfile>
      <anchor>a9661042c3ba62741d8afde2238719fbf</anchor>
      <arglist>(const cObject *where, const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cException</name>
      <anchorfile>classcException.html</anchorfile>
      <anchor>a20bdf9ba513c144630d8b809e95fda1c</anchor>
      <arglist>(const cException &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cException *</type>
      <name>dup</name>
      <anchorfile>classcException.html</anchorfile>
      <anchor>a7aae9b928c595645f2918a897eb14c2b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cException</name>
      <anchorfile>classcException.html</anchorfile>
      <anchor>a616a152a7a238d75cd1f93ece2e0ce15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMessage</name>
      <anchorfile>classcException.html</anchorfile>
      <anchor>afad7de0aaeadf1be7aac3174ce67a73f</anchor>
      <arglist>(const char *txt)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>prependMessage</name>
      <anchorfile>classcException.html</anchorfile>
      <anchor>a668b1549d73a30b9ff3f2d4e615c3de0</anchor>
      <arglist>(const char *txt)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isError</name>
      <anchorfile>classcException.html</anchorfile>
      <anchor>ae94e8963aaae31fc8609986128d38d52</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getErrorCode</name>
      <anchorfile>classcException.html</anchorfile>
      <anchor>a66e376301220fd82c9da9bdeab664365</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>what</name>
      <anchorfile>classcException.html</anchorfile>
      <anchor>aec27fc122c18bc5432fb798188bb0af7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getFormattedMessage</name>
      <anchorfile>classcException.html</anchorfile>
      <anchor>a6d6e6a3f46967732ed62cc19a2805169</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSimulationStage</name>
      <anchorfile>classcException.html</anchorfile>
      <anchor>a14bc3aa629707ee37a10d724b8fa451f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual eventnumber_t</type>
      <name>getEventNumber</name>
      <anchorfile>classcException.html</anchorfile>
      <anchor>aa6a0dcd4d786e12318ef826867087353</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getSimtime</name>
      <anchorfile>classcException.html</anchorfile>
      <anchor>af4d9f0a1904d84fb89d8a20977a974af</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasContext</name>
      <anchorfile>classcException.html</anchorfile>
      <anchor>a5222f000f4d39b905ce471cf8ee4ded0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getContextClassName</name>
      <anchorfile>classcException.html</anchorfile>
      <anchor>ae05fe03bbe292c5c2907e08da8f62e30</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getContextFullPath</name>
      <anchorfile>classcException.html</anchorfile>
      <anchor>a42d56ca373f6025d0517cc081523b769</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getModuleID</name>
      <anchorfile>classcException.html</anchorfile>
      <anchor>a65b5c33d50a8a76db2eba3b6868821a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>classcException.html</anchorfile>
      <anchor>a3dc884d1fd5a29cbb7ef2c0fa7851717</anchor>
      <arglist>(const cObject *obj, OppErrorCode errorcode, const char *fmt, va_list va)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cExpression</name>
    <filename>classcExpression.html</filename>
    <base>cObject</base>
    <member kind="function">
      <type></type>
      <name>cExpression</name>
      <anchorfile>classcExpression.html</anchorfile>
      <anchor>aacd8196bb5078270ae0f167a7041c121</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cExpression</name>
      <anchorfile>classcExpression.html</anchorfile>
      <anchor>af7d285def640ddf004897831857cb90d</anchor>
      <arglist>(const cExpression &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cExpression</name>
      <anchorfile>classcExpression.html</anchorfile>
      <anchor>a99097f432853a0c84af86ce57de2f418</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cExpression &amp;</type>
      <name>operator=</name>
      <anchorfile>classcExpression.html</anchorfile>
      <anchor>af8f98206d0db8b0184b04e02c6e37ea4</anchor>
      <arglist>(const cExpression &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cExpression *</type>
      <name>dup</name>
      <anchorfile>classcExpression.html</anchorfile>
      <anchor>ae3633e3ab1c7442deffe5afc923bb7cf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcExpression.html</anchorfile>
      <anchor>a716da4b722aa1928878db4bfb0cfe3a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classcExpression.html</anchorfile>
      <anchor>ab784caf85ed6c09223c8075c52dcda36</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classcExpression.html</anchorfile>
      <anchor>a3129e9909cb11422bebb6b707bb7b610</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cNEDValue</type>
      <name>evaluate</name>
      <anchorfile>classcExpression.html</anchorfile>
      <anchor>af932f15365d07674946b0c2c33ef0cb5</anchor>
      <arglist>(cComponent *context=NULL) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>boolValue</name>
      <anchorfile>classcExpression.html</anchorfile>
      <anchor>a2e78d921735edf69a2fe3d819d4f20d4</anchor>
      <arglist>(cComponent *context=NULL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long</type>
      <name>longValue</name>
      <anchorfile>classcExpression.html</anchorfile>
      <anchor>aab5d49a12959dd4a53cdc41339e114a3</anchor>
      <arglist>(cComponent *context=NULL, const char *expectedUnit=NULL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>doubleValue</name>
      <anchorfile>classcExpression.html</anchorfile>
      <anchor>a8460a1f1c63fac29fd1c6ad1adcbaf78</anchor>
      <arglist>(cComponent *context=NULL, const char *expectedUnit=NULL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>stringValue</name>
      <anchorfile>classcExpression.html</anchorfile>
      <anchor>af98627c44b3e5d7c9e731f8ae3454ade</anchor>
      <arglist>(cComponent *context=NULL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cXMLElement *</type>
      <name>xmlValue</name>
      <anchorfile>classcExpression.html</anchorfile>
      <anchor>a15cbb547bf7945f4b3a435855f4405a4</anchor>
      <arglist>(cComponent *context=NULL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classcExpression.html</anchorfile>
      <anchor>a233e486eef43aba4515ef93dd7613cf1</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classcExpression.html</anchorfile>
      <anchor>acff3b9cfb826d0e14d7c712f4337c41f</anchor>
      <arglist>(const char *text)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>compare</name>
      <anchorfile>classcExpression.html</anchorfile>
      <anchor>a7a9540acba89d2ac1b4898d2a5e59a99</anchor>
      <arglist>(const cExpression *other) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>containsConstSubexpressions</name>
      <anchorfile>classcExpression.html</anchorfile>
      <anchor>a535690e30b8efed3cca0b922c5d77320</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>evaluateConstSubexpressions</name>
      <anchorfile>classcExpression.html</anchorfile>
      <anchor>a21b65c94df171a93b941f9712738da21</anchor>
      <arglist>(cComponent *context)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cFigure</name>
    <filename>classcFigure.html</filename>
    <base>cOwnedObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classcFigure.html</anchorfile>
      <anchor>a240fa9056c77bbb2f1ec1decec63a75a</anchor>
      <arglist>(cVisitor *v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcFigure.html</anchorfile>
      <anchor>a8a6f1558642a44cb5f14682992147134</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cFSM</name>
    <filename>classcFSM.html</filename>
    <base>cOwnedObject</base>
    <member kind="function">
      <type></type>
      <name>cFSM</name>
      <anchorfile>classcFSM.html</anchorfile>
      <anchor>a67f9c0e1cea78b63d8f3e818f7565f8a</anchor>
      <arglist>(const char *name=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cFSM</name>
      <anchorfile>classcFSM.html</anchorfile>
      <anchor>aa1e59fc8e673d60e8d1eb232800772cf</anchor>
      <arglist>(const cFSM &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>cFSM &amp;</type>
      <name>operator=</name>
      <anchorfile>classcFSM.html</anchorfile>
      <anchor>a0c94d5c693e338a0041c300cef51e10b</anchor>
      <arglist>(const cFSM &amp;vs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cFSM *</type>
      <name>dup</name>
      <anchorfile>classcFSM.html</anchorfile>
      <anchor>a178471d6faa9007aee1ac42ddf218e71</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcFSM.html</anchorfile>
      <anchor>a6443eca03004acf43d292980e7afe2a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classcFSM.html</anchorfile>
      <anchor>afbdab116be0a486cf2498477e295171b</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classcFSM.html</anchorfile>
      <anchor>af104253938d99b28311a954e9410592f</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getState</name>
      <anchorfile>classcFSM.html</anchorfile>
      <anchor>ae740838ab28af218998f311173e46d74</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getStateName</name>
      <anchorfile>classcFSM.html</anchorfile>
      <anchor>a295086961c9693c0e70134f804487d4c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>isInTransientState</name>
      <anchorfile>classcFSM.html</anchorfile>
      <anchor>a9a756270e3e505962a343c55247d1914</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setState</name>
      <anchorfile>classcFSM.html</anchorfile>
      <anchor>a850cd8c02cc0084735754a435238ab85</anchor>
      <arglist>(int state, const char *stn=NULL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cGate</name>
    <filename>classcGate.html</filename>
    <base>cObject</base>
    <base protection="private">noncopyable</base>
    <member kind="enumeration">
      <name>Type</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>ac548a8cc681cf0c39afb2b993fe6e09f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>deliver</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>a992b42ad97f4d2db611862e0b8f3c29d</anchor>
      <arglist>(cMessage *msg, simtime_t at)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getName</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>afe4ce728248d6b67c0202956ea459a9d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getFullName</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>a7c8c71dbda7bff46178b5843be024081</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>a410b3ce7ff7b344802bdefd8103dd156</anchor>
      <arglist>(cVisitor *v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>ab19a9d51b384bca48e8b0ae312c5459f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>getOwner</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>a07d17cd31de4bc3ece235f2a172406b2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cChannel *</type>
      <name>connectTo</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>ab1eb30b999c8ab9dc94e4b446c0616c6</anchor>
      <arglist>(cGate *gate, cChannel *channel=NULL, bool leaveUninitialized=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disconnect</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>a1f622cd4b0b84670272a92e6daa566bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cChannel *</type>
      <name>reconnectWith</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>a54440bf7253404bcf19cc359b020c89b</anchor>
      <arglist>(cChannel *channel, bool leaveUninitialized=false)</arglist>
    </member>
    <member kind="function">
      <type>_OPPDEPRECATED void</type>
      <name>setChannel</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>a155fb41c238d6b3dbda2ce3729a5c323</anchor>
      <arglist>(cChannel *channel)</arglist>
    </member>
    <member kind="function">
      <type>cChannel *</type>
      <name>getTransmissionChannel</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>a4308e3f6de5ca8a8771f2702cda8d2ae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cChannel *</type>
      <name>findTransmissionChannel</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>a6a838590052689dab7c75249abb64f0d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cChannel *</type>
      <name>getIncomingTransmissionChannel</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>aa7c0b3a1ff0c1376a1c659ef82493ba2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cChannel *</type>
      <name>findIncomingTransmissionChannel</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>ac00112da1b141984bd4964f500b17dcb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cGate *</type>
      <name>getPreviousGate</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>a4526c610784f00d559d94e5fd78d6a53</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cGate *</type>
      <name>getNextGate</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>aa06617c73f19bdab76706fd0fa01b470</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cGate *</type>
      <name>getPathStartGate</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>a9e12e9ea0075ca0a7dbc3cdddc567bfb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cGate *</type>
      <name>getPathEndGate</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>a91da27eca96709cdce935c32b2bf2cd3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>pathContains</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>a0af6130bef41e321eab3d43dfd9547f9</anchor>
      <arglist>(cModule *module, int gateId=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConnectedOutside</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>a458a23f084b6e561598cee4876dd3669</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConnectedInside</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>a92d9162bc195e5ec4cf8cf13aa6c9e8a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConnected</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>ad5b8f94405bc3ebaad32570f4c8d6d91</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPathOK</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>a88579eaf89698e9b080c5dc7e1acbf15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cDisplayString &amp;</type>
      <name>getDisplayString</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>adb4881b94dbf6b9e4af70779142f207e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDisplayString</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>ad44d1d4bc478047255811156feda1dd8</anchor>
      <arglist>(const char *dispstr)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>cModule</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>a37aa51760d5f85b54d00668308b926c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getBaseName</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>afb8ce98cbd4eab52e12abcc314b97167</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getNameSuffix</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>a65877ddfe0570fec4fa8d42cf8823065</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cProperties *</type>
      <name>getProperties</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>aa6d2092690eb4095ee0b1b7945277044</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>getType</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>aef45a5886ebfccc090ba9b6d8ec8d367</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>getOwnerModule</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>ad230c5d38beb3cc9dd88b9dde46fe7d7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getId</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>a8b760b26083467a3eb224ef469924130</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVector</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>a740effd6705c57eb80036fd0af2d1ae6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBaseId</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>a51072337a3f003180069747dfa76ae82</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIndex</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>a0ec58c0c39b875a03cfc18bd20059d3b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getVectorSize</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>ae14b7eaf80159167aed3cec46adc94c8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>a37b65df3aa9d178949882e0e7f03362f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cChannel *</type>
      <name>getChannel</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>aa8b59418f97d75196a921eda2a9c6efa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDeliverOnReceptionStart</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>a953dc06f3e0900a608abf8fab5aa96bc</anchor>
      <arglist>(bool d)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getDeliverOnReceptionStart</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>a8835c87fc62080d25c7b380c7d0f2b2e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>getTypeName</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>aaee1ecc6d77458acf3acc30397e0eafd</anchor>
      <arglist>(Type t)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cGenericAssignableWatch</name>
    <filename>classcGenericAssignableWatch.html</filename>
    <templarg>T</templarg>
    <base>cWatchBase</base>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classcGenericAssignableWatch.html</anchorfile>
      <anchor>ae81f1e885ac3b90dc75dcf8835356a71</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>supportsAssignment</name>
      <anchorfile>classcGenericAssignableWatch.html</anchorfile>
      <anchor>a54dfa527c677afa27bd01bd34f874457</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcGenericAssignableWatch.html</anchorfile>
      <anchor>a85c0eeaed709e66d9690c6d4bffd716a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>assign</name>
      <anchorfile>classcGenericAssignableWatch.html</anchorfile>
      <anchor>a547b13ad8e81f0f576a5d527c5e06376</anchor>
      <arglist>(const char *s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cGenericReadonlyWatch</name>
    <filename>classcGenericReadonlyWatch.html</filename>
    <templarg>T</templarg>
    <base>cWatchBase</base>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classcGenericReadonlyWatch.html</anchorfile>
      <anchor>a5e13a15b8c068c51aaec9b6e4646e2e5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>supportsAssignment</name>
      <anchorfile>classcGenericReadonlyWatch.html</anchorfile>
      <anchor>afe7267fd7b6cdd0bc6024551a07e36f4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcGenericReadonlyWatch.html</anchorfile>
      <anchor>aef82fe940d8a28aac20f7d13d7908ea1</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cGlobalRegistrationList</name>
    <filename>classcGlobalRegistrationList.html</filename>
  </compound>
  <compound kind="class">
    <name>cGroupFigure</name>
    <filename>classcGroupFigure.html</filename>
    <base>cFigure</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cGroupFigure *</type>
      <name>dup</name>
      <anchorfile>classcGroupFigure.html</anchorfile>
      <anchor>a3b74360976e9fc605041c538fe03d3a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcGroupFigure.html</anchorfile>
      <anchor>ab2470cce84aabe44a2b8c91bcccbf77e</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cHasher</name>
    <filename>classcHasher.html</filename>
    <base protection="private">noncopyable</base>
    <member kind="function">
      <type></type>
      <name>cHasher</name>
      <anchorfile>classcHasher.html</anchorfile>
      <anchor>a8025ee57b787814ed98fd54ef0e2ef76</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classcHasher.html</anchorfile>
      <anchor>ad5a3bc73fbfc2485860e86fef9353671</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classcHasher.html</anchorfile>
      <anchor>aebf490b17aa79aa1364490afcab0713c</anchor>
      <arglist>(const char *p, size_t length)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classcHasher.html</anchorfile>
      <anchor>aa47eab8eb866c03eecdbd0a531f10036</anchor>
      <arglist>(char d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classcHasher.html</anchorfile>
      <anchor>af16e7fa4dc5d10c45713bfa38c143140</anchor>
      <arglist>(short d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classcHasher.html</anchorfile>
      <anchor>a89b8956992a81ccab8df6f744967a891</anchor>
      <arglist>(int d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classcHasher.html</anchorfile>
      <anchor>a3e1bb12a04dbe6d35b50be9772669fb4</anchor>
      <arglist>(long d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classcHasher.html</anchorfile>
      <anchor>ad2eb869edb1141b93d9edde228e90521</anchor>
      <arglist>(opp_long_long d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classcHasher.html</anchorfile>
      <anchor>ae33ebaad6099798d349d1247c0dfc2d2</anchor>
      <arglist>(unsigned char d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classcHasher.html</anchorfile>
      <anchor>a8c6b05518ce3c9bfbba6719e64047b47</anchor>
      <arglist>(unsigned short d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classcHasher.html</anchorfile>
      <anchor>a13974f307f5bda1642cdb99df86e3a5e</anchor>
      <arglist>(unsigned int d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classcHasher.html</anchorfile>
      <anchor>a59e29f842216ea1f1229056b5ec84182</anchor>
      <arglist>(unsigned long d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classcHasher.html</anchorfile>
      <anchor>ac5f90e2ee87306a2f88f774a4a4ec00f</anchor>
      <arglist>(opp_unsigned_long_long d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classcHasher.html</anchorfile>
      <anchor>a5404c9dc8fc8522ea933e4c9f0115383</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classcHasher.html</anchorfile>
      <anchor>af0299a700c0ef2c12d88da0da10ed119</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>getHash</name>
      <anchorfile>classcHasher.html</anchorfile>
      <anchor>af8ae1c5c13407135a7477a1f321b7924</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>parse</name>
      <anchorfile>classcHasher.html</anchorfile>
      <anchor>a40f01eeb07b4648d8c1e74c63d6fa52f</anchor>
      <arglist>(const char *fingerprint) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>classcHasher.html</anchorfile>
      <anchor>a2886f553eac7efa5ad3a524609fe32b2</anchor>
      <arglist>(const char *fingerprint) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>str</name>
      <anchorfile>classcHasher.html</anchorfile>
      <anchor>a9d01cf7b83ec4534a23d7a7f1bf37194</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cHistogram</name>
    <filename>classcHistogram.html</filename>
    <base>cHistogramBase</base>
    <member kind="function">
      <type></type>
      <name>cHistogram</name>
      <anchorfile>classcHistogram.html</anchorfile>
      <anchor>a116f4ffc7c3aaa34f40e092b1079d6f3</anchor>
      <arglist>(const cHistogram &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cHistogram</name>
      <anchorfile>classcHistogram.html</anchorfile>
      <anchor>a9e485eb4343a6f706eb573c843f380c8</anchor>
      <arglist>(const char *name=NULL, int numcells=-1, Mode mode=MODE_AUTO)</arglist>
    </member>
    <member kind="function">
      <type>cHistogram &amp;</type>
      <name>operator=</name>
      <anchorfile>classcHistogram.html</anchorfile>
      <anchor>a46e76b853a756342169fa529258d8dd1</anchor>
      <arglist>(const cHistogram &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classcHistogram.html</anchorfile>
      <anchor>aee8d637c5eed6849ef99c42f32eb6350</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classcHistogram.html</anchorfile>
      <anchor>adf8f5effc7e0f69924db216e3ab2c4d2</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getBasepoint</name>
      <anchorfile>classcHistogram.html</anchorfile>
      <anchor>a5721cce0b32c0b9761f9f201dfa857cf</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getCellValue</name>
      <anchorfile>classcHistogram.html</anchorfile>
      <anchor>a8f4fd31f3b970d50913998455e31775c</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getPDF</name>
      <anchorfile>classcHistogram.html</anchorfile>
      <anchor>a81ecab8c0bef0aa1e032cb67f43d748c</anchor>
      <arglist>(double x) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getCDF</name>
      <anchorfile>classcHistogram.html</anchorfile>
      <anchor>ac14bc37a549a9ac2a3de847836de2049</anchor>
      <arglist>(double x) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>random</name>
      <anchorfile>classcHistogram.html</anchorfile>
      <anchor>ae15676755e4cc638907e4e9d43c60d43</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>saveToFile</name>
      <anchorfile>classcHistogram.html</anchorfile>
      <anchor>ade34cd59115d545cd253c2dab7e42668</anchor>
      <arglist>(FILE *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>loadFromFile</name>
      <anchorfile>classcHistogram.html</anchorfile>
      <anchor>a45012e0d5221a6a7100f5d87a8f195e0</anchor>
      <arglist>(FILE *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMode</name>
      <anchorfile>classcHistogram.html</anchorfile>
      <anchor>a149e9bfad4068a28c445b54a3efc6263</anchor>
      <arglist>(Mode mode)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Mode</type>
      <name>getMode</name>
      <anchorfile>classcHistogram.html</anchorfile>
      <anchor>a96f1a96ddb3d385a30d65fc5fa23a3b6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCellSize</name>
      <anchorfile>classcHistogram.html</anchorfile>
      <anchor>af4ace67ac941012925fbdcf6207e0c17</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getCellSize</name>
      <anchorfile>classcHistogram.html</anchorfile>
      <anchor>a132cb2557ace43a9626fbae5feff7df7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>collectTransformed</name>
      <anchorfile>classcHistogram.html</anchorfile>
      <anchor>a921ad33483221e65fbbaf7c3ea3caa51</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setupRange</name>
      <anchorfile>classcHistogram.html</anchorfile>
      <anchor>a2a9e1d64ea58e10d2c268357b32657dd</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cHistogramBase</name>
    <filename>classcHistogramBase.html</filename>
    <base>cDensityEstBase</base>
    <member kind="function">
      <type></type>
      <name>cHistogramBase</name>
      <anchorfile>classcHistogramBase.html</anchorfile>
      <anchor>a0de4899b3bb58a908b0c9364f69668e6</anchor>
      <arglist>(const cHistogramBase &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cHistogramBase</name>
      <anchorfile>classcHistogramBase.html</anchorfile>
      <anchor>a38b199c7c2c33bbaa84ef8626520519f</anchor>
      <arglist>(const char *name, int numcells)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cHistogramBase</name>
      <anchorfile>classcHistogramBase.html</anchorfile>
      <anchor>a0eafa51cc21837cbcfe40b69a3f82528</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cHistogramBase &amp;</type>
      <name>operator=</name>
      <anchorfile>classcHistogramBase.html</anchorfile>
      <anchor>a09758116a34349bc9942467a3ef8bdb3</anchor>
      <arglist>(const cHistogramBase &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classcHistogramBase.html</anchorfile>
      <anchor>a49f9546538cf139baee2284fc5158380</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classcHistogramBase.html</anchorfile>
      <anchor>a91bcdeacc9464511e78ee01b5c271f09</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clearResult</name>
      <anchorfile>classcHistogramBase.html</anchorfile>
      <anchor>a72cb7ea92e4877c03ef88de70cab2203</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>transform</name>
      <anchorfile>classcHistogramBase.html</anchorfile>
      <anchor>ad117c20497a78c6cbc23f085e7b3e15a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumCells</name>
      <anchorfile>classcHistogramBase.html</anchorfile>
      <anchor>a7a1e1fd86cfc4896d58368aa06c04c8f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>saveToFile</name>
      <anchorfile>classcHistogramBase.html</anchorfile>
      <anchor>a2c3136ae53afb62289cbb7501845f592</anchor>
      <arglist>(FILE *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>loadFromFile</name>
      <anchorfile>classcHistogramBase.html</anchorfile>
      <anchor>af837851071172d94c451c2187a989609</anchor>
      <arglist>(FILE *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNumCells</name>
      <anchorfile>classcHistogramBase.html</anchorfile>
      <anchor>adb25c6c683a19530149abecdc2267e93</anchor>
      <arglist>(int numcells)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cIdealChannel</name>
    <filename>classcIdealChannel.html</filename>
    <base>cChannel</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>processMessage</name>
      <anchorfile>classcIdealChannel.html</anchorfile>
      <anchor>a1efc1fca27bdd93a92e6d46c6059f3c4</anchor>
      <arglist>(cMessage *msg, simtime_t t, result_t &amp;result)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getNominalDatarate</name>
      <anchorfile>classcIdealChannel.html</anchorfile>
      <anchor>ae505af976e47d3d7b2def908bee095d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isTransmissionChannel</name>
      <anchorfile>classcIdealChannel.html</anchorfile>
      <anchor>aa37df16dc8e8c03e80f10ef73afbd689</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>calculateDuration</name>
      <anchorfile>classcIdealChannel.html</anchorfile>
      <anchor>a31b72c4101e959a5bc5612bda774e7d6</anchor>
      <arglist>(cMessage *msg) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getTransmissionFinishTime</name>
      <anchorfile>classcIdealChannel.html</anchorfile>
      <anchor>a2243e0cb1f7ac1759a64387d08f648e8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isBusy</name>
      <anchorfile>classcIdealChannel.html</anchorfile>
      <anchor>a812bd56348114f6bd76193e115cc777a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forceTransmissionFinishTime</name>
      <anchorfile>classcIdealChannel.html</anchorfile>
      <anchor>aa6b89965ac6ff40daacc67980853a2d8</anchor>
      <arglist>(simtime_t t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cIdealChannel</name>
      <anchorfile>classcIdealChannel.html</anchorfile>
      <anchor>a989a101deade8d9b70eb1a511b782183</anchor>
      <arglist>(const char *name=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cIdealChannel</name>
      <anchorfile>classcIdealChannel.html</anchorfile>
      <anchor>a56952fc1faace33de1b768bad8117910</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cIdealChannel *</type>
      <name>create</name>
      <anchorfile>classcIdealChannel.html</anchorfile>
      <anchor>a56f2f0dec50c1068cd364a325c3e666e</anchor>
      <arglist>(const char *name)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cIListener</name>
    <filename>classcIListener.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>classcIListener.html</anchorfile>
      <anchor>a720a3b7365156cac6d9d94e27dbdb8a8</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, bool b)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>classcIListener.html</anchorfile>
      <anchor>acfc41918be5c025d55f29346895e4a77</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, long l)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>classcIListener.html</anchorfile>
      <anchor>a1e89cb5d7acd3d8f8ced63812350f430</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, unsigned long l)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>classcIListener.html</anchorfile>
      <anchor>aa5eaaac927805d320886834b398105b1</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, double d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>classcIListener.html</anchorfile>
      <anchor>a2037eead6bd218986df10254cee3281a</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, const SimTime &amp;t)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>classcIListener.html</anchorfile>
      <anchor>a77bae02b2acb9f3793b3b5c78bc00632</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, const char *s)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>classcIListener.html</anchorfile>
      <anchor>a611a865cad4e45dec10014073aeb960b</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, cObject *obj)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>classcIListener.html</anchorfile>
      <anchor>a9588b3a529407a89488923aa0d532d5d</anchor>
      <arglist>(cComponent *component, simsignal_t signalID)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>subscribedTo</name>
      <anchorfile>classcIListener.html</anchorfile>
      <anchor>ad80bf34b36f74143344c31a8e9eca73b</anchor>
      <arglist>(cComponent *component, simsignal_t signalID)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unsubscribedFrom</name>
      <anchorfile>classcIListener.html</anchorfile>
      <anchor>aed6bcb832fdd406626fe05f8e4462a30</anchor>
      <arglist>(cComponent *component, simsignal_t signalID)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSubscribeCount</name>
      <anchorfile>classcIListener.html</anchorfile>
      <anchor>a7d42f7983b554bb51b0c5d844e58c204</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>cComponent</name>
      <anchorfile>classcIListener.html</anchorfile>
      <anchor>add0207c9829c1a1ae29f9c10cc899454</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>cResultFilter</name>
      <anchorfile>classcIListener.html</anchorfile>
      <anchor>af47fd2ad58192b7c73aca0b819223380</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cImageFigure</name>
    <filename>classcImageFigure.html</filename>
    <base>cFigure</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cImageFigure *</type>
      <name>dup</name>
      <anchorfile>classcImageFigure.html</anchorfile>
      <anchor>a7336ff1a5a5ad81a11e9a6bc0458d231</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcImageFigure.html</anchorfile>
      <anchor>ab5c48522fd0fbfcee5e398a2c45c0e50</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cITimestampedValue</name>
    <filename>classcITimestampedValue.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cITimestampedValue</name>
      <anchorfile>classcITimestampedValue.html</anchorfile>
      <anchor>ac46e8a280cbcdaef26e737ae4735b5b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual simtime_t_cref</type>
      <name>getTimestamp</name>
      <anchorfile>classcITimestampedValue.html</anchorfile>
      <anchor>a9315b71c5e06ff647e646e465e563b96</anchor>
      <arglist>(simsignal_t signalID) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SimsignalType</type>
      <name>getValueType</name>
      <anchorfile>classcITimestampedValue.html</anchorfile>
      <anchor>ab0a1fe17a0c5628c3278ada6491d7814</anchor>
      <arglist>(simsignal_t signalID) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>boolValue</name>
      <anchorfile>classcITimestampedValue.html</anchorfile>
      <anchor>afbef9e056a181dab4a763954f93570e1</anchor>
      <arglist>(simsignal_t signalID) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long</type>
      <name>longValue</name>
      <anchorfile>classcITimestampedValue.html</anchorfile>
      <anchor>a10ce58582532b5d048657b2e074030d6</anchor>
      <arglist>(simsignal_t signalID) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned long</type>
      <name>unsignedLongValue</name>
      <anchorfile>classcITimestampedValue.html</anchorfile>
      <anchor>a3fd2d29ad11bcd046ba5b2be851d0386</anchor>
      <arglist>(simsignal_t signalID) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>doubleValue</name>
      <anchorfile>classcITimestampedValue.html</anchorfile>
      <anchor>a7aa2ba564fb1c64a82132728b6d7ecfd</anchor>
      <arglist>(simsignal_t signalID) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SimTime</type>
      <name>simtimeValue</name>
      <anchorfile>classcITimestampedValue.html</anchorfile>
      <anchor>a1665d893ca9ebd3a4659363c7351b7aa</anchor>
      <arglist>(simsignal_t signalID) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>stringValue</name>
      <anchorfile>classcITimestampedValue.html</anchorfile>
      <anchor>ad8eaa0c065f88902699110868db24559</anchor>
      <arglist>(simsignal_t signalID) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cObject *</type>
      <name>objectValue</name>
      <anchorfile>classcITimestampedValue.html</anchorfile>
      <anchor>a98e01af5ed041c164c6e0ed098dd1830</anchor>
      <arglist>(simsignal_t signalID) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cKSplit</name>
    <filename>classcKSplit.html</filename>
    <base>cDensityEstBase</base>
    <class kind="struct">cKSplit::Grid</class>
    <class kind="class">cKSplit::Iterator</class>
    <member kind="typedef">
      <type>int(*</type>
      <name>CritFunc</name>
      <anchorfile>group__EnumsTypes.html</anchorfile>
      <anchor>ga253ef95979a4524c9c19e1b477215ce5</anchor>
      <arglist>)(const cKSplit &amp;, cKSplit::Grid &amp;, int, double *)</arglist>
    </member>
    <member kind="typedef">
      <type>double(*</type>
      <name>DivFunc</name>
      <anchorfile>group__EnumsTypes.html</anchorfile>
      <anchor>gade5c525991f38f272681b30cf390d940</anchor>
      <arglist>)(const cKSplit &amp;, cKSplit::Grid &amp;, double, double *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cKSplit</name>
      <anchorfile>classcKSplit.html</anchorfile>
      <anchor>ade96d22814038931ad01d787c409bfbd</anchor>
      <arglist>(const cKSplit &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cKSplit</name>
      <anchorfile>classcKSplit.html</anchorfile>
      <anchor>a514204989216053aae6638378fd29c74</anchor>
      <arglist>(const char *name=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cKSplit</name>
      <anchorfile>classcKSplit.html</anchorfile>
      <anchor>a1115a3808b255242390ebcddf86653fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cKSplit &amp;</type>
      <name>operator=</name>
      <anchorfile>classcKSplit.html</anchorfile>
      <anchor>aba600c8e97854137c6e1e5b855bf1d7a</anchor>
      <arglist>(const cKSplit &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cKSplit *</type>
      <name>dup</name>
      <anchorfile>classcKSplit.html</anchorfile>
      <anchor>a1dac1d5bfcb5565e043579f1c8484d1b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>detailedInfo</name>
      <anchorfile>classcKSplit.html</anchorfile>
      <anchor>ad35f758317b237ddfad8e0f152974d64</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classcKSplit.html</anchorfile>
      <anchor>a9422435a08df23af4d3e642959c24980</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classcKSplit.html</anchorfile>
      <anchor>a35d3a9452265c377b722a44736599443</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>transform</name>
      <anchorfile>classcKSplit.html</anchorfile>
      <anchor>a9090d361b2f54994538b1152ad63d6c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumCells</name>
      <anchorfile>classcKSplit.html</anchorfile>
      <anchor>aa07fde0427771d6cf7cc9a59ecfd2eb1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getBasepoint</name>
      <anchorfile>classcKSplit.html</anchorfile>
      <anchor>a12c4cc16d0167d998844ca8f6fe0c87f</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getCellValue</name>
      <anchorfile>classcKSplit.html</anchorfile>
      <anchor>a2d4a5376ccf325f389fee95a3e7836b0</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getPDF</name>
      <anchorfile>classcKSplit.html</anchorfile>
      <anchor>ad61021280fd4539afbceab36a72b6edb</anchor>
      <arglist>(double x) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getCDF</name>
      <anchorfile>classcKSplit.html</anchorfile>
      <anchor>adae2ed9dbd2e890cd0c5064acd3a477f</anchor>
      <arglist>(double x) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>merge</name>
      <anchorfile>classcKSplit.html</anchorfile>
      <anchor>ae96adcfb19596a8fde866d924e9f9e73</anchor>
      <arglist>(const cStatistic *other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>random</name>
      <anchorfile>classcKSplit.html</anchorfile>
      <anchor>ae8681dc792c05b44bf81a2b2d95be78f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>saveToFile</name>
      <anchorfile>classcKSplit.html</anchorfile>
      <anchor>a8aab9e85cce2fc8b09a91e9b41122b30</anchor>
      <arglist>(FILE *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>loadFromFile</name>
      <anchorfile>classcKSplit.html</anchorfile>
      <anchor>a3eedd26cec83b52bcd152777ce2df1a5</anchor>
      <arglist>(FILE *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCritFunc</name>
      <anchorfile>classcKSplit.html</anchorfile>
      <anchor>afc8554340805d4858bbc7cfd96915e4a</anchor>
      <arglist>(CritFunc _critfunc, double *_critdata)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDivFunc</name>
      <anchorfile>classcKSplit.html</anchorfile>
      <anchor>af0765b083e3cb07a5422acba02db45ab</anchor>
      <arglist>(DivFunc _divfunc, double *_divdata)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rangeExtension</name>
      <anchorfile>classcKSplit.html</anchorfile>
      <anchor>a3d19fc08521d986b60125107ff8ffda1</anchor>
      <arglist>(bool enabled)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTreeDepth</name>
      <anchorfile>classcKSplit.html</anchorfile>
      <anchor>a1b7280a6eaafb0b13e917ceb03862840</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTreeDepth</name>
      <anchorfile>classcKSplit.html</anchorfile>
      <anchor>a2dab6cfd0e7b2104848c366fd85ed9ed</anchor>
      <arglist>(Grid &amp;grid) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRealCellValue</name>
      <anchorfile>classcKSplit.html</anchorfile>
      <anchor>af3a110bab01e040dbaeb91ea3fda46fb</anchor>
      <arglist>(Grid &amp;grid, int cell) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printGrids</name>
      <anchorfile>classcKSplit.html</anchorfile>
      <anchor>a2b6043b2230865067e6b18e3da95f1a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Grid &amp;</type>
      <name>getGrid</name>
      <anchorfile>classcKSplit.html</anchorfile>
      <anchor>ad3901460ad4cf3a76d7bbd333f4b605c</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function">
      <type>Grid &amp;</type>
      <name>getRootGrid</name>
      <anchorfile>classcKSplit.html</anchorfile>
      <anchor>a35fb1ae3587c7ef52b838e978402dcd7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>collectTransformed</name>
      <anchorfile>classcKSplit.html</anchorfile>
      <anchor>aa573c5a13dfa1264f6dd06b19265de0d</anchor>
      <arglist>(double val)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cKSplit::Grid</name>
    <filename>structcKSplit_1_1Grid.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>parent</name>
      <anchorfile>structcKSplit_1_1Grid.html</anchorfile>
      <anchor>a9ca937765e4eb0e7391cfaa8bf4655e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>reldepth</name>
      <anchorfile>structcKSplit_1_1Grid.html</anchorfile>
      <anchor>abd97f575d4cd9efedce90953173702b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>long</type>
      <name>total</name>
      <anchorfile>structcKSplit_1_1Grid.html</anchorfile>
      <anchor>af2e6af5f4ec06d259003fc871e8d9bcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>mother</name>
      <anchorfile>structcKSplit_1_1Grid.html</anchorfile>
      <anchor>addb6e790e7bad1f125ed7c5a51e53a92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>cells</name>
      <anchorfile>structcKSplit_1_1Grid.html</anchorfile>
      <anchor>a61c8946f10d03393b5becf93d9b41064</anchor>
      <arglist>[K]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cKSplit::Iterator</name>
    <filename>classcKSplit_1_1Iterator.html</filename>
    <member kind="function">
      <type></type>
      <name>Iterator</name>
      <anchorfile>classcKSplit_1_1Iterator.html</anchorfile>
      <anchor>ab0fec8c0719a0d76c6570f496082ef79</anchor>
      <arglist>(const cKSplit &amp;ksplit, bool atbeginning=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classcKSplit_1_1Iterator.html</anchorfile>
      <anchor>ac24395c8e0e5d06e0ae25b8ef948265d</anchor>
      <arglist>(const cKSplit &amp;ksplit, bool atbeginning=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator++</name>
      <anchorfile>classcKSplit_1_1Iterator.html</anchorfile>
      <anchor>afbaed025197854d4bfeb975dc621fe1c</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator--</name>
      <anchorfile>classcKSplit_1_1Iterator.html</anchorfile>
      <anchor>af93074c1a890c72443f556f9143240fd</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>end</name>
      <anchorfile>classcKSplit_1_1Iterator.html</anchorfile>
      <anchor>a1d06079c54e2c083423ea6349d4868de</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCellNumber</name>
      <anchorfile>classcKSplit_1_1Iterator.html</anchorfile>
      <anchor>a755bdd52dd728f2e37c794d956d8cca8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCellMin</name>
      <anchorfile>classcKSplit_1_1Iterator.html</anchorfile>
      <anchor>aca793a915bd295d5bb9d8f9a68315be1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCellMax</name>
      <anchorfile>classcKSplit_1_1Iterator.html</anchorfile>
      <anchor>aa35561e3e4432fa47292f6c2b1f517b4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCellSize</name>
      <anchorfile>classcKSplit_1_1Iterator.html</anchorfile>
      <anchor>a68bdbc49fc9efc394d59e24ea9e78c19</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCellValue</name>
      <anchorfile>classcKSplit_1_1Iterator.html</anchorfile>
      <anchor>a4e3a974bb027b583a15eb076b6c5a5c2</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cLCG32</name>
    <filename>classcLCG32.html</filename>
    <base>cRNG</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classcLCG32.html</anchorfile>
      <anchor>a0058c1a101678f01e011d976c6b3349c</anchor>
      <arglist>(int seedSet, int rngId, int numRngs, int parsimProcId, int parsimNumPartitions, cConfiguration *cfg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>selfTest</name>
      <anchorfile>classcLCG32.html</anchorfile>
      <anchor>a729de6fc37b77cc7c57e27f1804e7028</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned long</type>
      <name>intRand</name>
      <anchorfile>classcLCG32.html</anchorfile>
      <anchor>a106681df387bfcecc240a87df62e656a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned long</type>
      <name>intRandMax</name>
      <anchorfile>classcLCG32.html</anchorfile>
      <anchor>a0ce2e073a6a13157876a32c289c23933</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned long</type>
      <name>intRand</name>
      <anchorfile>classcLCG32.html</anchorfile>
      <anchor>a46bbfcf5c1656756f1131267a2a98e85</anchor>
      <arglist>(unsigned long n)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>doubleRand</name>
      <anchorfile>classcLCG32.html</anchorfile>
      <anchor>a436ad55f762a14aa72d91964c74df7e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>doubleRandNonz</name>
      <anchorfile>classcLCG32.html</anchorfile>
      <anchor>a639842d1362ed328bf3e354f039e476c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>doubleRandIncl1</name>
      <anchorfile>classcLCG32.html</anchorfile>
      <anchor>a44da68f3fa17deeb877895428f6b452f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cLineFigure</name>
    <filename>classcLineFigure.html</filename>
    <base>cAbstractLineFigure</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cLineFigure *</type>
      <name>dup</name>
      <anchorfile>classcLineFigure.html</anchorfile>
      <anchor>adf3e93d93de316aba1dd491f650543d8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcLineFigure.html</anchorfile>
      <anchor>ad30285c6038cba71cc90739a1a2ae6b9</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cLinkedList</name>
    <filename>classcLinkedList.html</filename>
    <base>cOwnedObject</base>
    <class kind="class">cLinkedList::Iterator</class>
    <member kind="function">
      <type></type>
      <name>cLinkedList</name>
      <anchorfile>classcLinkedList.html</anchorfile>
      <anchor>a57354786e570fa07dd7637dcdc6af0e2</anchor>
      <arglist>(const cLinkedList &amp;llist)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cLinkedList</name>
      <anchorfile>classcLinkedList.html</anchorfile>
      <anchor>a38390caf28a98d45e7fe3e286afc74df</anchor>
      <arglist>(const char *name=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cLinkedList</name>
      <anchorfile>classcLinkedList.html</anchorfile>
      <anchor>a6e66956d970bf5bd721ca3c7e26aaefd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cLinkedList &amp;</type>
      <name>operator=</name>
      <anchorfile>classcLinkedList.html</anchorfile>
      <anchor>a25d1ad249e94fa0583ceedb1936ad04b</anchor>
      <arglist>(const cLinkedList &amp;queue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cLinkedList *</type>
      <name>dup</name>
      <anchorfile>classcLinkedList.html</anchorfile>
      <anchor>a7fe5c9830e9742eae814370f7ad030c6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcLinkedList.html</anchorfile>
      <anchor>a800ae2c95458116395a1d3c99d6ad460</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classcLinkedList.html</anchorfile>
      <anchor>a0b89919fbf83e1eb931484a75b919f62</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classcLinkedList.html</anchorfile>
      <anchor>acec0647adfe68c5b35b3899e57af2c8e</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>config</name>
      <anchorfile>classcLinkedList.html</anchorfile>
      <anchor>ac35d14e49b832fbb2bf7d7ce79c6fcac</anchor>
      <arglist>(VoidDelFunc _delfunc, VoidDupFunc _dupfunc, size_t _itemsize=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classcLinkedList.html</anchorfile>
      <anchor>a990ef93315271729c5d874d66e90ce8a</anchor>
      <arglist>(void *item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertBefore</name>
      <anchorfile>classcLinkedList.html</anchorfile>
      <anchor>a8c13953a5c403dfffa7d4e1f0a488363</anchor>
      <arglist>(void *where, void *item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertAfter</name>
      <anchorfile>classcLinkedList.html</anchorfile>
      <anchor>aebefdcff2330511834d3d0e92b6377e1</anchor>
      <arglist>(void *where, void *item)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>head</name>
      <anchorfile>classcLinkedList.html</anchorfile>
      <anchor>a84815256c700ec2f80d7d73f59a6e28e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>tail</name>
      <anchorfile>classcLinkedList.html</anchorfile>
      <anchor>a4a45bc14b501d3be6b36a751444a4913</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>remove</name>
      <anchorfile>classcLinkedList.html</anchorfile>
      <anchor>acba9fbd0139076462bf507e23cdd989b</anchor>
      <arglist>(void *item)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>pop</name>
      <anchorfile>classcLinkedList.html</anchorfile>
      <anchor>a8cc964ee2b30d3bd5b48e79f4d28be41</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLength</name>
      <anchorfile>classcLinkedList.html</anchorfile>
      <anchor>aa332d01738e361aa96f2e9363cfe689d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classcLinkedList.html</anchorfile>
      <anchor>ad4522951e9f1ecc41360cd319a183895</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>classcLinkedList.html</anchorfile>
      <anchor>a1bb2f052cacd795712fa49d8b5fae765</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classcLinkedList.html</anchorfile>
      <anchor>a3f4ae656d8069fe64b3df2bd4ccd8692</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classcLinkedList.html</anchorfile>
      <anchor>a4b3cb9c3ddc287fb0207255d593e2611</anchor>
      <arglist>(void *item) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classcLinkedList.html</anchorfile>
      <anchor>aa1d63a76d0e133cfd0eab476c84c9239</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cLinkedList::Iterator</name>
    <filename>classcLinkedList_1_1Iterator.html</filename>
    <member kind="function">
      <type></type>
      <name>Iterator</name>
      <anchorfile>classcLinkedList_1_1Iterator.html</anchorfile>
      <anchor>a8e4d5f4d51aa417e0077fb0d3b9d3bbf</anchor>
      <arglist>(const cLinkedList &amp;q, bool athead=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classcLinkedList_1_1Iterator.html</anchorfile>
      <anchor>a4e42c685b88e1e9f3178bbc6665f3763</anchor>
      <arglist>(const cLinkedList &amp;q, bool athead=true)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator()</name>
      <anchorfile>classcLinkedList_1_1Iterator.html</anchorfile>
      <anchor>a07e5f07908eb3da6fe8f42da1f16f802</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>end</name>
      <anchorfile>classcLinkedList_1_1Iterator.html</anchorfile>
      <anchor>a533e6dfef289239e2cb48c3020bd39c7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator++</name>
      <anchorfile>classcLinkedList_1_1Iterator.html</anchorfile>
      <anchor>a6288ce85d7e71e0341e3b9ca5364497f</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator--</name>
      <anchorfile>classcLinkedList_1_1Iterator.html</anchorfile>
      <anchor>ae32b31f546bd5fb3ab29e536552fea5c</anchor>
      <arglist>(int)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cListener</name>
    <filename>classcListener.html</filename>
    <base>cIListener</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>classcListener.html</anchorfile>
      <anchor>af7d85998b4ffa5f4a74d8cdb7cc27a65</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, bool b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>classcListener.html</anchorfile>
      <anchor>a3ffac0fad046c3cfe705cc3ebe38e19e</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, long l)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>classcListener.html</anchorfile>
      <anchor>a0097b819bad7cbaf7ece6373a6d41fe3</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, unsigned long l)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>classcListener.html</anchorfile>
      <anchor>a8847f0eb5ada8bb0db212ccb2b624e88</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, double d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>classcListener.html</anchorfile>
      <anchor>a868b5b0107f80b7d79b7d5482bd5a529</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, const SimTime &amp;t)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>classcListener.html</anchorfile>
      <anchor>a740f92ef36d59f20510d589a960fb1dd</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, const char *s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>classcListener.html</anchorfile>
      <anchor>a47a370cb9f30aa8200b78dde4706daa0</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, cObject *obj)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>unsupportedType</name>
      <anchorfile>classcListener.html</anchorfile>
      <anchor>aca76bf4645ed9403d878c636b3fb1fc2</anchor>
      <arglist>(simsignal_t signalID, const char *dataType)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cLongHistogram</name>
    <filename>classcLongHistogram.html</filename>
    <base>cHistogram</base>
    <member kind="function">
      <type></type>
      <name>cLongHistogram</name>
      <anchorfile>classcLongHistogram.html</anchorfile>
      <anchor>aa43b4682f0ec5aa97622e361b43b3546</anchor>
      <arglist>(const cLongHistogram &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cLongHistogram</name>
      <anchorfile>classcLongHistogram.html</anchorfile>
      <anchor>a41b4dffc6a1525f11c4d8b8bf8600946</anchor>
      <arglist>(const char *name=NULL, int numcells=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cLongHistogram</name>
      <anchorfile>classcLongHistogram.html</anchorfile>
      <anchor>ab8e16df6782a9551eb6b1e47ef4c1baa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cLongHistogram &amp;</type>
      <name>operator=</name>
      <anchorfile>classcLongHistogram.html</anchorfile>
      <anchor>af15a67e8dc126b3ba4e54bb2f754736c</anchor>
      <arglist>(const cLongHistogram &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cLongHistogram *</type>
      <name>dup</name>
      <anchorfile>classcLongHistogram.html</anchorfile>
      <anchor>a1bfd09767cab753dca17feb16fb47928</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collect</name>
      <anchorfile>classcLongHistogram.html</anchorfile>
      <anchor>aa17adc3aeed42e79f81316bc43c3df27</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collect</name>
      <anchorfile>classcLongHistogram.html</anchorfile>
      <anchor>a8b953e8e147e890c0bd888c95257113a</anchor>
      <arglist>(SimTime value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cLongParImpl</name>
    <filename>classcLongParImpl.html</filename>
    <base>cParImpl</base>
    <member kind="function">
      <type></type>
      <name>cLongParImpl</name>
      <anchorfile>classcLongParImpl.html</anchorfile>
      <anchor>ad6cbf4a6c661c2a67770639cdf85f3cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cLongParImpl</name>
      <anchorfile>classcLongParImpl.html</anchorfile>
      <anchor>a562d1da5431031e60e11831914e8b92f</anchor>
      <arglist>(const cLongParImpl &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cLongParImpl</name>
      <anchorfile>classcLongParImpl.html</anchorfile>
      <anchor>ab0e76be5b64c11beb52a8064a24ccb52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classcLongParImpl.html</anchorfile>
      <anchor>a252cf5fa6d0baf8b2f66e7b1c3d2ce8b</anchor>
      <arglist>(const cLongParImpl &amp;otherpar)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cLongParImpl *</type>
      <name>dup</name>
      <anchorfile>classcLongParImpl.html</anchorfile>
      <anchor>ab36086e1ce65b44b14c228ed920b4496</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classcLongParImpl.html</anchorfile>
      <anchor>a21a1a445d977182a23510339dbddbc6d</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classcLongParImpl.html</anchorfile>
      <anchor>a9d4687c97f4a810bc8dd351c60e3098a</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBoolValue</name>
      <anchorfile>classcLongParImpl.html</anchorfile>
      <anchor>abed64cb81cacc183035db4ff6e9d65f4</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLongValue</name>
      <anchorfile>classcLongParImpl.html</anchorfile>
      <anchor>a8c89d7ef7df03ec710d11cdc867fe7b1</anchor>
      <arglist>(long l)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDoubleValue</name>
      <anchorfile>classcLongParImpl.html</anchorfile>
      <anchor>a1de53707161fe1a9c6d0735e9edb45b9</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStringValue</name>
      <anchorfile>classcLongParImpl.html</anchorfile>
      <anchor>a7f06f7b63aaf98985b094a72cd1dc607</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setXMLValue</name>
      <anchorfile>classcLongParImpl.html</anchorfile>
      <anchor>a937e0476b2d3dc111032cfa089f0a981</anchor>
      <arglist>(cXMLElement *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setExpression</name>
      <anchorfile>classcLongParImpl.html</anchorfile>
      <anchor>a9a52c2faae573bcb85f5b69b2d4c454c</anchor>
      <arglist>(cExpression *e)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>boolValue</name>
      <anchorfile>classcLongParImpl.html</anchorfile>
      <anchor>a2152c9c438a7c76087849360e906fa74</anchor>
      <arglist>(cComponent *context) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>longValue</name>
      <anchorfile>classcLongParImpl.html</anchorfile>
      <anchor>a88a25f561801c55fea7935d36907cd87</anchor>
      <arglist>(cComponent *context) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>doubleValue</name>
      <anchorfile>classcLongParImpl.html</anchorfile>
      <anchor>a10608402e5d1027dae916197995562d7</anchor>
      <arglist>(cComponent *context) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>stringValue</name>
      <anchorfile>classcLongParImpl.html</anchorfile>
      <anchor>a546587c12ca519b46719286c8427f7d3</anchor>
      <arglist>(cComponent *context) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>stdstringValue</name>
      <anchorfile>classcLongParImpl.html</anchorfile>
      <anchor>a23bbd658576521a7abf0af2c9d356443</anchor>
      <arglist>(cComponent *context) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>xmlValue</name>
      <anchorfile>classcLongParImpl.html</anchorfile>
      <anchor>aa7aff74dd95045c032c65cfe0fdafd78</anchor>
      <arglist>(cComponent *context) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cExpression *</type>
      <name>getExpression</name>
      <anchorfile>classcLongParImpl.html</anchorfile>
      <anchor>a4551b4e4e04c78a35a6f76a4465d6afa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Type</type>
      <name>getType</name>
      <anchorfile>classcLongParImpl.html</anchorfile>
      <anchor>a5909c33e85a9e2ecbab994825233e818</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isNumeric</name>
      <anchorfile>classcLongParImpl.html</anchorfile>
      <anchor>a32f855a4201921473c3822f70b070007</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>convertToConst</name>
      <anchorfile>classcLongParImpl.html</anchorfile>
      <anchor>a40c494c8a95670f17911237de03dfbaf</anchor>
      <arglist>(cComponent *context)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classcLongParImpl.html</anchorfile>
      <anchor>a755a907f7152d357e088accc9801c10e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classcLongParImpl.html</anchorfile>
      <anchor>a849e001a0721c3078fe84e0c91799ab2</anchor>
      <arglist>(const char *text)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compare</name>
      <anchorfile>classcLongParImpl.html</anchorfile>
      <anchor>a70631fc860bf0bcc52853b3248f4f0fe</anchor>
      <arglist>(const cParImpl *other) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cMatchableString</name>
    <filename>classcMatchableString.html</filename>
    <base>cMatchExpression::Matchable</base>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAsString</name>
      <anchorfile>classcMatchableString.html</anchorfile>
      <anchor>a00b0a7a6290a88f1a157499eed3d1e30</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAsString</name>
      <anchorfile>classcMatchableString.html</anchorfile>
      <anchor>a7391476b7065a6ee6a5ff43aac128112</anchor>
      <arglist>(const char *attribute) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cMatchExpression</name>
    <filename>classcMatchExpression.html</filename>
    <class kind="class">cMatchExpression::Matchable</class>
    <member kind="function">
      <type></type>
      <name>cMatchExpression</name>
      <anchorfile>classcMatchExpression.html</anchorfile>
      <anchor>a3e04ebaa6d283cc2766a16264f8a4eab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cMatchExpression</name>
      <anchorfile>classcMatchExpression.html</anchorfile>
      <anchor>ae09fdae165831887ed50b71162b226ee</anchor>
      <arglist>(const char *pattern, bool dottedpath, bool fullstring, bool casesensitive)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~cMatchExpression</name>
      <anchorfile>classcMatchExpression.html</anchorfile>
      <anchor>a3d13614e6846fa77b321c99c9d7a03ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPattern</name>
      <anchorfile>classcMatchExpression.html</anchorfile>
      <anchor>ae284a4cc098efc0112f0b519eeec5f2f</anchor>
      <arglist>(const char *pattern, bool dottedpath, bool fullstring, bool casesensitive)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>matches</name>
      <anchorfile>classcMatchExpression.html</anchorfile>
      <anchor>af82b292db2f1d9f8847c1b3d67f87fda</anchor>
      <arglist>(const Matchable *object)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cMatchExpression::Matchable</name>
    <filename>classcMatchExpression_1_1Matchable.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getAsString</name>
      <anchorfile>classcMatchExpression_1_1Matchable.html</anchorfile>
      <anchor>a88335b1a6f499411514146b29cde2785</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getAsString</name>
      <anchorfile>classcMatchExpression_1_1Matchable.html</anchorfile>
      <anchor>a7a245bbe0b0385b81c771ac7d2e9fd1a</anchor>
      <arglist>(const char *attribute) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Matchable</name>
      <anchorfile>classcMatchExpression_1_1Matchable.html</anchorfile>
      <anchor>abad3185f3ba97cc24028fbe35333cd12</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cMersenneTwister</name>
    <filename>classcMersenneTwister.html</filename>
    <base>cRNG</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classcMersenneTwister.html</anchorfile>
      <anchor>a084946637987f6bd3320c7e0c4916264</anchor>
      <arglist>(int seedSet, int rngId, int numRngs, int parsimProcId, int parsimNumPartitions, cConfiguration *cfg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>selfTest</name>
      <anchorfile>classcMersenneTwister.html</anchorfile>
      <anchor>a1bd50b4b9affb5153bf86c62b46ac781</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned long</type>
      <name>intRand</name>
      <anchorfile>classcMersenneTwister.html</anchorfile>
      <anchor>a605761da367d16a45e31e9e276d6cdfe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned long</type>
      <name>intRandMax</name>
      <anchorfile>classcMersenneTwister.html</anchorfile>
      <anchor>af01c4d707333dfd9143265f011eebaf3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned long</type>
      <name>intRand</name>
      <anchorfile>classcMersenneTwister.html</anchorfile>
      <anchor>a87693bd9394ddf10da33c61b29af7240</anchor>
      <arglist>(unsigned long n)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>doubleRand</name>
      <anchorfile>classcMersenneTwister.html</anchorfile>
      <anchor>a9da95dbcd98df97640cd4863320910a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>doubleRandNonz</name>
      <anchorfile>classcMersenneTwister.html</anchorfile>
      <anchor>a9eed0e0418be0af1264fe4d4fc480b2d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>doubleRandIncl1</name>
      <anchorfile>classcMersenneTwister.html</anchorfile>
      <anchor>a8f2a005d1fc6c426b8454ec4f81a0407</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cMessage</name>
    <filename>classcMessage.html</filename>
    <base>cOwnedObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isPacket</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>a5fe07d91971cf8ed99b3786180079eb6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cMessage</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>aeb38209b684c7473c2bc30a3d6cac684</anchor>
      <arglist>(const cMessage &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cMessage</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>ab1b52a39fa97dec50fe408b724d39f3a</anchor>
      <arglist>(const char *name=NULL, short kind=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cMessage</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>aa8873b717d364aafd654c001358199e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>a33819e281a39aef981caa015538c07d7</anchor>
      <arglist>(const cMessage &amp;msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cMessage *</type>
      <name>dup</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>a231c291bf665945146df73676f591bc2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>a5fcbee3c0954ec6c16d71a45c1626335</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>detailedInfo</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>acf19374e4c09a0c583fb4a338eb937a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>aa04f09128a779c534046207239f7e6c9</anchor>
      <arglist>(cVisitor *v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>a06b28fc3a4c33557ed3cf0c501bc333d</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>a230773cacf1cb3c80816c30ca5fd3ea6</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setKind</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>a67d6d293fbc28aa92362c19fa9bdb412</anchor>
      <arglist>(short k)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSchedulingPriority</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>a205278b4eaf8a54a901537f6e6cfae59</anchor>
      <arglist>(short p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTimestamp</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>a904f6c30bbfcd340abd5a15f0c24f3a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTimestamp</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>aa7d5dc9ce073541adc4d72429de90161</anchor>
      <arglist>(simtime_t t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setContextPointer</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>a526301f559183d7730af93c88bda120d</anchor>
      <arglist>(void *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setControlInfo</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>a833f4b7cca888f01d91c50ec43101aae</anchor>
      <arglist>(cObject *p)</arglist>
    </member>
    <member kind="function">
      <type>cObject *</type>
      <name>removeControlInfo</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>a92a7d217a94ea8372dc4da2f4156159d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>short</type>
      <name>getKind</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>a45a79146f61f6d3ae34fac3eb8473162</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>short</type>
      <name>getSchedulingPriority</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>ac08679889b931d6e1ecf07a5f995e38b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>simtime_t_cref</type>
      <name>getTimestamp</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>ab59ccaceae8d27a7afc73ea57f2b9cfd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>getContextPointer</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>aa193d96ed4352964ba32a1a7896ed200</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cObject *</type>
      <name>getControlInfo</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>a523ee002d73b7f6e3440a55aa6fd0593</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cArray &amp;</type>
      <name>getParList</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>a5902586e577cb30eed9fdd0acf184c15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cMsgPar &amp;</type>
      <name>addPar</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>aad3341c7c39253ed476cc3e57c053f3e</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cMsgPar &amp;</type>
      <name>addPar</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>a7ca810a1744730108b72cf29cb84079a</anchor>
      <arglist>(cMsgPar *p)</arglist>
    </member>
    <member kind="function">
      <type>_OPPDEPRECATED cMsgPar &amp;</type>
      <name>addPar</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>ad272e01ed6823b33ac16f0f1ddf0169e</anchor>
      <arglist>(cMsgPar &amp;p)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cMsgPar &amp;</type>
      <name>par</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>a88a0ffa58da1fee606b630c177cf49fd</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cMsgPar &amp;</type>
      <name>par</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>a5a6b8baa984e397c5522e594d7e18cad</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>findPar</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>a8d0c2ea9badfc1e29860c5369ff4e945</anchor>
      <arglist>(const char *s) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasPar</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>a4d5db8a609199a86d4a516d7cbe5d0cf</anchor>
      <arglist>(const char *s) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>addObject</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>a50af5b13501cb5ef7dd9658385b01785</anchor>
      <arglist>(cObject *p)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>getObject</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>a9b8b2de4468983870de00ab24898b3d4</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasObject</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>a3fbda16d14f81007e05aa484653d5b2a</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>removeObject</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>a6a67a238d7ac87e07e8a92ec85c64d11</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>removeObject</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>a4b5f1caa6e1d407fb024a5e40c6732a4</anchor>
      <arglist>(cObject *p)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSelfMessage</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>add2134e78e0b47ee6abf83a382802d82</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isScheduled</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>aa3bacf523e80bcfac2276ebb7f54a176</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>getSenderModule</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>a4d4795f850b27139665c2b42575f2a59</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cGate *</type>
      <name>getSenderGate</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>acfb1ad3a122bd05d55a805d234ca3504</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>getArrivalModule</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>a3cbe9f5cab69412b3acb1aa6df618e5d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cGate *</type>
      <name>getArrivalGate</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>a1aeaf09baf5a3584c17cd64edccc1037</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSenderModuleId</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>acc0685e6ab2d2cf0538ec51ab5326fd6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSenderGateId</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>a536cc8f487691247bd2c7020619668ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getArrivalModuleId</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>a49f3764f84e45b58a7b862c828f90475</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getArrivalGateId</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>a6250070d489a6fca8f3ad2861d6a4d8c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>simtime_t_cref</type>
      <name>getCreationTime</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>a5a515f2174ddbafaa9ad1995afbb2c43</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>simtime_t_cref</type>
      <name>getSendingTime</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>ada58040c51ac17b3635bd0f6692216a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>simtime_t_cref</type>
      <name>getArrivalTime</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>a39358ceaf5e31269d66fa0cc8b603191</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>arrivedOn</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>a9a3cc8a1c8bb6f60d73120fe03fa59d4</anchor>
      <arglist>(int gateId) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>arrivedOn</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>a14df71e0f090082187583910574f888e</anchor>
      <arglist>(const char *gatename) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>arrivedOn</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>a39b946a735cdd822671d9aca3adbd42c</anchor>
      <arglist>(const char *gatename, int gateindex) const </arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>getId</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>a33f235d82c6b6e442161829a170e55d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>getTreeId</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>a031015c6a020dd5d7f5747f055ef96e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getDisplayString</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>a1e6d9046cd69384539bd34e90be1d4da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static long</type>
      <name>getTotalMessageCount</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>a2adc0bea2e618f9440039501984a657a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static long</type>
      <name>getLiveMessageCount</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>acf038f3f6cd76c5993ac217d4828575c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>resetMessageCounters</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>aaa4b07f99fc5addf90e1e2ec0cbca4bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>cMessageHeap</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>acbb0835440ec2391ce312e670da8249d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cMessageHeap</name>
    <filename>classcMessageHeap.html</filename>
    <base>cOwnedObject</base>
    <class kind="class">cMessageHeap::Iterator</class>
    <member kind="function">
      <type></type>
      <name>cMessageHeap</name>
      <anchorfile>classcMessageHeap.html</anchorfile>
      <anchor>a1a546f77dfa058a8856be08ea1a35fee</anchor>
      <arglist>(const cMessageHeap &amp;msgq)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cMessageHeap</name>
      <anchorfile>classcMessageHeap.html</anchorfile>
      <anchor>a86a1aa8129a0e6a705e18fd875eb0ade</anchor>
      <arglist>(const char *name=NULL, int size=128)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cMessageHeap</name>
      <anchorfile>classcMessageHeap.html</anchorfile>
      <anchor>ab0fc65dda88a26e390908af790c99fa5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cMessageHeap &amp;</type>
      <name>operator=</name>
      <anchorfile>classcMessageHeap.html</anchorfile>
      <anchor>a9f3da5e1af3744710138e091a995e1af</anchor>
      <arglist>(const cMessageHeap &amp;msgqueue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cMessageHeap *</type>
      <name>dup</name>
      <anchorfile>classcMessageHeap.html</anchorfile>
      <anchor>a72d70b97c5792693e97cc0c8b17ec9f1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcMessageHeap.html</anchorfile>
      <anchor>a12c399e81d42455376f66913c6b28edf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classcMessageHeap.html</anchorfile>
      <anchor>abd728de9766b5dfbaa9b6e2455b517e6</anchor>
      <arglist>(cVisitor *v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classcMessageHeap.html</anchorfile>
      <anchor>a2d95cd7cbe767f99fa0e5c0db750f0f4</anchor>
      <arglist>(cMessage *event)</arglist>
    </member>
    <member kind="function">
      <type>cMessage *</type>
      <name>peekFirst</name>
      <anchorfile>classcMessageHeap.html</anchorfile>
      <anchor>a7f3a9ac51503b8793a72505cf1f4586c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cMessage *</type>
      <name>peek</name>
      <anchorfile>classcMessageHeap.html</anchorfile>
      <anchor>aafa11c9b7648634a44a287cca02e4386</anchor>
      <arglist>(int m)</arglist>
    </member>
    <member kind="function">
      <type>cMessage *</type>
      <name>removeFirst</name>
      <anchorfile>classcMessageHeap.html</anchorfile>
      <anchor>a28793042906e29f560b7232fe1a0ac9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cMessage *</type>
      <name>remove</name>
      <anchorfile>classcMessageHeap.html</anchorfile>
      <anchor>afaffbc98434172f9c6b48d7901133488</anchor>
      <arglist>(cMessage *event)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sort</name>
      <anchorfile>classcMessageHeap.html</anchorfile>
      <anchor>a7865ce4b655304d39cf94c990158ab32</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classcMessageHeap.html</anchorfile>
      <anchor>ae893978970a36a37b360b4881d0bf249</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLength</name>
      <anchorfile>classcMessageHeap.html</anchorfile>
      <anchor>a079b3193186a4d3f7e74e9fb54ccf719</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classcMessageHeap.html</anchorfile>
      <anchor>ae1c0058b0c17342117614817116ca5c1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>classcMessageHeap.html</anchorfile>
      <anchor>a3e9f1f9b1c8d622f8dbbd94d9e6f4355</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classcMessageHeap.html</anchorfile>
      <anchor>a0408d48b95e325b5a56a4e6c2dfa176d</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cMessageHeap::Iterator</name>
    <filename>classcMessageHeap_1_1Iterator.html</filename>
    <member kind="function">
      <type></type>
      <name>Iterator</name>
      <anchorfile>classcMessageHeap_1_1Iterator.html</anchorfile>
      <anchor>afe76ca928ad098fdc5a3f51ee82267de</anchor>
      <arglist>(const cMessageHeap &amp;mh)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classcMessageHeap_1_1Iterator.html</anchorfile>
      <anchor>a88a7bc8c5cdb59afb4de85bfdb7cc6d9</anchor>
      <arglist>(const cMessageHeap &amp;mh)</arglist>
    </member>
    <member kind="function">
      <type>cMessage *</type>
      <name>operator()</name>
      <anchorfile>classcMessageHeap_1_1Iterator.html</anchorfile>
      <anchor>ac3df6dec64e602b35750fe1548f282fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cMessage *</type>
      <name>operator++</name>
      <anchorfile>classcMessageHeap_1_1Iterator.html</anchorfile>
      <anchor>a8b0228caf1225f75f551c8689e17473a</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>end</name>
      <anchorfile>classcMessageHeap_1_1Iterator.html</anchorfile>
      <anchor>aeadf03e53540207e066bc0a279029225</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cMessagePrinter</name>
    <filename>classcMessagePrinter.html</filename>
    <base>cNoncopyableOwnedObject</base>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getScoreFor</name>
      <anchorfile>classcMessagePrinter.html</anchorfile>
      <anchor>a38e7307af78880e9b7f90dd79b44e272</anchor>
      <arglist>(cMessage *msg) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>printMessage</name>
      <anchorfile>classcMessagePrinter.html</anchorfile>
      <anchor>ac0701affd28993d2ac7614f6f723e781</anchor>
      <arglist>(std::ostream &amp;os, cMessage *msg) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cMethodCallContextSwitcher</name>
    <filename>classcMethodCallContextSwitcher.html</filename>
    <base>cContextSwitcher</base>
    <member kind="function">
      <type></type>
      <name>cMethodCallContextSwitcher</name>
      <anchorfile>classcMethodCallContextSwitcher.html</anchorfile>
      <anchor>a8d7c674557b38f45a670a7aab9983c70</anchor>
      <arglist>(const cComponent *newContext)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~cMethodCallContextSwitcher</name>
      <anchorfile>classcMethodCallContextSwitcher.html</anchorfile>
      <anchor>a7bffda496b435d3bed9d470710ce3cb4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>methodCall</name>
      <anchorfile>classcMethodCallContextSwitcher.html</anchorfile>
      <anchor>ab2cb99133e0785c5d846118a20d05bf6</anchor>
      <arglist>(const char *methodFmt,...)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cModelChangeNotification</name>
    <filename>classcModelChangeNotification.html</filename>
    <base>cObject</base>
    <base protection="private">noncopyable</base>
  </compound>
  <compound kind="class">
    <name>cModule</name>
    <filename>classcModule.html</filename>
    <base>cComponent</base>
    <class kind="class">cModule::ChannelIterator</class>
    <class kind="class">cModule::GateIterator</class>
    <class kind="class">cModule::SubmoduleIterator</class>
    <member kind="function">
      <type></type>
      <name>cModule</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>aa91df47dc373480450b61c62fbad934c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cModule</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>a6a621fa6673160bb69c7dc4fe9eb64c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>a091296dfd37373944cb1532b5c11dd87</anchor>
      <arglist>(cVisitor *v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setName</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>a146a9b2d1c67a5c8bb1b54700fca465d</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getFullName</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>a8adab0f2496267094680580de65fe1a0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getFullPath</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>a6aa348e7021a44dd3ce9170569ee210a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>info</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>a65c95ee15c027f7d4025a098df236787</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cGate *</type>
      <name>addGate</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>a7e62ef5ed283503f29923fea5f2db310</anchor>
      <arglist>(const char *gatename, cGate::Type type, bool isvector=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setGateSize</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>aaa4fcf1c668078ab20be7f56ced5c5d6</anchor>
      <arglist>(const char *gatename, int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cGate *</type>
      <name>getOrCreateFirstUnconnectedGate</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>a26cef93c2761379ac06ae4b2d66ade27</anchor>
      <arglist>(const char *gatename, char suffix, bool inside, bool expand)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getOrCreateFirstUnconnectedGatePair</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>a8995ef1fc6ed92f6b833cf9c9ad1b88f</anchor>
      <arglist>(const char *gatename, bool inside, bool expand, cGate *&amp;gatein, cGate *&amp;gateout)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finalizeParameters</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>a4bbe79e47eae7740fa696afaf0f5f031</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>buildInside</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>a086c439380f400dc6254b5b2d5f1d408</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isSimple</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>a71ee3edc64c50bd9efa5b8d43d155d99</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isModule</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>aad70f0f04b3a3ec056d2fd139edc30ee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isPlaceholder</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>a5cd9789d5e4e5c7ee172cb5f251e3951</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cModule *</type>
      <name>getParentModule</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>a6e487556d9301e41654d25c767d58148</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cModuleType *</type>
      <name>getModuleType</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>a32187b0d8cfa7cee175432073caf6d5c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cProperties *</type>
      <name>getProperties</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>a7d6ccba3d30c32fdb3997093f36872a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getId</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>a592b754c94045c707e4f5155f00c18f2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVector</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>abc24e9322a19c30da173000110f26596</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIndex</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>a604e26394d77938a860eeb4452f25606</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getVectorSize</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>a0a24114f974cfae3444806bd951fc948</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>ad08955e71fd144469a04f0ea26c22766</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasSubmodules</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>af61ae8cc41f24a28760a4970dc70cd84</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>findSubmodule</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>a4c8b47a44c467739610b96d1a2fa979e</anchor>
      <arglist>(const char *submodname, int idx=-1)</arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>getSubmodule</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>a99f25de7d151adbe802c9b8811ee8e5b</anchor>
      <arglist>(const char *submodname, int idx=-1)</arglist>
    </member>
    <member kind="function">
      <type>_OPPDEPRECATED cModule *</type>
      <name>getModuleByRelativePath</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>ae77393ee1923a33e6fe59e6373964f19</anchor>
      <arglist>(const char *path)</arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>getModuleByPath</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>aa2b5815855954afa5056ea8df9a98001</anchor>
      <arglist>(const char *path)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cGate *</type>
      <name>gate</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>ac81230070167bdc3db38300ea101f1ab</anchor>
      <arglist>(const char *gatename, int index=-1)</arglist>
    </member>
    <member kind="function">
      <type>const cGate *</type>
      <name>gate</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>a8a8361fffa84de74b8bf6b549c70543b</anchor>
      <arglist>(const char *gatename, int index=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cGate *</type>
      <name>gateHalf</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>ad9aedd5fd1dbcfe37baed7e4526c8c8d</anchor>
      <arglist>(const char *gatename, cGate::Type type, int index=-1)</arglist>
    </member>
    <member kind="function">
      <type>const cGate *</type>
      <name>gateHalf</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>a1a67e61c277bb1d92b0ac3a5c38acfd5</anchor>
      <arglist>(const char *gatename, cGate::Type type, int index=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasGate</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>a6ced7b6cd78db73cb1506a5ec15dc562</anchor>
      <arglist>(const char *gatename, int index=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>findGate</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>aa1c2b8a89896d26041a0cdb1bdd11336</anchor>
      <arglist>(const char *gatename, int index=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cGate *</type>
      <name>gate</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>a106e3be27a4f665deb922d125bf6936a</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function">
      <type>const cGate *</type>
      <name>gate</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>a604d651ab2c45c51c11712ac1e86c9ce</anchor>
      <arglist>(int id) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deleteGate</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>a3beb4e7ef94e2b8cff4a5b90fcb7c743</anchor>
      <arglist>(const char *gatename)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; const char * &gt;</type>
      <name>getGateNames</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>a97e1b240b3f4c566436180a6471a850b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cGate::Type</type>
      <name>gateType</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>afdbf2cebc7f52d6518c6f67819d1ec76</anchor>
      <arglist>(const char *gatename) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isGateVector</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>a4f373def6f1b151fea20a4b8e72de9f6</anchor>
      <arglist>(const char *gatename) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>gateSize</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>ac63b0b9c805c5f335d274195f2fdb28c</anchor>
      <arglist>(const char *gatename) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>gateBaseId</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>a4d11f590eb1770be0e418da02c68e785</anchor>
      <arglist>(const char *gatename) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkInternalConnections</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>abd0b3bd68688e456141f855b16a8f836</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>getAncestorPar</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>ad59a57aa7f6b19ff0061cbd87917cb74</anchor>
      <arglist>(const char *parname)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cCanvas *</type>
      <name>getCanvas</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>a818055c32ea09190dcf60200ef06b279</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callInitialize</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>a2479e23e50fd2286730892ef59cc784e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>callInitialize</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>afa97027522d4296a3436a6bb5cd2fa6e</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callFinish</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>a200cedd49110c4b22018dd7ce669b073</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>scheduleStart</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>ad9c2684239e372abffb4a86ed56a2e17</anchor>
      <arglist>(simtime_t t)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deleteModule</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>aa40e04f3a15395bfad553227c0a51866</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>changeParentTo</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>af9e5fae012b14606d5e58cab261c91af</anchor>
      <arglist>(cModule *mod)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>cGate</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>ad65e9293fb55c44ed30eef8b1f27df95</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>cSimulation</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>a3c6add72105ce0170138d90021da4d97</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>cModuleType</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>ac019ff97fbe4ac5f1ed4f9e2953a8573</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>cChannelType</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>a34161f0247581027e5e313d34f76fdbf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cModule::ChannelIterator</name>
    <filename>classcModule_1_1ChannelIterator.html</filename>
    <member kind="function">
      <type></type>
      <name>ChannelIterator</name>
      <anchorfile>classcModule_1_1ChannelIterator.html</anchorfile>
      <anchor>aaf74e702306a58882e5c78f59e705f50</anchor>
      <arglist>(const cModule *parentmodule)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classcModule_1_1ChannelIterator.html</anchorfile>
      <anchor>a6d2793a95f58080665bfcd37a33a3bf6</anchor>
      <arglist>(const cModule *parentmodule)</arglist>
    </member>
    <member kind="function">
      <type>cChannel *</type>
      <name>operator()</name>
      <anchorfile>classcModule_1_1ChannelIterator.html</anchorfile>
      <anchor>a73ac9dbfbb38006ac935cd4b2e4ae016</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>end</name>
      <anchorfile>classcModule_1_1ChannelIterator.html</anchorfile>
      <anchor>a92e85798faf8459935e3f33205234829</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cChannel *</type>
      <name>operator++</name>
      <anchorfile>classcModule_1_1ChannelIterator.html</anchorfile>
      <anchor>a0038680e699780ebeb0df033f1ac66fb</anchor>
      <arglist>(int)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cModule::GateIterator</name>
    <filename>classcModule_1_1GateIterator.html</filename>
    <member kind="function">
      <type></type>
      <name>GateIterator</name>
      <anchorfile>classcModule_1_1GateIterator.html</anchorfile>
      <anchor>a5fdb5905e20e3a4c44ef90029de7e71d</anchor>
      <arglist>(const cModule *m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classcModule_1_1GateIterator.html</anchorfile>
      <anchor>a07db44480935928861fe99883c54f450</anchor>
      <arglist>(const cModule *m)</arglist>
    </member>
    <member kind="function">
      <type>cGate *</type>
      <name>operator()</name>
      <anchorfile>classcModule_1_1GateIterator.html</anchorfile>
      <anchor>ad343327a9dc19740a74ed9247f4e0a5b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>end</name>
      <anchorfile>classcModule_1_1GateIterator.html</anchorfile>
      <anchor>ad360f0ad13ed716296bae4549f09b60c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cGate *</type>
      <name>operator++</name>
      <anchorfile>classcModule_1_1GateIterator.html</anchorfile>
      <anchor>a83e87b6bdba8ed8a5edfd30282566f28</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>cGate *</type>
      <name>operator+=</name>
      <anchorfile>classcModule_1_1GateIterator.html</anchorfile>
      <anchor>afb4c1888705b0e63e2aacade5d041630</anchor>
      <arglist>(int k)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cModule::SubmoduleIterator</name>
    <filename>classcModule_1_1SubmoduleIterator.html</filename>
    <member kind="function">
      <type></type>
      <name>SubmoduleIterator</name>
      <anchorfile>classcModule_1_1SubmoduleIterator.html</anchorfile>
      <anchor>a134de864382c322be840c4a480c52ff3</anchor>
      <arglist>(const cModule *m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classcModule_1_1SubmoduleIterator.html</anchorfile>
      <anchor>a14a3d9f409c33734fd577b030bf5dbfa</anchor>
      <arglist>(const cModule *m)</arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>operator()</name>
      <anchorfile>classcModule_1_1SubmoduleIterator.html</anchorfile>
      <anchor>ae101821a36dfe0c9e05e5f331c491257</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>end</name>
      <anchorfile>classcModule_1_1SubmoduleIterator.html</anchorfile>
      <anchor>a9417073e8a01bc50238b33aeb0541e02</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>operator++</name>
      <anchorfile>classcModule_1_1SubmoduleIterator.html</anchorfile>
      <anchor>a5b7801f22fb82ceacc73baa1cd950625</anchor>
      <arglist>(int)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cModuleType</name>
    <filename>classcModuleType.html</filename>
    <base>cComponentType</base>
    <member kind="function">
      <type></type>
      <name>cModuleType</name>
      <anchorfile>classcModuleType.html</anchorfile>
      <anchor>a562d9ad72b3672f85e803e267eb8375a</anchor>
      <arglist>(const char *qname=NULL)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isNetwork</name>
      <anchorfile>classcModuleType.html</anchorfile>
      <anchor>aa19b308f94153a280b524484b3a2ce0a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isSimple</name>
      <anchorfile>classcModuleType.html</anchorfile>
      <anchor>afeaa21345fa75743ea4f85bb159d895b</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cModule *</type>
      <name>create</name>
      <anchorfile>classcModuleType.html</anchorfile>
      <anchor>a60287ca91b5283cf33bc03b7d45fc2cb</anchor>
      <arglist>(const char *name, cModule *parentmod)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cModule *</type>
      <name>create</name>
      <anchorfile>classcModuleType.html</anchorfile>
      <anchor>a2b12dddaff908417589ffd61e14077af</anchor>
      <arglist>(const char *name, cModule *parentmod, int vectorsize, int index)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cModule *</type>
      <name>createScheduleInit</name>
      <anchorfile>classcModuleType.html</anchorfile>
      <anchor>a6ace0d58daca942cd869210990c8b93e</anchor>
      <arglist>(const char *name, cModule *parentmod)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cModuleType *</type>
      <name>find</name>
      <anchorfile>classcModuleType.html</anchorfile>
      <anchor>a0d45b810021ea9d8d5b523a6bd65046d</anchor>
      <arglist>(const char *qname)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cModuleType *</type>
      <name>get</name>
      <anchorfile>classcModuleType.html</anchorfile>
      <anchor>aee0c5515e28c97fc4e245fe4ae576bc5</anchor>
      <arglist>(const char *qname)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual cModule *</type>
      <name>createModuleObject</name>
      <anchorfile>classcModuleType.html</anchorfile>
      <anchor>afb82ff484587de07d5d1f0c9b2b109e7</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>addParametersAndGatesTo</name>
      <anchorfile>classcModuleType.html</anchorfile>
      <anchor>adaf74edb4890fea9563740ac62dae78b</anchor>
      <arglist>(cModule *mod)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>setupGateVectors</name>
      <anchorfile>classcModuleType.html</anchorfile>
      <anchor>a50026f572ef5cf6b079b11c2523209fa</anchor>
      <arglist>(cModule *mod)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>buildInside</name>
      <anchorfile>classcModuleType.html</anchorfile>
      <anchor>a6c69d0347eed6d145dc74ca7779ed189</anchor>
      <arglist>(cModule *mod)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>cModule *</type>
      <name>instantiateModuleClass</name>
      <anchorfile>classcModuleType.html</anchorfile>
      <anchor>a40d34f7955f1c3a34c1229a33d826b82</anchor>
      <arglist>(const char *classname)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>cModule</name>
      <anchorfile>classcModuleType.html</anchorfile>
      <anchor>a37aa51760d5f85b54d00668308b926c8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cMsgPar</name>
    <filename>classcMsgPar.html</filename>
    <base>cOwnedObject</base>
    <member kind="function">
      <type></type>
      <name>cMsgPar</name>
      <anchorfile>classcMsgPar.html</anchorfile>
      <anchor>a1a8928a33090e7a86d38ecf985f48cce</anchor>
      <arglist>(const cMsgPar &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cMsgPar</name>
      <anchorfile>classcMsgPar.html</anchorfile>
      <anchor>a06c8b808143898c74052d99b6cb7b251</anchor>
      <arglist>(const char *name=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cMsgPar</name>
      <anchorfile>classcMsgPar.html</anchorfile>
      <anchor>a533fe3d49efc0afa8eef64afc3f985c9</anchor>
      <arglist>(const char *name, cMsgPar &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cMsgPar</name>
      <anchorfile>classcMsgPar.html</anchorfile>
      <anchor>ac845e2d805643b5c92d3e13c8a9e8a5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classcMsgPar.html</anchorfile>
      <anchor>acb81de69997f5d716db486c335404514</anchor>
      <arglist>(const cMsgPar &amp;otherpar)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cMsgPar *</type>
      <name>dup</name>
      <anchorfile>classcMsgPar.html</anchorfile>
      <anchor>ac07c0a3902139d911a59fa5f23ee8077</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcMsgPar.html</anchorfile>
      <anchor>a5508f7f81eded5f2dd8731d6f4755c50</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>detailedInfo</name>
      <anchorfile>classcMsgPar.html</anchorfile>
      <anchor>a409d6f57d1abd03fe6059bbdb44d05b4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classcMsgPar.html</anchorfile>
      <anchor>abf161381e19eaf1bb2b1d871c8e85054</anchor>
      <arglist>(cVisitor *v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classcMsgPar.html</anchorfile>
      <anchor>a5e09e6ef31ecb0582ac86fb161e750e4</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classcMsgPar.html</anchorfile>
      <anchor>a8dbd23adb321abed525645cd329a6db9</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>setBoolValue</name>
      <anchorfile>classcMsgPar.html</anchorfile>
      <anchor>a57069cdbe68ce64d572330c6fec3da5d</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>setLongValue</name>
      <anchorfile>classcMsgPar.html</anchorfile>
      <anchor>a21b6f136204e74488d3cc3534c1ffc33</anchor>
      <arglist>(long l)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>setStringValue</name>
      <anchorfile>classcMsgPar.html</anchorfile>
      <anchor>aa2c7963e1ec7adc0fb8eec4ca0dd84a7</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>setDoubleValue</name>
      <anchorfile>classcMsgPar.html</anchorfile>
      <anchor>a8c6309ea045fb2ae75f5541657880c86</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>setDoubleValue</name>
      <anchorfile>classcMsgPar.html</anchorfile>
      <anchor>a38eaf0a8cd74d17e18de0eaf148a86cc</anchor>
      <arglist>(cStatistic *res)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>setDoubleValue</name>
      <anchorfile>classcMsgPar.html</anchorfile>
      <anchor>a8c9a33d4b2d9508f1f471b3b6881b2fa</anchor>
      <arglist>(MathFuncNoArg f)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>setDoubleValue</name>
      <anchorfile>classcMsgPar.html</anchorfile>
      <anchor>a47374837b48ba4c65dfe3e94b6125d03</anchor>
      <arglist>(MathFunc1Arg f, double p1)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>setDoubleValue</name>
      <anchorfile>classcMsgPar.html</anchorfile>
      <anchor>a10d645c6f630168f61644f0d584af6f3</anchor>
      <arglist>(MathFunc2Args f, double p1, double p2)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>setDoubleValue</name>
      <anchorfile>classcMsgPar.html</anchorfile>
      <anchor>aceacb6b174cec73a987fe67f3965cf90</anchor>
      <arglist>(MathFunc3Args f, double p1, double p2, double p3)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>setDoubleValue</name>
      <anchorfile>classcMsgPar.html</anchorfile>
      <anchor>a4d691be895d4724a971805d8cea15ffe</anchor>
      <arglist>(MathFunc4Args f, double p1, double p2, double p3, double p4)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>setPointerValue</name>
      <anchorfile>classcMsgPar.html</anchorfile>
      <anchor>af9134e9349451fa427e75e84cabd41d0</anchor>
      <arglist>(void *ptr)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>setObjectValue</name>
      <anchorfile>classcMsgPar.html</anchorfile>
      <anchor>a3f76413e8e87e6d411104a4a45962225</anchor>
      <arglist>(cOwnedObject *obj)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>setXMLValue</name>
      <anchorfile>classcMsgPar.html</anchorfile>
      <anchor>a1e089533ca3e190390e2faff05549738</anchor>
      <arglist>(cXMLElement *node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>configPointer</name>
      <anchorfile>classcMsgPar.html</anchorfile>
      <anchor>aa974cd2931c50c4b6c75b2d20edca9de</anchor>
      <arglist>(VoidDelFunc delfunc, VoidDupFunc dupfunc, size_t itemsize=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTakeOwnership</name>
      <anchorfile>classcMsgPar.html</anchorfile>
      <anchor>a6704429e09488e64eaa755fc17b3a8ff</anchor>
      <arglist>(bool tk)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getTakeOwnership</name>
      <anchorfile>classcMsgPar.html</anchorfile>
      <anchor>a55633d0595c847f819545ab5befd3fa6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>boolValue</name>
      <anchorfile>classcMsgPar.html</anchorfile>
      <anchor>a5e75184a28cebdd81933da36ada5bdc3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>longValue</name>
      <anchorfile>classcMsgPar.html</anchorfile>
      <anchor>a847f601f9da468341aa2e88db9fbc02f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>stringValue</name>
      <anchorfile>classcMsgPar.html</anchorfile>
      <anchor>a548051cb33407bd704216b8fbd851b59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>doubleValue</name>
      <anchorfile>classcMsgPar.html</anchorfile>
      <anchor>ae2facc34d3e7a21a7911ba756b3aa063</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>pointerValue</name>
      <anchorfile>classcMsgPar.html</anchorfile>
      <anchor>a0abb227ecfb8069b149d0a40926a9261</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cOwnedObject *</type>
      <name>getObjectValue</name>
      <anchorfile>classcMsgPar.html</anchorfile>
      <anchor>aaa6b46efbd3daec46ec7281eba8c5dc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cXMLElement *</type>
      <name>xmlValue</name>
      <anchorfile>classcMsgPar.html</anchorfile>
      <anchor>a6b30a52dd0bd232193a1606392858456</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>getType</name>
      <anchorfile>classcMsgPar.html</anchorfile>
      <anchor>ae5262c382acb4345810f4c235f5f50a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumeric</name>
      <anchorfile>classcMsgPar.html</anchorfile>
      <anchor>aec5cda7ac0eb5ed456aaef6311d164a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConstant</name>
      <anchorfile>classcMsgPar.html</anchorfile>
      <anchor>a4cb5e42f210f04c58962fdebd7114343</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasChanged</name>
      <anchorfile>classcMsgPar.html</anchorfile>
      <anchor>ac53c9224256b56804a180a0d69dd9641</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertToConst</name>
      <anchorfile>classcMsgPar.html</anchorfile>
      <anchor>ab396b5bb5e60ce25562fb88048717084</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equalsTo</name>
      <anchorfile>classcMsgPar.html</anchorfile>
      <anchor>afb3fe56cb7cafc46c368adc9a3e993e9</anchor>
      <arglist>(cMsgPar *par)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classcMsgPar.html</anchorfile>
      <anchor>aba4f40a35bf3dd60996ac61680577d50</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>_OPPDEPRECATED std::string</type>
      <name>getAsText</name>
      <anchorfile>classcMsgPar.html</anchorfile>
      <anchor>a3c6d03bae82e1ea36fc569a3943ac648</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>parse</name>
      <anchorfile>classcMsgPar.html</anchorfile>
      <anchor>a3bf68616e8d4ad6dd615b55abf6afecc</anchor>
      <arglist>(const char *text, char type=&apos;?&apos;)</arglist>
    </member>
    <member kind="function">
      <type>_OPPDEPRECATED bool</type>
      <name>setFromText</name>
      <anchorfile>classcMsgPar.html</anchorfile>
      <anchor>a2b01eb567e76e8a69e37e2ab30b1687c</anchor>
      <arglist>(const char *text, char type=&apos;?&apos;)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classcMsgPar.html</anchorfile>
      <anchor>af3d0a202ae2bfab7f9c4a2c541efd012</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classcMsgPar.html</anchorfile>
      <anchor>a2bbf0162e5d3e25672cf589aa6045daa</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classcMsgPar.html</anchorfile>
      <anchor>a7a065dfc804484fa1d2ee58547c7fc90</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classcMsgPar.html</anchorfile>
      <anchor>a33df6317d0a28cb5c5276abbca738aac</anchor>
      <arglist>(unsigned char c)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classcMsgPar.html</anchorfile>
      <anchor>a2d0790c3cc367bf9e696b326062deee4</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classcMsgPar.html</anchorfile>
      <anchor>a822baefb099c234796d63e55a9561536</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classcMsgPar.html</anchorfile>
      <anchor>af5e44e4b1dac26945ee014a5700aa663</anchor>
      <arglist>(short i)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classcMsgPar.html</anchorfile>
      <anchor>ae47e9fa3c2425346f0c01e8615195937</anchor>
      <arglist>(unsigned short i)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classcMsgPar.html</anchorfile>
      <anchor>a24cbfa18bf495674e4735e9a1eac39a3</anchor>
      <arglist>(long l)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classcMsgPar.html</anchorfile>
      <anchor>a85c12869f2a4f1fd57934ae7a54c81b5</anchor>
      <arglist>(unsigned long l)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classcMsgPar.html</anchorfile>
      <anchor>a4220e696de8b88b36424452d2cbe6506</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classcMsgPar.html</anchorfile>
      <anchor>aa5306f759e22beac7cbd91d7562a6793</anchor>
      <arglist>(long double d)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classcMsgPar.html</anchorfile>
      <anchor>a6988fe47ec8b524079faaf1a8c5d59b3</anchor>
      <arglist>(void *ptr)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classcMsgPar.html</anchorfile>
      <anchor>acead42a5e452a1a75fdec51dff739cc4</anchor>
      <arglist>(cOwnedObject *obj)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classcMsgPar.html</anchorfile>
      <anchor>a613498623f1dab330a30698e052f209a</anchor>
      <arglist>(cXMLElement *node)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classcMsgPar.html</anchorfile>
      <anchor>a97d4ddc26d37c0d6d4fc4184f003b774</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const char *</name>
      <anchorfile>classcMsgPar.html</anchorfile>
      <anchor>abe7d0d1b3cc64ea27dfccdc5e91b6a77</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator char</name>
      <anchorfile>classcMsgPar.html</anchorfile>
      <anchor>a3d80d2f5b19701c5e4186e30ea468a73</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned char</name>
      <anchorfile>classcMsgPar.html</anchorfile>
      <anchor>ac3a0f3501b5ee38072b6a108e31211d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator int</name>
      <anchorfile>classcMsgPar.html</anchorfile>
      <anchor>a9b6ddb3f7dbb0d52f2b1aad12d285d7e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned int</name>
      <anchorfile>classcMsgPar.html</anchorfile>
      <anchor>a777536c469820f7b9be59ac35690c794</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator short</name>
      <anchorfile>classcMsgPar.html</anchorfile>
      <anchor>a51eb6b510f72e1ec18c216c7dfda422e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned short</name>
      <anchorfile>classcMsgPar.html</anchorfile>
      <anchor>a3ec78b50cebe66cbd75d88ed96a95f03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator long</name>
      <anchorfile>classcMsgPar.html</anchorfile>
      <anchor>a4be457bf6686804da3af69c56ef67aee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned long</name>
      <anchorfile>classcMsgPar.html</anchorfile>
      <anchor>a90af8a1ed2d61ae39a801c3c781e2809</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator double</name>
      <anchorfile>classcMsgPar.html</anchorfile>
      <anchor>a2a16d969bab1d7e5284a3188545a8a3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator long double</name>
      <anchorfile>classcMsgPar.html</anchorfile>
      <anchor>a682cd53bd9512034c879f43e07417c4e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator void *</name>
      <anchorfile>classcMsgPar.html</anchorfile>
      <anchor>abda21821f3e1aedd1cc4e2e84c477e06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator cOwnedObject *</name>
      <anchorfile>classcMsgPar.html</anchorfile>
      <anchor>add39709c7722976a7bcdecbcce2628bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator cXMLElement *</name>
      <anchorfile>classcMsgPar.html</anchorfile>
      <anchor>a78629c4d940b1bcf5fbee85c9e122424</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>beforeChange</name>
      <anchorfile>classcMsgPar.html</anchorfile>
      <anchor>a22eb9d066ed07e0c5f716cda36e97ff6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>afterChange</name>
      <anchorfile>classcMsgPar.html</anchorfile>
      <anchor>a8d5f41e4cd653fda17720eb4c5c2cf37</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cNamedObject</name>
    <filename>classcNamedObject.html</filename>
    <base>cObject</base>
    <member kind="function">
      <type></type>
      <name>cNamedObject</name>
      <anchorfile>classcNamedObject.html</anchorfile>
      <anchor>a01439ff09deb6a2734a9ac3c96f6aade</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cNamedObject</name>
      <anchorfile>classcNamedObject.html</anchorfile>
      <anchor>ae83c4f0359dce9d7e996e1c99e027434</anchor>
      <arglist>(const char *name, bool namepooling=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cNamedObject</name>
      <anchorfile>classcNamedObject.html</anchorfile>
      <anchor>a14c5be889374ad4e23ebcd1048f509f3</anchor>
      <arglist>(const cNamedObject &amp;obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cNamedObject</name>
      <anchorfile>classcNamedObject.html</anchorfile>
      <anchor>a1979410192920c55232e9a7f14683052</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cNamedObject &amp;</type>
      <name>operator=</name>
      <anchorfile>classcNamedObject.html</anchorfile>
      <anchor>aab6ae74dfacbd030a595f5241c33db39</anchor>
      <arglist>(const cNamedObject &amp;o)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classcNamedObject.html</anchorfile>
      <anchor>aaefbadce755a4017e1536873362b734a</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classcNamedObject.html</anchorfile>
      <anchor>a372368ad0e4221318487ae2d42999b00</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setName</name>
      <anchorfile>classcNamedObject.html</anchorfile>
      <anchor>afdad5d1296c7c90d494dacfa42d9b5c4</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getName</name>
      <anchorfile>classcNamedObject.html</anchorfile>
      <anchor>a5b06a5fdb473bb997c939ba55435c041</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNamePooling</name>
      <anchorfile>classcNamedObject.html</anchorfile>
      <anchor>a9cb1fc1a0f3b3368283a694a3f5a356c</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getNamePooling</name>
      <anchorfile>classcNamedObject.html</anchorfile>
      <anchor>a6ccf26035ec9e906cc7f9ea7820cb1f4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cNEDFunction</name>
    <filename>classcNEDFunction.html</filename>
    <base>cNoncopyableOwnedObject</base>
    <member kind="function">
      <type></type>
      <name>cNEDFunction</name>
      <anchorfile>classcNEDFunction.html</anchorfile>
      <anchor>a9e3d4d89da098c3bd4679d6bbb92ddef</anchor>
      <arglist>(NEDFunction f, const char *signature, const char *category=NULL, const char *description=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cNEDFunction</name>
      <anchorfile>classcNEDFunction.html</anchorfile>
      <anchor>a90104b0f2073f66292203ae2ac63ab2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcNEDFunction.html</anchorfile>
      <anchor>a73528111fb09814cd26f9a322af48cce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cNEDValue</type>
      <name>invoke</name>
      <anchorfile>classcNEDFunction.html</anchorfile>
      <anchor>a00dfa938acf2bbc8490f8d361ddc42aa</anchor>
      <arglist>(cComponent *context, cNEDValue argv[], int argc)</arglist>
    </member>
    <member kind="function">
      <type>NEDFunction</type>
      <name>getFunctionPointer</name>
      <anchorfile>classcNEDFunction.html</anchorfile>
      <anchor>a65ebf7298a9af292104199d602214603</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getSignature</name>
      <anchorfile>classcNEDFunction.html</anchorfile>
      <anchor>a92c06a544ddd7ace649d309a52d3ceda</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>getReturnType</name>
      <anchorfile>classcNEDFunction.html</anchorfile>
      <anchor>ad302d91a0840bab4420185813c75b960</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>getArgType</name>
      <anchorfile>classcNEDFunction.html</anchorfile>
      <anchor>a47cdc4bfaa4deae710717b0ad23879bc</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMinArgs</name>
      <anchorfile>classcNEDFunction.html</anchorfile>
      <anchor>a41ae5851e625ed31349d0841d21b619a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMaxArgs</name>
      <anchorfile>classcNEDFunction.html</anchorfile>
      <anchor>ad636993477bfdd093b28e6431eb5b3f8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasVarArgs</name>
      <anchorfile>classcNEDFunction.html</anchorfile>
      <anchor>af0cbe05a5ec9ac6e7b9bc6c775ea2945</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getCategory</name>
      <anchorfile>classcNEDFunction.html</anchorfile>
      <anchor>afd4d1313cd13633bdc5e3ef335c5ac0b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getDescription</name>
      <anchorfile>classcNEDFunction.html</anchorfile>
      <anchor>a44c512c1c8230367fc3302b0358fc0a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cNEDFunction *</type>
      <name>find</name>
      <anchorfile>classcNEDFunction.html</anchorfile>
      <anchor>a8a87013b0a35c691516febe3599df820</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cNEDFunction *</type>
      <name>get</name>
      <anchorfile>classcNEDFunction.html</anchorfile>
      <anchor>aa9972d3ddcbfc4322f29fbc0c449094f</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cNEDFunction *</type>
      <name>findByPointer</name>
      <anchorfile>classcNEDFunction.html</anchorfile>
      <anchor>a24212be4e57aff5859a5f5a850868653</anchor>
      <arglist>(NEDFunction f)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cNEDMathFunction</name>
    <filename>classcNEDMathFunction.html</filename>
    <base>cNoncopyableOwnedObject</base>
    <member kind="function">
      <type></type>
      <name>cNEDMathFunction</name>
      <anchorfile>classcNEDMathFunction.html</anchorfile>
      <anchor>a9cdc0438bba9f04f2c9abafdafdab538</anchor>
      <arglist>(const char *name, MathFuncNoArg f, int argc=-1, const char *category=NULL, const char *description=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cNEDMathFunction</name>
      <anchorfile>classcNEDMathFunction.html</anchorfile>
      <anchor>ab22c5e35b324737450b34fcbf864a657</anchor>
      <arglist>(const char *name, MathFunc1Arg f, int argc=-1, const char *category=NULL, const char *description=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cNEDMathFunction</name>
      <anchorfile>classcNEDMathFunction.html</anchorfile>
      <anchor>a4d1d2bb5437ac60492f953d1d174b827</anchor>
      <arglist>(const char *name, MathFunc2Args f, int argc=-1, const char *category=NULL, const char *description=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cNEDMathFunction</name>
      <anchorfile>classcNEDMathFunction.html</anchorfile>
      <anchor>ae774b97fbcbb7b7e2cf583791c6389c3</anchor>
      <arglist>(const char *name, MathFunc3Args f, int argc=-1, const char *category=NULL, const char *description=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cNEDMathFunction</name>
      <anchorfile>classcNEDMathFunction.html</anchorfile>
      <anchor>ae450bbc7ccfb8210f8890a273f5f4dbb</anchor>
      <arglist>(const char *name, MathFunc4Args f, int argc=-1, const char *category=NULL, const char *description=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cNEDMathFunction</name>
      <anchorfile>classcNEDMathFunction.html</anchorfile>
      <anchor>a2cff348fd38b83f9f13d1c83eac74c16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcNEDMathFunction.html</anchorfile>
      <anchor>af4d9b085f0916e855b6ddb54d236d770</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumArgs</name>
      <anchorfile>classcNEDMathFunction.html</anchorfile>
      <anchor>a2ab30a32169ea3a4f97830fee484e3af</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MathFunc</type>
      <name>getMathFunc</name>
      <anchorfile>classcNEDMathFunction.html</anchorfile>
      <anchor>a7412348a6bb926f5811e29555993eed1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MathFuncNoArg</type>
      <name>getMathFuncNoArg</name>
      <anchorfile>classcNEDMathFunction.html</anchorfile>
      <anchor>abeda71bbe63fb87eacd0b14be65dbe4c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MathFunc1Arg</type>
      <name>getMathFunc1Arg</name>
      <anchorfile>classcNEDMathFunction.html</anchorfile>
      <anchor>a2071ae615bb2d247aa6fa6899ed2d977</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MathFunc2Args</type>
      <name>getMathFunc2Args</name>
      <anchorfile>classcNEDMathFunction.html</anchorfile>
      <anchor>ae8f877f563cdf80c2abe51c42578aee5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MathFunc3Args</type>
      <name>getMathFunc3Args</name>
      <anchorfile>classcNEDMathFunction.html</anchorfile>
      <anchor>ae7cb4201b5876a8dcdcfef386ffb9035</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MathFunc4Args</type>
      <name>getMathFunc4Args</name>
      <anchorfile>classcNEDMathFunction.html</anchorfile>
      <anchor>adfac36af5e8b472a89f9a04aadac3fbd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getCategory</name>
      <anchorfile>classcNEDMathFunction.html</anchorfile>
      <anchor>a6ab5d11435b4c4d771248e51e5dee8a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getDescription</name>
      <anchorfile>classcNEDMathFunction.html</anchorfile>
      <anchor>a7255723ae1d3d15f4fb47296cef33de4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cNEDMathFunction *</type>
      <name>find</name>
      <anchorfile>classcNEDMathFunction.html</anchorfile>
      <anchor>afc14218e331ea18a9e6d68f0b63a2a43</anchor>
      <arglist>(const char *name, int numArgs)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cNEDMathFunction *</type>
      <name>get</name>
      <anchorfile>classcNEDMathFunction.html</anchorfile>
      <anchor>ad13b36ce4cc07d1ce46456411cd8c5d0</anchor>
      <arglist>(const char *name, int numArgs)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cNEDMathFunction *</type>
      <name>findByPointer</name>
      <anchorfile>classcNEDMathFunction.html</anchorfile>
      <anchor>a36b4a42df643308c8fc5bd46d26c5b38</anchor>
      <arglist>(MathFunc f)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cNEDValue</name>
    <filename>classcNEDValue.html</filename>
    <member kind="enumeration">
      <name>Type</name>
      <anchorfile>classcNEDValue.html</anchorfile>
      <anchor>af31583b19ac37e336ce3c0d665117fd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classcNEDValue.html</anchorfile>
      <anchor>a1a8ec1923204e71913622220783d1a5e</anchor>
      <arglist>(const cNEDValue &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cNEDValue</name>
      <anchorfile>classcNEDValue.html</anchorfile>
      <anchor>ad05911af6da3d53232c8d86fbf703c25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cNEDValue</name>
      <anchorfile>classcNEDValue.html</anchorfile>
      <anchor>a79b8693a14520e94d7a3dd65a560efa6</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cNEDValue</name>
      <anchorfile>classcNEDValue.html</anchorfile>
      <anchor>ab9b7374df6e30ee339b4422c07e893ee</anchor>
      <arglist>(long l)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cNEDValue</name>
      <anchorfile>classcNEDValue.html</anchorfile>
      <anchor>af27cab103600df2ed7ba8fcfe467c622</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cNEDValue</name>
      <anchorfile>classcNEDValue.html</anchorfile>
      <anchor>a76ea9067cf302b22f487ec5e87b80863</anchor>
      <arglist>(double d, const char *unit)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cNEDValue</name>
      <anchorfile>classcNEDValue.html</anchorfile>
      <anchor>a526bef585d3b276488098ead02473585</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cNEDValue</name>
      <anchorfile>classcNEDValue.html</anchorfile>
      <anchor>aab470041bcf6f1d53be3b44f7298e8bd</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cNEDValue</name>
      <anchorfile>classcNEDValue.html</anchorfile>
      <anchor>a177398ee31608d499d6d2d41f2918399</anchor>
      <arglist>(cXMLElement *x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cNEDValue</name>
      <anchorfile>classcNEDValue.html</anchorfile>
      <anchor>afda13d5ee1b501506e4ae46849d7c044</anchor>
      <arglist>(const cPar &amp;par)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classcNEDValue.html</anchorfile>
      <anchor>a4a952657f72aa46d48f4cabcaa90b389</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classcNEDValue.html</anchorfile>
      <anchor>a5daec901c30f56c5569d5baf654d6857</anchor>
      <arglist>(long l)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classcNEDValue.html</anchorfile>
      <anchor>a87fef43020c16c7d69ecea0d3345ef99</anchor>
      <arglist>(double d, const char *unit=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPreservingUnit</name>
      <anchorfile>classcNEDValue.html</anchorfile>
      <anchor>a1b6df08dad922763b7ea610e926ab153</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUnit</name>
      <anchorfile>classcNEDValue.html</anchorfile>
      <anchor>a1adfb88841e311b2656aecabc499e722</anchor>
      <arglist>(const char *unit)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertTo</name>
      <anchorfile>classcNEDValue.html</anchorfile>
      <anchor>ac6d0e6eee87a6c116f1b8cb5e519db2c</anchor>
      <arglist>(const char *unit)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classcNEDValue.html</anchorfile>
      <anchor>a60c777b88b9dff27d5e13a2769b3c08b</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classcNEDValue.html</anchorfile>
      <anchor>acc10786eb84cc23e3c1e0d386749bfa9</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classcNEDValue.html</anchorfile>
      <anchor>a917aa4166d0223a6c86f71cd9f107100</anchor>
      <arglist>(cXMLElement *x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classcNEDValue.html</anchorfile>
      <anchor>a234a039cb8bc6437e9dccaff6e981704</anchor>
      <arglist>(const cPar &amp;par)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>boolValue</name>
      <anchorfile>classcNEDValue.html</anchorfile>
      <anchor>a8034f1ea1235169a7c40fa2f53f2da91</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>longValue</name>
      <anchorfile>classcNEDValue.html</anchorfile>
      <anchor>a8de395f23f8089ed48dd9aa0f59e7f1c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>doubleValue</name>
      <anchorfile>classcNEDValue.html</anchorfile>
      <anchor>a771ed18722ac856d901f1738d3e8c413</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>doubleValueInUnit</name>
      <anchorfile>classcNEDValue.html</anchorfile>
      <anchor>a1f338729ec243a032a1d41920f63925e</anchor>
      <arglist>(const char *unit) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getUnit</name>
      <anchorfile>classcNEDValue.html</anchorfile>
      <anchor>aae42863ddee3b14cb19e28f7bde0e497</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>stringValue</name>
      <anchorfile>classcNEDValue.html</anchorfile>
      <anchor>a7df8093cecd8f92890cb8ce7cf15ae33</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>stdstringValue</name>
      <anchorfile>classcNEDValue.html</anchorfile>
      <anchor>a7682c94081b35c6490a6fd0b562bfc46</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cXMLElement *</type>
      <name>xmlValue</name>
      <anchorfile>classcNEDValue.html</anchorfile>
      <anchor>ad32c2bc92c2618f6e1a668c8716d066f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cNEDValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classcNEDValue.html</anchorfile>
      <anchor>a3b494ec81ed1c09461ab43fa299ea1e5</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>cNEDValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classcNEDValue.html</anchorfile>
      <anchor>a4fef435bf1a3fe5fe0f558f9a87ef852</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>cNEDValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classcNEDValue.html</anchorfile>
      <anchor>adfba51b5345c5a4812e4a04fe38058cc</anchor>
      <arglist>(unsigned char c)</arglist>
    </member>
    <member kind="function">
      <type>cNEDValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classcNEDValue.html</anchorfile>
      <anchor>a975becbbd37ecbfea91de2298cfe0c38</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>cNEDValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classcNEDValue.html</anchorfile>
      <anchor>a87098aca86f33a4c93933301a6fb19b9</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>cNEDValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classcNEDValue.html</anchorfile>
      <anchor>a8b71edee37995030ab469d15f54a78af</anchor>
      <arglist>(short i)</arglist>
    </member>
    <member kind="function">
      <type>cNEDValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classcNEDValue.html</anchorfile>
      <anchor>afe35035f74c6bf022c5861371a4bc181</anchor>
      <arglist>(unsigned short i)</arglist>
    </member>
    <member kind="function">
      <type>cNEDValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classcNEDValue.html</anchorfile>
      <anchor>a5ae1d0efa1f454ea2f4aae881578829b</anchor>
      <arglist>(long l)</arglist>
    </member>
    <member kind="function">
      <type>cNEDValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classcNEDValue.html</anchorfile>
      <anchor>a897c868b98cb1a24ba4d317518624d7f</anchor>
      <arglist>(unsigned long l)</arglist>
    </member>
    <member kind="function">
      <type>cNEDValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classcNEDValue.html</anchorfile>
      <anchor>a0e09500de7db157d743afdc7f6400d63</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>cNEDValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classcNEDValue.html</anchorfile>
      <anchor>abaa06c274f9cff5b0c28bfb966a5964a</anchor>
      <arglist>(long double d)</arglist>
    </member>
    <member kind="function">
      <type>cNEDValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classcNEDValue.html</anchorfile>
      <anchor>a4b5fd01e681125035819af1b76bc08e8</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>cNEDValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classcNEDValue.html</anchorfile>
      <anchor>a5ae150846b77b1b3019f0e02edcfd426</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>cNEDValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classcNEDValue.html</anchorfile>
      <anchor>a5cf07f475a157e15fcd5df1d2056b33a</anchor>
      <arglist>(cXMLElement *node)</arglist>
    </member>
    <member kind="function">
      <type>cNEDValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classcNEDValue.html</anchorfile>
      <anchor>a319a9f44384ffd135c969a17c5dcff8b</anchor>
      <arglist>(const cPar &amp;par)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classcNEDValue.html</anchorfile>
      <anchor>af22d63c264b3ca199a9872794b8ed81a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator char</name>
      <anchorfile>classcNEDValue.html</anchorfile>
      <anchor>a1931d1be654970d7589eb96159b48c8d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned char</name>
      <anchorfile>classcNEDValue.html</anchorfile>
      <anchor>ab8f7c0fddf124f2876ee7c00cbb5822f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator int</name>
      <anchorfile>classcNEDValue.html</anchorfile>
      <anchor>af6c2580642f742c184176278aa9347d7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned int</name>
      <anchorfile>classcNEDValue.html</anchorfile>
      <anchor>ac0b7dfa3e770cb2b94238fb28e39ad36</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator short</name>
      <anchorfile>classcNEDValue.html</anchorfile>
      <anchor>a9939952c96b016f45ca56fbb347f35cd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned short</name>
      <anchorfile>classcNEDValue.html</anchorfile>
      <anchor>a4455810ea2874c54da70e9b278845510</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator long</name>
      <anchorfile>classcNEDValue.html</anchorfile>
      <anchor>a30eb8512d4d0f600b844266250be5edd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned long</name>
      <anchorfile>classcNEDValue.html</anchorfile>
      <anchor>a74e367fc6c5e1aa4d6f7852db6646df8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator double</name>
      <anchorfile>classcNEDValue.html</anchorfile>
      <anchor>a8f59d3cf3f5818e285a9bf270a3867b2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator long double</name>
      <anchorfile>classcNEDValue.html</anchorfile>
      <anchor>aecede8e9f2f2789a91af7c4ad11bcfb5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const char *</name>
      <anchorfile>classcNEDValue.html</anchorfile>
      <anchor>a818673456f4319a246b570cf806f1bd6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classcNEDValue.html</anchorfile>
      <anchor>a1a63a1270a911a8a2325e45cb5438eaf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator cXMLElement *</name>
      <anchorfile>classcNEDValue.html</anchorfile>
      <anchor>a170de2c0791a329930f70988fc2eb56d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>enum cNEDValue::Type</type>
      <name>type</name>
      <anchorfile>classcNEDValue.html</anchorfile>
      <anchor>ab07eca5623628b6f2125ec9e96a0bbcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>cDynamicExpression</name>
      <anchorfile>classcNEDValue.html</anchorfile>
      <anchor>a008e504f6137d4e68139e67721af37a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>getType</name>
      <anchorfile>classcNEDValue.html</anchorfile>
      <anchor>aed3922b4a874b947392ac1de8dd55d3f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumeric</name>
      <anchorfile>classcNEDValue.html</anchorfile>
      <anchor>abf8a2a5c5552a5aaa7809a8e4938a3e5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSet</name>
      <anchorfile>classcNEDValue.html</anchorfile>
      <anchor>a3f6d39c2c1c4c92ef79baecbe8471ca7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>str</name>
      <anchorfile>classcNEDValue.html</anchorfile>
      <anchor>a5398a787fc0aa45ec56485f78b86ccbb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>getTypeName</name>
      <anchorfile>classcNEDValue.html</anchorfile>
      <anchor>ab16e07f6552c5c7cc0ac484851f0c5f1</anchor>
      <arglist>(Type t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>convertUnit</name>
      <anchorfile>classcNEDValue.html</anchorfile>
      <anchor>ac8d4181d451833528ec3ff4d1dfbbb44</anchor>
      <arglist>(double d, const char *unit, const char *targetUnit)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>parseQuantity</name>
      <anchorfile>classcNEDValue.html</anchorfile>
      <anchor>a4ff25a5e3afd791ba6455b8f11ad055e</anchor>
      <arglist>(const char *str, const char *expectedUnit=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>parseQuantity</name>
      <anchorfile>classcNEDValue.html</anchorfile>
      <anchor>a891d8fe13695b592a26be0d4477eeb36</anchor>
      <arglist>(const char *str, std::string &amp;outActualUnit)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>getPooled</name>
      <anchorfile>classcNEDValue.html</anchorfile>
      <anchor>ad05082d0a46c9cc75748db10e0b7452c</anchor>
      <arglist>(const char *s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cNoncopyableOwnedObject</name>
    <filename>classcNoncopyableOwnedObject.html</filename>
    <base>cOwnedObject</base>
    <base protection="private">noncopyable</base>
    <member kind="function">
      <type></type>
      <name>cNoncopyableOwnedObject</name>
      <anchorfile>classcNoncopyableOwnedObject.html</anchorfile>
      <anchor>a0bec650e647b90f1129342288bdff7f1</anchor>
      <arglist>(const char *name=NULL, bool namepooling=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cNoncopyableOwnedObject *</type>
      <name>dup</name>
      <anchorfile>classcNoncopyableOwnedObject.html</anchorfile>
      <anchor>af80ab012aef725a1e464ce8207d225f8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classcNoncopyableOwnedObject.html</anchorfile>
      <anchor>a820b9ccbb9c2070d7f75ac90e2973ce9</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classcNoncopyableOwnedObject.html</anchorfile>
      <anchor>a07752c1e40e37c937f54ae7c52aea32c</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cNullEnvir</name>
    <filename>classcNullEnvir.html</filename>
    <base>cEnvir</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>objectDeleted</name>
      <anchorfile>classcNullEnvir.html</anchorfile>
      <anchor>a5378852e2847df7ae50ce7780bf6d8ff</anchor>
      <arglist>(cObject *object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>simulationEvent</name>
      <anchorfile>classcNullEnvir.html</anchorfile>
      <anchor>ae4347aeb58f6f828cd290efeb43c4d4a</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>messageSent_OBSOLETE</name>
      <anchorfile>classcNullEnvir.html</anchorfile>
      <anchor>a0e858fe35f45863128910a49ec60d120</anchor>
      <arglist>(cMessage *msg, cGate *directToGate=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>messageScheduled</name>
      <anchorfile>classcNullEnvir.html</anchorfile>
      <anchor>a321e79f22cd564ca1834904e7853fb33</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>messageCancelled</name>
      <anchorfile>classcNullEnvir.html</anchorfile>
      <anchor>a45bdda83f21926952dc526eaea4b037b</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>beginSend</name>
      <anchorfile>classcNullEnvir.html</anchorfile>
      <anchor>ae9eebe743b054d294427ee693a6a3a38</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>messageSendDirect</name>
      <anchorfile>classcNullEnvir.html</anchorfile>
      <anchor>acfe430e6b3a63292bf70876e5cf8259f</anchor>
      <arglist>(cMessage *msg, cGate *toGate, simtime_t propagationDelay, simtime_t transmissionDelay)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>messageSendHop</name>
      <anchorfile>classcNullEnvir.html</anchorfile>
      <anchor>ad65699127d800138141534c7166c2bf4</anchor>
      <arglist>(cMessage *msg, cGate *srcGate)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>messageSendHop</name>
      <anchorfile>classcNullEnvir.html</anchorfile>
      <anchor>aa150cfeb06aa240e9a5c165dd8c2a979</anchor>
      <arglist>(cMessage *msg, cGate *srcGate, simtime_t propagationDelay, simtime_t transmissionDelay)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>endSend</name>
      <anchorfile>classcNullEnvir.html</anchorfile>
      <anchor>ab384524352e03d43655a983028a3d31f</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>messageCreated</name>
      <anchorfile>classcNullEnvir.html</anchorfile>
      <anchor>af92484da09683ae8c18c234cf0436e1e</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>messageCloned</name>
      <anchorfile>classcNullEnvir.html</anchorfile>
      <anchor>af79f76a4c862d4f1798499ae50540db8</anchor>
      <arglist>(cMessage *msg, cMessage *clone)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>messageDeleted</name>
      <anchorfile>classcNullEnvir.html</anchorfile>
      <anchor>a3038bd9f489468b742c32270c6227bcc</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>moduleReparented</name>
      <anchorfile>classcNullEnvir.html</anchorfile>
      <anchor>a42d8a3c194fa722901b231ce9362c728</anchor>
      <arglist>(cModule *module, cModule *oldparent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>componentMethodBegin</name>
      <anchorfile>classcNullEnvir.html</anchorfile>
      <anchor>a12f1d64ccf79302d34d75c5ca34ec360</anchor>
      <arglist>(cComponent *from, cComponent *to, const char *methodFmt, va_list va, bool silent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>componentMethodEnd</name>
      <anchorfile>classcNullEnvir.html</anchorfile>
      <anchor>a2f191d9c6ef0efd8e120f370928a0985</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>moduleCreated</name>
      <anchorfile>classcNullEnvir.html</anchorfile>
      <anchor>a1859ec30ae6786aa51b8f799e0892679</anchor>
      <arglist>(cModule *newmodule)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>moduleDeleted</name>
      <anchorfile>classcNullEnvir.html</anchorfile>
      <anchor>aa3c1c42dfd01269692269bcd122a302b</anchor>
      <arglist>(cModule *module)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>gateCreated</name>
      <anchorfile>classcNullEnvir.html</anchorfile>
      <anchor>aa512c87d21d1f92d1042a23a5661f8c8</anchor>
      <arglist>(cGate *newgate)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>gateDeleted</name>
      <anchorfile>classcNullEnvir.html</anchorfile>
      <anchor>a85cc57f79077426f32dfcc7390da2c86</anchor>
      <arglist>(cGate *gate)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>connectionCreated</name>
      <anchorfile>classcNullEnvir.html</anchorfile>
      <anchor>abe8c62ed655cbd14f3e244245ad35c39</anchor>
      <arglist>(cGate *srcgate)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>connectionDeleted</name>
      <anchorfile>classcNullEnvir.html</anchorfile>
      <anchor>ae88cee80fca305d9d2345282169f7736</anchor>
      <arglist>(cGate *srcgate)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>displayStringChanged</name>
      <anchorfile>classcNullEnvir.html</anchorfile>
      <anchor>adb3454ab5096ae1346ad33c3a5126495</anchor>
      <arglist>(cComponent *component)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>undisposedObject</name>
      <anchorfile>classcNullEnvir.html</anchorfile>
      <anchor>a9b6cc5796a2bf74a1a00987da1a1189b</anchor>
      <arglist>(cObject *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>configure</name>
      <anchorfile>classcNullEnvir.html</anchorfile>
      <anchor>a3921714f74fa2c35ec67c07459468a6d</anchor>
      <arglist>(cComponent *component)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>readParameter</name>
      <anchorfile>classcNullEnvir.html</anchorfile>
      <anchor>aa80b448b4958c82b72642f29d95d088a</anchor>
      <arglist>(cPar *par)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isModuleLocal</name>
      <anchorfile>classcNullEnvir.html</anchorfile>
      <anchor>aade8e4bb4c2c6d65d9402069c3301044</anchor>
      <arglist>(cModule *parentmod, const char *modname, int index)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>getXMLDocument</name>
      <anchorfile>classcNullEnvir.html</anchorfile>
      <anchor>ab4b498029668fbdd6c91a3a8075a702c</anchor>
      <arglist>(const char *filename, const char *xpath=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>getParsedXMLString</name>
      <anchorfile>classcNullEnvir.html</anchorfile>
      <anchor>af336c2f2f01e9d414012142d43385a25</anchor>
      <arglist>(const char *content, const char *xpath=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forgetXMLDocument</name>
      <anchorfile>classcNullEnvir.html</anchorfile>
      <anchor>a6de0696543c21bb09bc8da28c450610e</anchor>
      <arglist>(const char *filename)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forgetParsedXMLString</name>
      <anchorfile>classcNullEnvir.html</anchorfile>
      <anchor>a75e56c46ebb8beb487aae5689306d2ce</anchor>
      <arglist>(const char *content)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>flushXMLDocumentCache</name>
      <anchorfile>classcNullEnvir.html</anchorfile>
      <anchor>ad16de439508a9295ac752f3dbe6a5314</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>flushXMLParsedContentCache</name>
      <anchorfile>classcNullEnvir.html</anchorfile>
      <anchor>a6f24ae806d62d5187ea10868e549e2ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned</type>
      <name>getExtraStackForEnvir</name>
      <anchorfile>classcNullEnvir.html</anchorfile>
      <anchor>a1e7ad6e17341aac3a721eedef61460d8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cConfiguration *</type>
      <name>getConfig</name>
      <anchorfile>classcNullEnvir.html</anchorfile>
      <anchor>a23a336411e562115ef0a482eb2d28433</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isGUI</name>
      <anchorfile>classcNullEnvir.html</anchorfile>
      <anchor>a1ea26ed5068097baaade287422415234</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>bubble</name>
      <anchorfile>classcNullEnvir.html</anchorfile>
      <anchor>ade3331fe0db936bfd470e582eb3ed161</anchor>
      <arglist>(cComponent *component, const char *text)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>gets</name>
      <anchorfile>classcNullEnvir.html</anchorfile>
      <anchor>aa186d7399936aec9fc1d34ec9294693b</anchor>
      <arglist>(const char *prompt, const char *defaultreply=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cEnvir &amp;</type>
      <name>flush</name>
      <anchorfile>classcNullEnvir.html</anchorfile>
      <anchor>ab61157871b8d5d8e6b7449fa949143fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumRNGs</name>
      <anchorfile>classcNullEnvir.html</anchorfile>
      <anchor>a742354cb927e9559bcb545b37dd1cdbc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cRNG *</type>
      <name>getRNG</name>
      <anchorfile>classcNullEnvir.html</anchorfile>
      <anchor>ae73a81e3a03987edc82e03e349f1c2f0</anchor>
      <arglist>(int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getRNGMappingFor</name>
      <anchorfile>classcNullEnvir.html</anchorfile>
      <anchor>a3390f33dedb4b01a02601aa33d473b62</anchor>
      <arglist>(cComponent *component)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>registerOutputVector</name>
      <anchorfile>classcNullEnvir.html</anchorfile>
      <anchor>a5c217d47810ab0bddc5613fd6c00d347</anchor>
      <arglist>(const char *modulename, const char *vectorname)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deregisterOutputVector</name>
      <anchorfile>classcNullEnvir.html</anchorfile>
      <anchor>a7196b6462f509d196886c6d132d76709</anchor>
      <arglist>(void *vechandle)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setVectorAttribute</name>
      <anchorfile>classcNullEnvir.html</anchorfile>
      <anchor>a9b62bbb343a0e997618c40f70f7ecce1</anchor>
      <arglist>(void *vechandle, const char *name, const char *value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>recordInOutputVector</name>
      <anchorfile>classcNullEnvir.html</anchorfile>
      <anchor>a0b7b96a47bc9438251ba8a52a868c987</anchor>
      <arglist>(void *vechandle, simtime_t t, double value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>recordScalar</name>
      <anchorfile>classcNullEnvir.html</anchorfile>
      <anchor>abbf3a0583f10e6ec4df100d49fee1472</anchor>
      <arglist>(cComponent *component, const char *name, double value, opp_string_map *attributes=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>recordStatistic</name>
      <anchorfile>classcNullEnvir.html</anchorfile>
      <anchor>ac187c8a037eda306a3d01e722bf631a5</anchor>
      <arglist>(cComponent *component, const char *name, cStatistic *statistic, opp_string_map *attributes=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addResultRecorders</name>
      <anchorfile>classcNullEnvir.html</anchorfile>
      <anchor>a5b11c9efb295f29e543ae67994e402f0</anchor>
      <arglist>(cComponent *component, simsignal_t signal, const char *statisticName, cProperty *statisticTemplateProperty)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream *</type>
      <name>getStreamForSnapshot</name>
      <anchorfile>classcNullEnvir.html</anchorfile>
      <anchor>a6aa5a0354a84627f6bcd8f147321fbc1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>releaseStreamForSnapshot</name>
      <anchorfile>classcNullEnvir.html</anchorfile>
      <anchor>a74602a8286b7d27ba62405a94def54ed</anchor>
      <arglist>(std::ostream *os)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getArgCount</name>
      <anchorfile>classcNullEnvir.html</anchorfile>
      <anchor>a60ce20eb592e50643dd168e798db79ea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char **</type>
      <name>getArgVector</name>
      <anchorfile>classcNullEnvir.html</anchorfile>
      <anchor>ab51ff27ebb999c06fb1a86d74130e57e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getParsimProcId</name>
      <anchorfile>classcNullEnvir.html</anchorfile>
      <anchor>af81b95500e3910d2edae0a23c325b96d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getParsimNumPartitions</name>
      <anchorfile>classcNullEnvir.html</anchorfile>
      <anchor>ad64c8d0c38d480001f609efc28f179c5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned long</type>
      <name>getUniqueNumber</name>
      <anchorfile>classcNullEnvir.html</anchorfile>
      <anchor>a80fadbf0e06db4030f6c43992eec669d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>idle</name>
      <anchorfile>classcNullEnvir.html</anchorfile>
      <anchor>a032cf01f2c2bdd8294d3e44f76e8ca95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>attachDebugger</name>
      <anchorfile>classcNullEnvir.html</anchorfile>
      <anchor>a567835d653d4f5c5c4bcf742fce62d8c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cNumericResultFilter</name>
    <filename>classcNumericResultFilter.html</filename>
    <base>cResultFilter</base>
  </compound>
  <compound kind="class">
    <name>cNumericResultRecorder</name>
    <filename>classcNumericResultRecorder.html</filename>
    <base>cResultRecorder</base>
  </compound>
  <compound kind="class">
    <name>cObject</name>
    <filename>classcObject.html</filename>
    <member kind="function">
      <type></type>
      <name>cObject</name>
      <anchorfile>classcObject.html</anchorfile>
      <anchor>ae98752182985569372cc076132432d78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cObject</name>
      <anchorfile>classcObject.html</anchorfile>
      <anchor>ab2e328d2406ac7c706e995673d674b92</anchor>
      <arglist>(const cObject &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cObject</name>
      <anchorfile>classcObject.html</anchorfile>
      <anchor>a83f62e04e6e3c58d888a7ade4c57844c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classcObject.html</anchorfile>
      <anchor>a796311394d5b0af09cff9854f96c4c84</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getName</name>
      <anchorfile>classcObject.html</anchorfile>
      <anchor>a11b0e6ba68df0bc97c2f9f84ce5bfa2e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isName</name>
      <anchorfile>classcObject.html</anchorfile>
      <anchor>a69463289cae75af0e494151c0647b95c</anchor>
      <arglist>(const char *s) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getFullName</name>
      <anchorfile>classcObject.html</anchorfile>
      <anchor>ab99d95f3760383d74095668b2939c08f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getFullPath</name>
      <anchorfile>classcObject.html</anchorfile>
      <anchor>a26c918d8176ea1ce3bc6b87cc7e45464</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcObject.html</anchorfile>
      <anchor>a28c24b5dcb3703c5f6ae92a67bd61c31</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>detailedInfo</name>
      <anchorfile>classcObject.html</anchorfile>
      <anchor>aa843670c4e363dddea8a3a8de7f69fe0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>dup</name>
      <anchorfile>classcObject.html</anchorfile>
      <anchor>aa5c41ae00a77e27af6c7b52d3b63669a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classcObject.html</anchorfile>
      <anchor>a3b7d050e38a97eb4ffdde4f2dd60ff03</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classcObject.html</anchorfile>
      <anchor>a9006f00961b2e0281ceabeadbc018cfd</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>getOwner</name>
      <anchorfile>classcObject.html</anchorfile>
      <anchor>a4684772537578a151166b7a99e3fde4d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isOwnedObject</name>
      <anchorfile>classcObject.html</anchorfile>
      <anchor>a1c692ba5d94c631bc446c385dd93c475</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classcObject.html</anchorfile>
      <anchor>a65acb0f75ca1a80ed878abea2a9f8362</anchor>
      <arglist>(cVisitor *v)</arglist>
    </member>
    <member kind="function">
      <type>cObject *</type>
      <name>findObject</name>
      <anchorfile>classcObject.html</anchorfile>
      <anchor>a4e5cc5be7ee53e165db081eb87851630</anchor>
      <arglist>(const char *name, bool deep=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyNotSupported</name>
      <anchorfile>classcObject.html</anchorfile>
      <anchor>a1f2e992aeb80cd3ae73c9505ae3fc3c6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>take</name>
      <anchorfile>classcObject.html</anchorfile>
      <anchor>a741da8f24135ad40e27d31da9e79fd33</anchor>
      <arglist>(cOwnedObject *obj)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>drop</name>
      <anchorfile>classcObject.html</anchorfile>
      <anchor>a452a1b7d5be712e297c8d49c94c82971</anchor>
      <arglist>(cOwnedObject *obj)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>dropAndDelete</name>
      <anchorfile>classcObject.html</anchorfile>
      <anchor>a9fabc756275a26cbb41cbce7277e7596</anchor>
      <arglist>(cOwnedObject *obj)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>cOwnedObject</name>
      <anchorfile>classcObject.html</anchorfile>
      <anchor>a211f8296c58dede811fa2264079fb5a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>cDefaultList</name>
      <anchorfile>classcObject.html</anchorfile>
      <anchor>ab031217ddc12d3ffb8c14555c85a6f3b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cObjectFactory</name>
    <filename>classcObjectFactory.html</filename>
    <base>cNoncopyableOwnedObject</base>
    <member kind="function">
      <type></type>
      <name>cObjectFactory</name>
      <anchorfile>classcObjectFactory.html</anchorfile>
      <anchor>a53625432bc3d06b377e84ad2d482e2b5</anchor>
      <arglist>(const char *name, cObject *(*creatorfunc)(), void *(*castfunc)(cObject *), const char *description=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcObjectFactory.html</anchorfile>
      <anchor>a92b9b0b7b36dd27ada06c52ac577e8e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isAbstract</name>
      <anchorfile>classcObjectFactory.html</anchorfile>
      <anchor>a6973dbe49687cf3372650e6f091f9e23</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>createOne</name>
      <anchorfile>classcObjectFactory.html</anchorfile>
      <anchor>a8ab5250bf66303fd04c74d09722ffe00</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isInstance</name>
      <anchorfile>classcObjectFactory.html</anchorfile>
      <anchor>a8f035f011de010dcc0a06b5405a616bb</anchor>
      <arglist>(cObject *obj) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getDescription</name>
      <anchorfile>classcObjectFactory.html</anchorfile>
      <anchor>ad3b2a23e1690deb9f0e920a784af06ea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cObjectFactory *</type>
      <name>find</name>
      <anchorfile>classcObjectFactory.html</anchorfile>
      <anchor>a995fd242949ce1be16d65b8666435198</anchor>
      <arglist>(const char *classname)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cObjectFactory *</type>
      <name>get</name>
      <anchorfile>classcObjectFactory.html</anchorfile>
      <anchor>a177dac4343be44153b90d14b4cf12d9f</anchor>
      <arglist>(const char *classname)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cObject *</type>
      <name>createOne</name>
      <anchorfile>classcObjectFactory.html</anchorfile>
      <anchor>a7f6ae5f6a64bbdbe024b8344abca74f6</anchor>
      <arglist>(const char *classname)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cObject *</type>
      <name>createOneIfClassIsKnown</name>
      <anchorfile>classcObjectFactory.html</anchorfile>
      <anchor>abadc7521cd20d886a5b27ef091fedaf6</anchor>
      <arglist>(const char *classname)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cObjectResultFilter</name>
    <filename>classcObjectResultFilter.html</filename>
    <base>cResultFilter</base>
  </compound>
  <compound kind="class">
    <name>CodeFragments</name>
    <filename>classCodeFragments.html</filename>
  </compound>
  <compound kind="class">
    <name>cOutputScalarManager</name>
    <filename>classcOutputScalarManager.html</filename>
    <base>cObject</base>
    <member kind="function">
      <type></type>
      <name>cOutputScalarManager</name>
      <anchorfile>classcOutputScalarManager.html</anchorfile>
      <anchor>ad50a79d9a610e323a83314190a4a99dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cOutputScalarManager</name>
      <anchorfile>classcOutputScalarManager.html</anchorfile>
      <anchor>af47bd9a45501371995a6df0b1f991eff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>startRun</name>
      <anchorfile>classcOutputScalarManager.html</anchorfile>
      <anchor>af69e303a1bce73a59502bae4332f610a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>endRun</name>
      <anchorfile>classcOutputScalarManager.html</anchorfile>
      <anchor>a1620a2fd0d09d86ef40fa08b5d3ae3bf</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>recordScalar</name>
      <anchorfile>classcOutputScalarManager.html</anchorfile>
      <anchor>a807f1fe90b60ee2946486e12567961aa</anchor>
      <arglist>(cComponent *component, const char *name, double value, opp_string_map *attributes=NULL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>recordStatistic</name>
      <anchorfile>classcOutputScalarManager.html</anchorfile>
      <anchor>a2ae897072daceb0df355d9049f1ce268</anchor>
      <arglist>(cComponent *component, const char *name, cStatistic *statistic, opp_string_map *attributes=NULL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getFileName</name>
      <anchorfile>classcOutputScalarManager.html</anchorfile>
      <anchor>a9cdc3b8e187036414f32a6c29633cf9f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>flush</name>
      <anchorfile>classcOutputScalarManager.html</anchorfile>
      <anchor>af2c45e6fde8c8e9d9d89bf080ec7c094</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cOutputVectorManager</name>
    <filename>classcOutputVectorManager.html</filename>
    <base>cObject</base>
    <member kind="function">
      <type></type>
      <name>cOutputVectorManager</name>
      <anchorfile>classcOutputVectorManager.html</anchorfile>
      <anchor>a8ea323cabd24d853050abca5c09cb149</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cOutputVectorManager</name>
      <anchorfile>classcOutputVectorManager.html</anchorfile>
      <anchor>ae6d37630f3a2590b460f9ff27d7a981e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>startRun</name>
      <anchorfile>classcOutputVectorManager.html</anchorfile>
      <anchor>a180e85c7c8923337f30c4b9d2d5a7fa7</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>endRun</name>
      <anchorfile>classcOutputVectorManager.html</anchorfile>
      <anchor>a27228b734f652d93636f607c62ec9529</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void *</type>
      <name>registerVector</name>
      <anchorfile>classcOutputVectorManager.html</anchorfile>
      <anchor>a9bce17442fb76738170daec75f251dd3</anchor>
      <arglist>(const char *modulename, const char *vectorname)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>deregisterVector</name>
      <anchorfile>classcOutputVectorManager.html</anchorfile>
      <anchor>a53c35bf78c71d901a07ee28be19e4b7c</anchor>
      <arglist>(void *vechandle)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setVectorAttribute</name>
      <anchorfile>classcOutputVectorManager.html</anchorfile>
      <anchor>aa60d3f8ca84f58afcc6b926a76b83b7d</anchor>
      <arglist>(void *vechandle, const char *name, const char *value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>record</name>
      <anchorfile>classcOutputVectorManager.html</anchorfile>
      <anchor>aecaebc4986677f5086605d4c26f90b8d</anchor>
      <arglist>(void *vechandle, simtime_t t, double value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getFileName</name>
      <anchorfile>classcOutputVectorManager.html</anchorfile>
      <anchor>a152c43fa466884b44cf59b68c65bba6f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>flush</name>
      <anchorfile>classcOutputVectorManager.html</anchorfile>
      <anchor>a857105b5d3fa9a1705e6613366c3d10a</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cOutVector</name>
    <filename>classcOutVector.html</filename>
    <base>cNoncopyableOwnedObject</base>
    <member kind="function">
      <type></type>
      <name>cOutVector</name>
      <anchorfile>classcOutVector.html</anchorfile>
      <anchor>a96ba817f68762a45860c339d9741cee1</anchor>
      <arglist>(const char *name=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cOutVector</name>
      <anchorfile>classcOutVector.html</anchorfile>
      <anchor>a35ad9804274402a9e78143f40d5df950</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setName</name>
      <anchorfile>classcOutVector.html</anchorfile>
      <anchor>a62cb854edf962c4ad07e60c4f613bf59</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcOutVector.html</anchorfile>
      <anchor>a7447af3d5e8e8ebef0aa74789b539a46</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classcOutVector.html</anchorfile>
      <anchor>afd5689e0a1f69e54e18d1ae0516f97fe</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classcOutVector.html</anchorfile>
      <anchor>a1465f12303ffa61abb3848d66b17162b</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setEnum</name>
      <anchorfile>classcOutVector.html</anchorfile>
      <anchor>ac972fda33a89ec7339803661732ca870</anchor>
      <arglist>(const char *registeredEnumName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setEnum</name>
      <anchorfile>classcOutVector.html</anchorfile>
      <anchor>aa29cc3561a2d1acbf7532d2e503fe6a6</anchor>
      <arglist>(cEnum *enumDecl)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setUnit</name>
      <anchorfile>classcOutVector.html</anchorfile>
      <anchor>a3ce614a2c683d4918a445ecb657aecfa</anchor>
      <arglist>(const char *unit)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setType</name>
      <anchorfile>classcOutVector.html</anchorfile>
      <anchor>a7f8a319af6abaaa4ef780528ace46264</anchor>
      <arglist>(Type type)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setInterpolationMode</name>
      <anchorfile>classcOutVector.html</anchorfile>
      <anchor>ad52cd53b27a0c1f4e9b547803eb3fde7</anchor>
      <arglist>(InterpolationMode mode)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMin</name>
      <anchorfile>classcOutVector.html</anchorfile>
      <anchor>a971c94908d5d493249353ab29952c931</anchor>
      <arglist>(double minValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMax</name>
      <anchorfile>classcOutVector.html</anchorfile>
      <anchor>ae7de7ceb901df38b388dca171e707689</anchor>
      <arglist>(double maxValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>record</name>
      <anchorfile>classcOutVector.html</anchorfile>
      <anchor>a8a7dddb86f9ea261a94f52bc3acf290d</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>record</name>
      <anchorfile>classcOutVector.html</anchorfile>
      <anchor>a28b4a55afbb34238dc2a82bf57130372</anchor>
      <arglist>(SimTime value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>recordWithTimestamp</name>
      <anchorfile>classcOutVector.html</anchorfile>
      <anchor>ad3e8431b46151b8a1e7a91abe70e46cb</anchor>
      <arglist>(simtime_t t, double value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>recordWithTimestamp</name>
      <anchorfile>classcOutVector.html</anchorfile>
      <anchor>ada3f77e041e7dd3e1e9b797c6e4cb018</anchor>
      <arglist>(simtime_t t, SimTime value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>enable</name>
      <anchorfile>classcOutVector.html</anchorfile>
      <anchor>ac3bc82ec08d8fd408508ac3388ed7240</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>disable</name>
      <anchorfile>classcOutVector.html</anchorfile>
      <anchor>a04254ed125ba6147f7cb2e43665fa75b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setEnabled</name>
      <anchorfile>classcOutVector.html</anchorfile>
      <anchor>a7d18c6b2bd83fe30627e2603178ff913</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isEnabled</name>
      <anchorfile>classcOutVector.html</anchorfile>
      <anchor>a9561cc2920070ccf08b02a313f02d0d3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRecordDuringWarmupPeriod</name>
      <anchorfile>classcOutVector.html</anchorfile>
      <anchor>a2a94f723d8bf8f6aa9c413955ba14f77</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getRecordDuringWarmupPeriod</name>
      <anchorfile>classcOutVector.html</anchorfile>
      <anchor>af89905c6bb867ce7ab310dfadc357d1d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>getValuesReceived</name>
      <anchorfile>classcOutVector.html</anchorfile>
      <anchor>a2a989da9515d33f0022c6750aa89b6a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>getValuesStored</name>
      <anchorfile>classcOutVector.html</anchorfile>
      <anchor>add33ad347395d4d227c80784c6080bef</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cOvalFigure</name>
    <filename>classcOvalFigure.html</filename>
    <base>cAbstractShapeFigure</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cOvalFigure *</type>
      <name>dup</name>
      <anchorfile>classcOvalFigure.html</anchorfile>
      <anchor>a2e1876d18c30fd43d904b65eda39b88f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcOvalFigure.html</anchorfile>
      <anchor>a5875c19db816ae618e98fb7e6e8b2e61</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cOwnedObject</name>
    <filename>classcOwnedObject.html</filename>
    <base>cNamedObject</base>
    <member kind="function">
      <type></type>
      <name>cOwnedObject</name>
      <anchorfile>classcOwnedObject.html</anchorfile>
      <anchor>a67a572c63a241d166e98518890a7ec3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cOwnedObject</name>
      <anchorfile>classcOwnedObject.html</anchorfile>
      <anchor>a399f47d544f8d78d639ee8b453ca7e4a</anchor>
      <arglist>(const char *name, bool namepooling=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cOwnedObject</name>
      <anchorfile>classcOwnedObject.html</anchorfile>
      <anchor>ad389a7a473942c49e9f883c8af249419</anchor>
      <arglist>(const cOwnedObject &amp;obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cOwnedObject</name>
      <anchorfile>classcOwnedObject.html</anchorfile>
      <anchor>a20d03173e035df6edebf44c6eb208e3f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cOwnedObject &amp;</type>
      <name>operator=</name>
      <anchorfile>classcOwnedObject.html</anchorfile>
      <anchor>a1007cedb4c4bf9b8d6ff095c9214d363</anchor>
      <arglist>(const cOwnedObject &amp;o)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classcOwnedObject.html</anchorfile>
      <anchor>a56c49bc9247353a2bb722f6ffa8ba287</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classcOwnedObject.html</anchorfile>
      <anchor>a99ab774a7da23edf9d9f9ac96a066637</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static long</type>
      <name>getTotalObjectCount</name>
      <anchorfile>classcOwnedObject.html</anchorfile>
      <anchor>a60f4de36ebc083268c1620c33ce11866</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static long</type>
      <name>getLiveObjectCount</name>
      <anchorfile>classcOwnedObject.html</anchorfile>
      <anchor>a0e85a97c69792fc2d865ded3dfa6eed6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>resetObjectCounters</name>
      <anchorfile>classcOwnedObject.html</anchorfile>
      <anchor>a30fc9a33abea3863437d77773e39da83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>cObject</name>
      <anchorfile>classcOwnedObject.html</anchorfile>
      <anchor>a2f1e5d0432ca9dc331362760416b2b20</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>cDefaultList</name>
      <anchorfile>classcOwnedObject.html</anchorfile>
      <anchor>ab031217ddc12d3ffb8c14555c85a6f3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>cSimulation</name>
      <anchorfile>classcOwnedObject.html</anchorfile>
      <anchor>a3c6add72105ce0170138d90021da4d97</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>cMessage</name>
      <anchorfile>classcOwnedObject.html</anchorfile>
      <anchor>af46e516dfdf6a913fe913c4c2e496cf2</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>cPacket</name>
      <anchorfile>classcOwnedObject.html</anchorfile>
      <anchor>a9a8be359c7a6c5172b0e9495bd89cfc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>getOwner</name>
      <anchorfile>classcOwnedObject.html</anchorfile>
      <anchor>a15cd665fc482190e6a7bf21fb5b2796b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isOwnedObject</name>
      <anchorfile>classcOwnedObject.html</anchorfile>
      <anchor>a55db5dfef16199fa0bb368efd8fbb963</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isSoftOwner</name>
      <anchorfile>classcOwnedObject.html</anchorfile>
      <anchor>a436283f6f3b15e6fa5841df5ef0d7063</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cDefaultList *</type>
      <name>getDefaultOwner</name>
      <anchorfile>classcOwnedObject.html</anchorfile>
      <anchor>aefaa57054b262d37371abf37adc6ef28</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cPacket</name>
    <filename>classcPacket.html</filename>
    <base>cMessage</base>
    <member kind="function">
      <type></type>
      <name>cPacket</name>
      <anchorfile>classcPacket.html</anchorfile>
      <anchor>a40aef58269bc1eedb26bdac2eeec84fb</anchor>
      <arglist>(const cPacket &amp;packet)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cPacket</name>
      <anchorfile>classcPacket.html</anchorfile>
      <anchor>a0cf694ecf45c34746029775d5cedf305</anchor>
      <arglist>(const char *name=NULL, short kind=0, int64 bitLength=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cPacket</name>
      <anchorfile>classcPacket.html</anchorfile>
      <anchor>a55646839fe1c578fce51216014a25bb1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cPacket &amp;</type>
      <name>operator=</name>
      <anchorfile>classcPacket.html</anchorfile>
      <anchor>a755e6196a55f62eaffb7bd1ed5c166c1</anchor>
      <arglist>(const cPacket &amp;packet)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPacket *</type>
      <name>dup</name>
      <anchorfile>classcPacket.html</anchorfile>
      <anchor>ab9fc1d667cb4da97f9e80a14b7547115</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcPacket.html</anchorfile>
      <anchor>a586108f74bafebee363878e1c27c2cf6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>detailedInfo</name>
      <anchorfile>classcPacket.html</anchorfile>
      <anchor>a72f5fd099e174536614cc75ede77c788</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classcPacket.html</anchorfile>
      <anchor>ac473f5ac5a104c3894681cef5558f322</anchor>
      <arglist>(cVisitor *v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classcPacket.html</anchorfile>
      <anchor>aadc39103d03d88433e1d077546cf57fc</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classcPacket.html</anchorfile>
      <anchor>ad616c8cad83c6bc93506da8527057e3f</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isPacket</name>
      <anchorfile>classcPacket.html</anchorfile>
      <anchor>a856d696df6581ddcc7e9a96f1ed7257e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBitLength</name>
      <anchorfile>classcPacket.html</anchorfile>
      <anchor>a0c747caa108271813bcd28b08b80fc2a</anchor>
      <arglist>(int64 l)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setByteLength</name>
      <anchorfile>classcPacket.html</anchorfile>
      <anchor>a4550c6f7653f884c877aba414e7eb2f2</anchor>
      <arglist>(int64 l)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addBitLength</name>
      <anchorfile>classcPacket.html</anchorfile>
      <anchor>a391450bd41d31535a6ef0d4ec75445c0</anchor>
      <arglist>(int64 delta)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addByteLength</name>
      <anchorfile>classcPacket.html</anchorfile>
      <anchor>a771648c49b5e7894c5eb56a66f90eee9</anchor>
      <arglist>(int64 delta)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int64</type>
      <name>getBitLength</name>
      <anchorfile>classcPacket.html</anchorfile>
      <anchor>aca4f7244ad5a2e6adc5f97c722832385</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>getByteLength</name>
      <anchorfile>classcPacket.html</anchorfile>
      <anchor>a1e1b8a709e541be5842b2c4da7562b9d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBitError</name>
      <anchorfile>classcPacket.html</anchorfile>
      <anchor>a303a2babaa717ca4a592f9881208ecb7</anchor>
      <arglist>(bool e)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasBitError</name>
      <anchorfile>classcPacket.html</anchorfile>
      <anchor>a02a0212405b1d989bc744897ea32cf0f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>encapsulate</name>
      <anchorfile>classcPacket.html</anchorfile>
      <anchor>a60f2a48bf1d777342394acd3ddf9fbf3</anchor>
      <arglist>(cPacket *packet)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPacket *</type>
      <name>decapsulate</name>
      <anchorfile>classcPacket.html</anchorfile>
      <anchor>acfa588354f43317d97bba9b8f35d0c17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPacket *</type>
      <name>getEncapsulatedPacket</name>
      <anchorfile>classcPacket.html</anchorfile>
      <anchor>a8f3aeb6fc3e192d37e7f7f8f31046c41</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>_OPPDEPRECATED cPacket *</type>
      <name>getEncapsulatedMsg</name>
      <anchorfile>classcPacket.html</anchorfile>
      <anchor>a0d34adab5712970878ca7901f5400e69</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasEncapsulatedPacket</name>
      <anchorfile>classcPacket.html</anchorfile>
      <anchor>a503338622fc4f996362c71f1a841ce16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>simtime_t_cref</type>
      <name>getDuration</name>
      <anchorfile>classcPacket.html</anchorfile>
      <anchor>a90c1d81e03902260172e36e999a882a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isReceptionStart</name>
      <anchorfile>classcPacket.html</anchorfile>
      <anchor>a37bd97c9d3fc5f82d489e79a1e17e70b</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cPacketQueue</name>
    <filename>classcPacketQueue.html</filename>
    <base>cQueue</base>
    <member kind="function">
      <type></type>
      <name>cPacketQueue</name>
      <anchorfile>classcPacketQueue.html</anchorfile>
      <anchor>ab4a72452283c09c7b02f5440e8b09c21</anchor>
      <arglist>(const char *name=NULL, CompareFunc cmp=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cPacketQueue</name>
      <anchorfile>classcPacketQueue.html</anchorfile>
      <anchor>a578f48121cbddb5e3bb6a29c0366bac4</anchor>
      <arglist>(const cPacketQueue &amp;queue)</arglist>
    </member>
    <member kind="function">
      <type>cPacketQueue &amp;</type>
      <name>operator=</name>
      <anchorfile>classcPacketQueue.html</anchorfile>
      <anchor>a9849b09d65db137415773ff05244e3aa</anchor>
      <arglist>(const cPacketQueue &amp;queue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPacketQueue *</type>
      <name>dup</name>
      <anchorfile>classcPacketQueue.html</anchorfile>
      <anchor>a4589782ab3abdf87659f1678c5b59cc1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcPacketQueue.html</anchorfile>
      <anchor>aba236b09271f88e2df9e165dd9b4eb4e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classcPacketQueue.html</anchorfile>
      <anchor>ab51980eb3998dd4fca104c17edd04462</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classcPacketQueue.html</anchorfile>
      <anchor>af8e5a36b5134d4aa533c7bf0aaa87faa</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insert</name>
      <anchorfile>classcPacketQueue.html</anchorfile>
      <anchor>a9ecf782bfd8f5c5f3749a945d040bafd</anchor>
      <arglist>(cPacket *pkt)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertBefore</name>
      <anchorfile>classcPacketQueue.html</anchorfile>
      <anchor>a801a9e47d23665005c2b61ef62db44b1</anchor>
      <arglist>(cPacket *where, cPacket *pkt)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertAfter</name>
      <anchorfile>classcPacketQueue.html</anchorfile>
      <anchor>ab57dcac8673be4f59edd9a9a19ed4332</anchor>
      <arglist>(cPacket *where, cPacket *pkt)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPacket *</type>
      <name>remove</name>
      <anchorfile>classcPacketQueue.html</anchorfile>
      <anchor>a5e0cf5d70e2160c783160125fa998f1c</anchor>
      <arglist>(cPacket *pkt)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPacket *</type>
      <name>pop</name>
      <anchorfile>classcPacketQueue.html</anchorfile>
      <anchor>a768f1310a3f68513d22d85efa1f451e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classcPacketQueue.html</anchorfile>
      <anchor>a9883f01837fe43083d81c28465d64080</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>getBitLength</name>
      <anchorfile>classcPacketQueue.html</anchorfile>
      <anchor>af9411abb02b7521e7c71c1c0c968b7f2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>getByteLength</name>
      <anchorfile>classcPacketQueue.html</anchorfile>
      <anchor>abdd602d7cbd03f0bde08bfdcdf6a49eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPacket *</type>
      <name>front</name>
      <anchorfile>classcPacketQueue.html</anchorfile>
      <anchor>abce3fb87a067866de766f7d9532064f8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPacket *</type>
      <name>back</name>
      <anchorfile>classcPacketQueue.html</anchorfile>
      <anchor>af126a4bf65a45c148d5b97b00ad25e8c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cPacket *</type>
      <name>get</name>
      <anchorfile>classcPacketQueue.html</anchorfile>
      <anchor>a4c75a864c500c7429475a655e91ac57c</anchor>
      <arglist>(int i) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cPar</name>
    <filename>classcPar.html</filename>
    <base>cObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cPar</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>a2e5c4866715df10306944b40a4b4d7a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getName</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>a8b2446654469e13ddccb0cda79019387</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>a1686cb7355efc74b9915ddadb396b6aa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>detailedInfo</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>a8b5779f794cf7da066fba383291b8ab8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>getOwner</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>a7c075de681c7443c731e408fdfa487b4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>a0d381106a18b64daaa8bdd0a4f32eaf7</anchor>
      <arglist>(const cPar &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>setBoolValue</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>ae690d063c89fec4a53a10089b4e4f8e8</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>setLongValue</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>abcb90fd2503fef812d3d83f7a3c9c25e</anchor>
      <arglist>(long l)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>setDoubleValue</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>a825a88f561c8604efef9e05b9e3f6aef</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>setStringValue</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>aa50d3dc5c63bb89e96919798b1c155ad</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>setStringValue</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>aa0f9ff53283ce7f8239605ba0e497984</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>setXMLValue</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>a5c8a7722af52478afcb0bcec17fa16aa</anchor>
      <arglist>(cXMLElement *node)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>setExpression</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>a0a8f32bf28452e9b79040ebbbd9f6c85</anchor>
      <arglist>(cExpression *e, cComponent *evalcontext=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEvaluationContext</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>a3b27e476e8f18a54c2064ac4b24da6d9</anchor>
      <arglist>(cComponent *ctx)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>boolValue</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>af54ea2fcc7ad0048f216ed0e67af2a44</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>longValue</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>abf151b2b709538c7618ed9160567bfe3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>doubleValue</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>a0127b9c09f69503b5cf91e49ce473ddf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getUnit</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>a545efbca9036f3088c95be412b018d0e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>stringValue</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>ad5ca3c2ab551adc7b57ec1937710a8b2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>stdstringValue</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>aea60efd9c5f66088badcf921c8decd68</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cXMLElement *</type>
      <name>xmlValue</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>abc642480c56e9b5717e2c2a11d908ee3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cExpression *</type>
      <name>getExpression</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>a81b3a87784f9d5a73614c7b3b8910c9b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cComponent *</type>
      <name>getEvaluationContext</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>a3fb2266418ac3de0823f45397c94b96d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>aabf41198ae04656e91dc38c20db774d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finalize</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>a725c47e1002faf0720715a6a78a334ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertToConst</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>a04906d868bfcb0878fd1f34649cfe605</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>str</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>a2add2a12f2d19a6bf9bbcfe02becd886</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parse</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>ad39f3db3a2d39b2166b74741dfef5f80</anchor>
      <arglist>(const char *text)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>af61e613e63ecc31336e66caa2b5bc25e</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>a24018a63215a90b142f73ab5809dda28</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>a71392f93ab6308ae876a3792936b48b0</anchor>
      <arglist>(unsigned char c)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>a7dd8575bef9e1612eeba83bbb9f126e4</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>ad16173d4aa99242d57fd64c514a73dcb</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>ac4aa6fda159d4e9924dc9b32f3b32515</anchor>
      <arglist>(short i)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>acc4b24b48e37b6fa4d315bb24299e8d7</anchor>
      <arglist>(unsigned short i)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>a030e1183948a61b1e060c3ae6f9a659c</anchor>
      <arglist>(long l)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>adfb9b6134333b6dc60c49c988511a3b1</anchor>
      <arglist>(unsigned long l)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>a71020fefa6dc58ca57402fea8786ddf0</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>a51ad6de8e9d7eb0c3d6ed3a8d6600f4a</anchor>
      <arglist>(long double d)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>a7c19238f9d8374f733bdd4bd629476d0</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>ae0202786df41ab54855f8294c41db37b</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>ac7f6513e6aff2591f79528b88534bccc</anchor>
      <arglist>(cXMLElement *node)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>a44ac8fea59a38f3628219994c8103065</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator char</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>a576de150333dfd53d34fa57738a1800a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned char</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>a56a00f119aca10d0396486ff3d5b3647</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator int</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>a7fed29322689044b0f5b071d830041d1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned int</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>acb7a264264dac586c4e462f1a2b87d64</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator short</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>a3138e196f330a20a746a11286cef5bf5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned short</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>af954e1119d9949395ef8f8c96b5450a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator long</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>a0f7b034a7cc2ef1b2d192e658feece78</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned long</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>a6b5cc2e48ee135cd96dfd7fd65bc7b25</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator double</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>aede384a3aad47c832f811b0c03548f7e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator long double</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>a727c89b262ddc12becea71dc50e014ba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const char *</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>ae63b4700f5b6a75f95f45914efd00300</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>a689c0c2539a2db2e4402276feaf11ea4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator cXMLElement *</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>a4efa1106a8fee8d3d1a5eeb3b42fc745</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>cComponent</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>add0207c9829c1a1ae29f9c10cc899454</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>getType</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>af09b972cdd3dbd82f41dae9648438b4e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumeric</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>acf6a488de1fab30cf2a2b079cfc47332</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVolatile</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>a2efc067e4972249872517276459a512b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isExpression</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>a81be32834131db993ff31ecea2ee7bb0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isShared</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>ac6647305da528211bf803bcc6aebf3d9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSet</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>a22919d939a9b511ac3cecf2332bddbc4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsValue</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>af550c34774f542a20250628b3b175215</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cProperties *</type>
      <name>getProperties</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>a39a116c5efe433a3b14bb7046dcf6ae8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>getTypeName</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>a33f262088ed148c88d1a20112d468372</anchor>
      <arglist>(Type t)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cParImpl</name>
    <filename>classcParImpl.html</filename>
    <base>cNamedObject</base>
    <member kind="function">
      <type></type>
      <name>cParImpl</name>
      <anchorfile>classcParImpl.html</anchorfile>
      <anchor>a0e1b29c4590b23063c2b64e5b605b90a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cParImpl</name>
      <anchorfile>classcParImpl.html</anchorfile>
      <anchor>abee3662299287d482ff4b274951ad578</anchor>
      <arglist>(const cParImpl &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cParImpl</name>
      <anchorfile>classcParImpl.html</anchorfile>
      <anchor>a009b0ed8379ace6ddcdee7099ce648f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cParImpl &amp;</type>
      <name>operator=</name>
      <anchorfile>classcParImpl.html</anchorfile>
      <anchor>abb7f9251cbbc66cf137c467b5898dbed</anchor>
      <arglist>(const cParImpl &amp;otherpar)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcParImpl.html</anchorfile>
      <anchor>a7b7efac1df8877fd8308f20567cd131b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>detailedInfo</name>
      <anchorfile>classcParImpl.html</anchorfile>
      <anchor>ae448d532f0f30ce0fa74536b7ef6033c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cParImpl *</type>
      <name>dup</name>
      <anchorfile>classcParImpl.html</anchorfile>
      <anchor>a3a737a29068ec17d8bf1da158b48ea13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classcParImpl.html</anchorfile>
      <anchor>a0ad27542f3e47bb28aeda5ea4f119389</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classcParImpl.html</anchorfile>
      <anchor>a1c26d6c28b29ecd989cda0d25410a0c0</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Type</type>
      <name>getType</name>
      <anchorfile>classcParImpl.html</anchorfile>
      <anchor>ad23d46701e159479b6d811ece96a6073</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isNumeric</name>
      <anchorfile>classcParImpl.html</anchorfile>
      <anchor>acd5f906174847f01b6d15dc12d7608f3</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isVolatile</name>
      <anchorfile>classcParImpl.html</anchorfile>
      <anchor>ac03fdb81bbaedcddaf49355324ccddd3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isExpression</name>
      <anchorfile>classcParImpl.html</anchorfile>
      <anchor>a8b27c3d5038ef9d8f209889f85bf26a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isShared</name>
      <anchorfile>classcParImpl.html</anchorfile>
      <anchor>a5ba94998bf27f5eaa76ae7d5eef99d55</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>containsValue</name>
      <anchorfile>classcParImpl.html</anchorfile>
      <anchor>ab201a877bd0b10b8e698ac0be30c8e8a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isSet</name>
      <anchorfile>classcParImpl.html</anchorfile>
      <anchor>a4bcda292208c7910933daacbee939323</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIsVolatile</name>
      <anchorfile>classcParImpl.html</anchorfile>
      <anchor>acf2eeb1b5835869a3b5e4877043906c2</anchor>
      <arglist>(bool f)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIsShared</name>
      <anchorfile>classcParImpl.html</anchorfile>
      <anchor>aa6cf67f00b22310e42ca841f0352eb19</anchor>
      <arglist>(bool f)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIsSet</name>
      <anchorfile>classcParImpl.html</anchorfile>
      <anchor>a6eb35d2d40949a2dad8632068bbcbb2f</anchor>
      <arglist>(bool f)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getUnit</name>
      <anchorfile>classcParImpl.html</anchorfile>
      <anchor>a389cbc947e4949c87e2dcac3d236cfd3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setUnit</name>
      <anchorfile>classcParImpl.html</anchorfile>
      <anchor>a7afa92e574da7a6d3417e6b38c31cd87</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setBoolValue</name>
      <anchorfile>classcParImpl.html</anchorfile>
      <anchor>a0a508f18f94f537a112a3dec37725cc1</anchor>
      <arglist>(bool b)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setLongValue</name>
      <anchorfile>classcParImpl.html</anchorfile>
      <anchor>a779c5a8160260101876853822454d548</anchor>
      <arglist>(long l)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setDoubleValue</name>
      <anchorfile>classcParImpl.html</anchorfile>
      <anchor>a6acf5217a36bd6a4842f9fa670de1f3e</anchor>
      <arglist>(double d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setStringValue</name>
      <anchorfile>classcParImpl.html</anchorfile>
      <anchor>aa7dcdb4bc87dfe8754016fb8bc036f44</anchor>
      <arglist>(const char *s)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStringValue</name>
      <anchorfile>classcParImpl.html</anchorfile>
      <anchor>a2c5b2f2caed80aafb38ba8005521057a</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setXMLValue</name>
      <anchorfile>classcParImpl.html</anchorfile>
      <anchor>a6b2a58e51a03ce03119d7021bf5f0e5c</anchor>
      <arglist>(cXMLElement *node)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setExpression</name>
      <anchorfile>classcParImpl.html</anchorfile>
      <anchor>a13a9b9712a00efefbad76278bbbc2a73</anchor>
      <arglist>(cExpression *e)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>boolValue</name>
      <anchorfile>classcParImpl.html</anchorfile>
      <anchor>a2f4ac9d8ff907e4537d09c94a63a9026</anchor>
      <arglist>(cComponent *context) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long</type>
      <name>longValue</name>
      <anchorfile>classcParImpl.html</anchorfile>
      <anchor>ae1bdb3249fd5bb221ab5ef822165641b</anchor>
      <arglist>(cComponent *context) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>doubleValue</name>
      <anchorfile>classcParImpl.html</anchorfile>
      <anchor>a51ab5535d9a22ad3875878e346e02c0d</anchor>
      <arglist>(cComponent *context) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>stringValue</name>
      <anchorfile>classcParImpl.html</anchorfile>
      <anchor>ae35f6d99a31152465352db1c0eda9edc</anchor>
      <arglist>(cComponent *context) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>stdstringValue</name>
      <anchorfile>classcParImpl.html</anchorfile>
      <anchor>ad1b380b3ad75dff5b7144e45cf8c229b</anchor>
      <arglist>(cComponent *context) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cXMLElement *</type>
      <name>xmlValue</name>
      <anchorfile>classcParImpl.html</anchorfile>
      <anchor>aae2a1b0f86dcfa787a59c872fce179d2</anchor>
      <arglist>(cComponent *context) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cExpression *</type>
      <name>getExpression</name>
      <anchorfile>classcParImpl.html</anchorfile>
      <anchor>a3a97873ed3ce184db017c881881a6a93</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compare</name>
      <anchorfile>classcParImpl.html</anchorfile>
      <anchor>a92b6f29d05336672c165297ab18bb144</anchor>
      <arglist>(const cParImpl *other) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static long</type>
      <name>getTotalParImplObjectCount</name>
      <anchorfile>classcParImpl.html</anchorfile>
      <anchor>ad7e98c0fd6c239ae550b891bd468c9f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static long</type>
      <name>getLiveParImplObjectCount</name>
      <anchorfile>classcParImpl.html</anchorfile>
      <anchor>a4c7ffa1c7fd818f6fc1a7c30ba4b4f49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>resetParImplObjectCounters</name>
      <anchorfile>classcParImpl.html</anchorfile>
      <anchor>ab7136c8e78b964ecd4c1b001e50c70f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>convertToConst</name>
      <anchorfile>classcParImpl.html</anchorfile>
      <anchor>a734c13ca3e61d2835ed9450e8f00feff</anchor>
      <arglist>(cComponent *context)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>containsConstSubexpressions</name>
      <anchorfile>classcParImpl.html</anchorfile>
      <anchor>a133c812ddeae5eb2f4635b36d6f7f9cf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>evaluateConstSubexpressions</name>
      <anchorfile>classcParImpl.html</anchorfile>
      <anchor>ad9ce3eed4ded06de2483e866cd3c292d</anchor>
      <arglist>(cComponent *context)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classcParImpl.html</anchorfile>
      <anchor>af3cda4e729a180b31e4edf3e55fcf793</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classcParImpl.html</anchorfile>
      <anchor>a59a18b54949c9ce8a29d3930a539de06</anchor>
      <arglist>(const char *text)=0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cParImpl *</type>
      <name>createWithType</name>
      <anchorfile>classcParImpl.html</anchorfile>
      <anchor>a8cbeb6c00ea4fbe2e5a3a9fc44498bc7</anchor>
      <arglist>(Type type)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cParsimCommunications</name>
    <filename>classcParsimCommunications.html</filename>
    <base>cObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cParsimCommunications</name>
      <anchorfile>classcParsimCommunications.html</anchorfile>
      <anchor>a8970a3dbd796e8295b2ee59dc6e9d86d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classcParsimCommunications.html</anchorfile>
      <anchor>a91c3fa2544ed79742f1a82eff4067839</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>shutdown</name>
      <anchorfile>classcParsimCommunications.html</anchorfile>
      <anchor>a6fbe3c30f51951de2ae8d98b8adb0d6f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumPartitions</name>
      <anchorfile>classcParsimCommunications.html</anchorfile>
      <anchor>aff1eaf9f80618315fb2941fd2ab8541f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getProcId</name>
      <anchorfile>classcParsimCommunications.html</anchorfile>
      <anchor>aa04bd6b955f88c324e0415c59cad459d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cCommBuffer *</type>
      <name>createCommBuffer</name>
      <anchorfile>classcParsimCommunications.html</anchorfile>
      <anchor>aa56cea192d00729c1bc801d94f9dccb5</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>recycleCommBuffer</name>
      <anchorfile>classcParsimCommunications.html</anchorfile>
      <anchor>acf4eccab7dd38e130fcefb1066301449</anchor>
      <arglist>(cCommBuffer *buffer)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>send</name>
      <anchorfile>classcParsimCommunications.html</anchorfile>
      <anchor>a0ae4574cfda5e3255be6bab0d9ad3608</anchor>
      <arglist>(cCommBuffer *buffer, int tag, int destination)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>broadcast</name>
      <anchorfile>classcParsimCommunications.html</anchorfile>
      <anchor>a6630d2bafff499c03071c7224b63865f</anchor>
      <arglist>(cCommBuffer *buffer, int tag)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>receiveBlocking</name>
      <anchorfile>classcParsimCommunications.html</anchorfile>
      <anchor>adc0e71ae0cadb0ed32fcb7ef5a763c76</anchor>
      <arglist>(int filtTag, cCommBuffer *buffer, int &amp;receivedTag, int &amp;sourceProcId)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>receiveNonblocking</name>
      <anchorfile>classcParsimCommunications.html</anchorfile>
      <anchor>aade49c407ce0f9e496731d776d0d8b11</anchor>
      <arglist>(int filtTag, cCommBuffer *buffer, int &amp;receivedTag, int &amp;sourceProcId)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cPathChangeNotification</name>
    <filename>classcPathChangeNotification.html</filename>
    <base>cModelChangeNotification</base>
    <member kind="variable">
      <type>cGate *</type>
      <name>pathStartGate</name>
      <anchorfile>classcPathChangeNotification.html</anchorfile>
      <anchor>a55605d980f423d3bcee4c4f1e7a0a255</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cGate *</type>
      <name>pathEndGate</name>
      <anchorfile>classcPathChangeNotification.html</anchorfile>
      <anchor>a4aec56c84e62691cc2993a0d1fbfb315</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cGate *</type>
      <name>changedGate</name>
      <anchorfile>classcPathChangeNotification.html</anchorfile>
      <anchor>a6e0251ef7555d58a5cc33766ba613a8c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cPatternMatcher</name>
    <filename>classcPatternMatcher.html</filename>
    <member kind="function">
      <type></type>
      <name>cPatternMatcher</name>
      <anchorfile>classcPatternMatcher.html</anchorfile>
      <anchor>aa92e4ca49b9d321b944cf3718c6d27c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cPatternMatcher</name>
      <anchorfile>classcPatternMatcher.html</anchorfile>
      <anchor>ab7969132325d115d1a1eb4791e4dd4b0</anchor>
      <arglist>(const char *pattern, bool dottedpath, bool fullstring, bool casesensitive)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~cPatternMatcher</name>
      <anchorfile>classcPatternMatcher.html</anchorfile>
      <anchor>aeb267a631f290715947488e9786fe5d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPattern</name>
      <anchorfile>classcPatternMatcher.html</anchorfile>
      <anchor>af5fb3148340395f4e3ca88aa1a48f964</anchor>
      <arglist>(const char *pattern, bool dottedpath, bool fullstring, bool casesensitive)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>matches</name>
      <anchorfile>classcPatternMatcher.html</anchorfile>
      <anchor>ae8ff90498ceb9f33a114535f3751b6d0</anchor>
      <arglist>(const char *line)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>patternPrefixMatches</name>
      <anchorfile>classcPatternMatcher.html</anchorfile>
      <anchor>af61bee4b93b5eafee956c88990afb0c7</anchor>
      <arglist>(const char *line, int suffixoffset)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>debugStr</name>
      <anchorfile>classcPatternMatcher.html</anchorfile>
      <anchor>a87aecbd82fdf65a7f30c17f28e718f29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchorfile>classcPatternMatcher.html</anchorfile>
      <anchor>a8875a298016a9dc6eb77428009565d0f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>containsWildcards</name>
      <anchorfile>classcPatternMatcher.html</anchorfile>
      <anchor>a3e8f8b49778bf9c04a28c2c04d2ea2dc</anchor>
      <arglist>(const char *pattern)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cPieSliceFigure</name>
    <filename>classcPieSliceFigure.html</filename>
    <base>cAbstractShapeFigure</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cPieSliceFigure *</type>
      <name>dup</name>
      <anchorfile>classcPieSliceFigure.html</anchorfile>
      <anchor>a6dee6fb5ae2f79b57adb08e94e844924</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcPieSliceFigure.html</anchorfile>
      <anchor>afcbb7fd24a3e0b1e427d4dbb00676d24</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cPolygonFigure</name>
    <filename>classcPolygonFigure.html</filename>
    <base>cAbstractShapeFigure</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolygonFigure *</type>
      <name>dup</name>
      <anchorfile>classcPolygonFigure.html</anchorfile>
      <anchor>a14fb2aac3169b203e08457bec4f5d71d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcPolygonFigure.html</anchorfile>
      <anchor>a327cbe1fb581ec5cd46737b87b2babd6</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cPolylineFigure</name>
    <filename>classcPolylineFigure.html</filename>
    <base>cAbstractLineFigure</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolylineFigure *</type>
      <name>dup</name>
      <anchorfile>classcPolylineFigure.html</anchorfile>
      <anchor>a5a6f020e38dafb825ff7590d429c653f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcPolylineFigure.html</anchorfile>
      <anchor>ac503640a7621d2c16ccc662d614903f7</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cPostDisplayStringChangeNotification</name>
    <filename>classcPostDisplayStringChangeNotification.html</filename>
    <base>cModelChangeNotification</base>
    <member kind="variable">
      <type>cDisplayString *</type>
      <name>displayString</name>
      <anchorfile>classcPostDisplayStringChangeNotification.html</anchorfile>
      <anchor>a9e217e483d24189aac2bacbcba3bbea5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cPostGateAddNotification</name>
    <filename>classcPostGateAddNotification.html</filename>
    <base>cModelChangeNotification</base>
    <member kind="variable">
      <type>cModule *</type>
      <name>module</name>
      <anchorfile>classcPostGateAddNotification.html</anchorfile>
      <anchor>a6f2c155c26b9de1978b30ddeb9673da8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>gateName</name>
      <anchorfile>classcPostGateAddNotification.html</anchorfile>
      <anchor>a9bc59235cae06e64d057be680484120a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cPostGateConnectNotification</name>
    <filename>classcPostGateConnectNotification.html</filename>
    <base>cModelChangeNotification</base>
    <member kind="variable">
      <type>cGate *</type>
      <name>gate</name>
      <anchorfile>classcPostGateConnectNotification.html</anchorfile>
      <anchor>a6627b84d18f7612c7f07e3be89ac5dc8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cPostGateDeleteNotification</name>
    <filename>classcPostGateDeleteNotification.html</filename>
    <base>cModelChangeNotification</base>
    <member kind="variable">
      <type>cModule *</type>
      <name>module</name>
      <anchorfile>classcPostGateDeleteNotification.html</anchorfile>
      <anchor>a7bc2617b43bc702e71ec4a7b4d052a33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>gateName</name>
      <anchorfile>classcPostGateDeleteNotification.html</anchorfile>
      <anchor>acf3c787fd7607af5260ccbb43eef50b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cGate::Type</type>
      <name>gateType</name>
      <anchorfile>classcPostGateDeleteNotification.html</anchorfile>
      <anchor>a0db340173dad6d51e6ba541016fa97b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isVector</name>
      <anchorfile>classcPostGateDeleteNotification.html</anchorfile>
      <anchor>a328b14e6598ee38109669e4af6c14834</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>vectorSize</name>
      <anchorfile>classcPostGateDeleteNotification.html</anchorfile>
      <anchor>a3277034b49f71eac746e680eb2639bb6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cPostGateDisconnectNotification</name>
    <filename>classcPostGateDisconnectNotification.html</filename>
    <base>cModelChangeNotification</base>
    <member kind="variable">
      <type>cGate *</type>
      <name>gate</name>
      <anchorfile>classcPostGateDisconnectNotification.html</anchorfile>
      <anchor>af7f6ff4f28f575c16718f6dee316f291</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cGate *</type>
      <name>targetGate</name>
      <anchorfile>classcPostGateDisconnectNotification.html</anchorfile>
      <anchor>a788e3fb6a378472072d7e8b5a32397e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cChannel *</type>
      <name>channel</name>
      <anchorfile>classcPostGateDisconnectNotification.html</anchorfile>
      <anchor>a35a23c595ab989dc0e384caa46af9673</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cPostGateVectorResizeNotification</name>
    <filename>classcPostGateVectorResizeNotification.html</filename>
    <base>cModelChangeNotification</base>
    <member kind="variable">
      <type>cModule *</type>
      <name>module</name>
      <anchorfile>classcPostGateVectorResizeNotification.html</anchorfile>
      <anchor>a810177c6903ae2590f5d9ea82f6cebeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>gateName</name>
      <anchorfile>classcPostGateVectorResizeNotification.html</anchorfile>
      <anchor>a6015e8058128afebb159669cf38bc4d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>oldSize</name>
      <anchorfile>classcPostGateVectorResizeNotification.html</anchorfile>
      <anchor>a4f872fb6b4a376e02bd181826d8c7701</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cPostModuleAddNotification</name>
    <filename>classcPostModuleAddNotification.html</filename>
    <base>cModelChangeNotification</base>
    <member kind="variable">
      <type>cModule *</type>
      <name>module</name>
      <anchorfile>classcPostModuleAddNotification.html</anchorfile>
      <anchor>ac242032fd0ca952d850921c488f6640d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cPostModuleDeleteNotification</name>
    <filename>classcPostModuleDeleteNotification.html</filename>
    <base>cModelChangeNotification</base>
    <member kind="variable">
      <type>cModule *</type>
      <name>module</name>
      <anchorfile>classcPostModuleDeleteNotification.html</anchorfile>
      <anchor>a196c3d96ef95ea6b75616af1b354db69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>moduleId</name>
      <anchorfile>classcPostModuleDeleteNotification.html</anchorfile>
      <anchor>a37efbcd26675a8721a67e897a12a27ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cModuleType *</type>
      <name>moduleType</name>
      <anchorfile>classcPostModuleDeleteNotification.html</anchorfile>
      <anchor>a5a678e197ad9274df580b79e260e7c3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>moduleName</name>
      <anchorfile>classcPostModuleDeleteNotification.html</anchorfile>
      <anchor>aa80fc55f8d8c0ad783f678e81049ebb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cModule *</type>
      <name>parentModule</name>
      <anchorfile>classcPostModuleDeleteNotification.html</anchorfile>
      <anchor>a7ec773c04c6cce1b7b6dbec9d6134066</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>vectorSize</name>
      <anchorfile>classcPostModuleDeleteNotification.html</anchorfile>
      <anchor>ab27019dc398883ab7fe16ba4fbbbd143</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>index</name>
      <anchorfile>classcPostModuleDeleteNotification.html</anchorfile>
      <anchor>a62a24540b47e827112efbf1e382d4bbe</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cPostModuleReparentNotification</name>
    <filename>classcPostModuleReparentNotification.html</filename>
    <base>cModelChangeNotification</base>
    <member kind="variable">
      <type>cModule *</type>
      <name>module</name>
      <anchorfile>classcPostModuleReparentNotification.html</anchorfile>
      <anchor>ad4c8848ca08a3e03499b112c8cf91b64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cModule *</type>
      <name>oldParentModule</name>
      <anchorfile>classcPostModuleReparentNotification.html</anchorfile>
      <anchor>a77ae1e5628abe910615089736f496cf5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cPostParameterChangeNotification</name>
    <filename>classcPostParameterChangeNotification.html</filename>
    <base>cModelChangeNotification</base>
    <member kind="variable">
      <type>cPar *</type>
      <name>par</name>
      <anchorfile>classcPostParameterChangeNotification.html</anchorfile>
      <anchor>a669bcbbcdc1838627e3b87d420d1cdc0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cPostPathCreateNotification</name>
    <filename>classcPostPathCreateNotification.html</filename>
    <base>cPathChangeNotification</base>
  </compound>
  <compound kind="class">
    <name>cPostPathCutNotification</name>
    <filename>classcPostPathCutNotification.html</filename>
    <base>cPathChangeNotification</base>
  </compound>
  <compound kind="class">
    <name>cPreDisplayStringChangeNotification</name>
    <filename>classcPreDisplayStringChangeNotification.html</filename>
    <base>cModelChangeNotification</base>
    <member kind="variable">
      <type>cDisplayString *</type>
      <name>displayString</name>
      <anchorfile>classcPreDisplayStringChangeNotification.html</anchorfile>
      <anchor>a2e1ac58f471baf261ff631a3edd5e9de</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cPreGateAddNotification</name>
    <filename>classcPreGateAddNotification.html</filename>
    <base>cModelChangeNotification</base>
    <member kind="variable">
      <type>cModule *</type>
      <name>module</name>
      <anchorfile>classcPreGateAddNotification.html</anchorfile>
      <anchor>ac490b0f28d75bc425bc3033e58b28c06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>gateName</name>
      <anchorfile>classcPreGateAddNotification.html</anchorfile>
      <anchor>a124171ebe78d49aeab8d89b8f6afe9c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cGate::Type</type>
      <name>gateType</name>
      <anchorfile>classcPreGateAddNotification.html</anchorfile>
      <anchor>a561441eab03bc2c1fee50cbe898688f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isVector</name>
      <anchorfile>classcPreGateAddNotification.html</anchorfile>
      <anchor>ab7b7b01bc46ad683e2ba521dfdfee274</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cPreGateConnectNotification</name>
    <filename>classcPreGateConnectNotification.html</filename>
    <base>cModelChangeNotification</base>
    <member kind="variable">
      <type>cGate *</type>
      <name>gate</name>
      <anchorfile>classcPreGateConnectNotification.html</anchorfile>
      <anchor>a5bc0342ba1809dac34e3d7a500bf636c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cGate *</type>
      <name>targetGate</name>
      <anchorfile>classcPreGateConnectNotification.html</anchorfile>
      <anchor>ac0cbb3b1c893f902aa429fabbf3cde75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cChannel *</type>
      <name>channel</name>
      <anchorfile>classcPreGateConnectNotification.html</anchorfile>
      <anchor>ae8115c08b36940dbf4fc282a630f5815</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cPreGateDeleteNotification</name>
    <filename>classcPreGateDeleteNotification.html</filename>
    <base>cModelChangeNotification</base>
    <member kind="variable">
      <type>cModule *</type>
      <name>module</name>
      <anchorfile>classcPreGateDeleteNotification.html</anchorfile>
      <anchor>ae17d980719a5ba06d32099576ce867cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>gateName</name>
      <anchorfile>classcPreGateDeleteNotification.html</anchorfile>
      <anchor>a2c8cea7b29f8fc4c3c2f2349d683fe67</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cPreGateDisconnectNotification</name>
    <filename>classcPreGateDisconnectNotification.html</filename>
    <base>cModelChangeNotification</base>
    <member kind="variable">
      <type>cGate *</type>
      <name>gate</name>
      <anchorfile>classcPreGateDisconnectNotification.html</anchorfile>
      <anchor>ac517969f4bf3553e4589387eb51fb80e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cPreGateVectorResizeNotification</name>
    <filename>classcPreGateVectorResizeNotification.html</filename>
    <base>cModelChangeNotification</base>
    <member kind="variable">
      <type>cModule *</type>
      <name>module</name>
      <anchorfile>classcPreGateVectorResizeNotification.html</anchorfile>
      <anchor>aa5b84cdf8a536ab80ae9d137435d04d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>gateName</name>
      <anchorfile>classcPreGateVectorResizeNotification.html</anchorfile>
      <anchor>adddb6307909670303f71e1d30bd8c1ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>newSize</name>
      <anchorfile>classcPreGateVectorResizeNotification.html</anchorfile>
      <anchor>a3947ac2e74d572edeeebc2334c2c334b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cPreModuleAddNotification</name>
    <filename>classcPreModuleAddNotification.html</filename>
    <base>cModelChangeNotification</base>
    <member kind="variable">
      <type>cModuleType *</type>
      <name>moduleType</name>
      <anchorfile>classcPreModuleAddNotification.html</anchorfile>
      <anchor>ac53eec84c1f6214778b290f0621831c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>moduleName</name>
      <anchorfile>classcPreModuleAddNotification.html</anchorfile>
      <anchor>a58abf239d47899ffc824c78d144e08d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cModule *</type>
      <name>parentModule</name>
      <anchorfile>classcPreModuleAddNotification.html</anchorfile>
      <anchor>abe9197a4a758177811f3b914ac2d5a44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>vectorSize</name>
      <anchorfile>classcPreModuleAddNotification.html</anchorfile>
      <anchor>a55344643cb62e3fca363012d4451dcb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>index</name>
      <anchorfile>classcPreModuleAddNotification.html</anchorfile>
      <anchor>a2556f7cc396c7878cfccc5f2edb82261</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cPreModuleDeleteNotification</name>
    <filename>classcPreModuleDeleteNotification.html</filename>
    <base>cModelChangeNotification</base>
    <member kind="variable">
      <type>cModule *</type>
      <name>module</name>
      <anchorfile>classcPreModuleDeleteNotification.html</anchorfile>
      <anchor>a0350cc223bba76766e78ec4819286bbb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cPreModuleReparentNotification</name>
    <filename>classcPreModuleReparentNotification.html</filename>
    <base>cModelChangeNotification</base>
    <member kind="variable">
      <type>cModule *</type>
      <name>module</name>
      <anchorfile>classcPreModuleReparentNotification.html</anchorfile>
      <anchor>a50bcd389409338f20d242083474189b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cModule *</type>
      <name>newParentModule</name>
      <anchorfile>classcPreModuleReparentNotification.html</anchorfile>
      <anchor>adca093dfc679e0acf5c85f942a135160</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cPreParameterChangeNotification</name>
    <filename>classcPreParameterChangeNotification.html</filename>
    <base>cModelChangeNotification</base>
    <member kind="variable">
      <type>cPar *</type>
      <name>par</name>
      <anchorfile>classcPreParameterChangeNotification.html</anchorfile>
      <anchor>ab8d5bfa1d48ec622c3ac36bba139e058</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cPrePathCreateNotification</name>
    <filename>classcPrePathCreateNotification.html</filename>
    <base>cPathChangeNotification</base>
  </compound>
  <compound kind="class">
    <name>cPrePathCutNotification</name>
    <filename>classcPrePathCutNotification.html</filename>
    <base>cPathChangeNotification</base>
  </compound>
  <compound kind="class">
    <name>cProperties</name>
    <filename>classcProperties.html</filename>
    <base>cObject</base>
    <member kind="function">
      <type></type>
      <name>cProperties</name>
      <anchorfile>classcProperties.html</anchorfile>
      <anchor>abf4a134fa6e992a2a2ef23d256d587db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cProperties</name>
      <anchorfile>classcProperties.html</anchorfile>
      <anchor>adfe7be91f2fa2d0d8263c2b953ff8df4</anchor>
      <arglist>(const cProperties &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cProperties</name>
      <anchorfile>classcProperties.html</anchorfile>
      <anchor>a7ff928437dce1cedf3709d9dad3e0037</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cProperties &amp;</type>
      <name>operator=</name>
      <anchorfile>classcProperties.html</anchorfile>
      <anchor>a17e59a4543266153b425f5cb93e5fa1b</anchor>
      <arglist>(const cProperties &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cProperties *</type>
      <name>dup</name>
      <anchorfile>classcProperties.html</anchorfile>
      <anchor>ae6db1c17258b50d5cdfb317d908f2761</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getName</name>
      <anchorfile>classcProperties.html</anchorfile>
      <anchor>aad6ad01b3a9a985e5e85b0f29f5cfcbc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcProperties.html</anchorfile>
      <anchor>a792e979a26cf87e662535b4d5717383d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classcProperties.html</anchorfile>
      <anchor>aeb80b7ac9ac05e320ad3b19db8f8c957</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classcProperties.html</anchorfile>
      <anchor>aa2919453c32107165533bb9ca70c8972</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumProperties</name>
      <anchorfile>classcProperties.html</anchorfile>
      <anchor>a6e14cc02c2ec898ced296d87b6ddbf95</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::vector&lt; const char * &gt;</type>
      <name>getNames</name>
      <anchorfile>classcProperties.html</anchorfile>
      <anchor>adac02f798f4b843b0441737a352b1b30</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cProperty *</type>
      <name>get</name>
      <anchorfile>classcProperties.html</anchorfile>
      <anchor>ae14fed14d3c30f7c97d3b7a42edb3a49</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cProperty *</type>
      <name>get</name>
      <anchorfile>classcProperties.html</anchorfile>
      <anchor>acc52ca2afa4dcc2abda337138e44f0e3</anchor>
      <arglist>(const char *name, const char *index=NULL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getAsBool</name>
      <anchorfile>classcProperties.html</anchorfile>
      <anchor>ac19c7dcc0b264ea719db810484767ae9</anchor>
      <arglist>(const char *name, const char *index=NULL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; const char * &gt;</type>
      <name>getIndicesFor</name>
      <anchorfile>classcProperties.html</anchorfile>
      <anchor>ade3d9903cafbf1b0402476235a2643e9</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classcProperties.html</anchorfile>
      <anchor>a6df622c8cb9422119a85eb0db3874d9f</anchor>
      <arglist>(cProperty *p)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>remove</name>
      <anchorfile>classcProperties.html</anchorfile>
      <anchor>a3ced7f31f9bd58756ed814117481cac0</anchor>
      <arglist>(int k)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cProperty</name>
    <filename>classcProperty.html</filename>
    <base>cNamedObject</base>
    <member kind="function">
      <type></type>
      <name>cProperty</name>
      <anchorfile>classcProperty.html</anchorfile>
      <anchor>a061137db615c35fdca57d512116f4de2</anchor>
      <arglist>(const char *name=NULL, const char *index=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cProperty</name>
      <anchorfile>classcProperty.html</anchorfile>
      <anchor>a1c3980d1238d1bf78b24beccfcb59cda</anchor>
      <arglist>(const cProperty &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cProperty</name>
      <anchorfile>classcProperty.html</anchorfile>
      <anchor>ac4df6afcfe84ff82b5388f7bf1f8197d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cProperty &amp;</type>
      <name>operator=</name>
      <anchorfile>classcProperty.html</anchorfile>
      <anchor>a5318eb2c0f4e218e4ec4c34e1b175b9c</anchor>
      <arglist>(const cProperty &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setName</name>
      <anchorfile>classcProperty.html</anchorfile>
      <anchor>aaccd0145cfc2fa9fe8ebade7aa1db91b</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getFullName</name>
      <anchorfile>classcProperty.html</anchorfile>
      <anchor>a61c6d2450fcb360d531c7cf4c4be0640</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cProperty *</type>
      <name>dup</name>
      <anchorfile>classcProperty.html</anchorfile>
      <anchor>a09dbe7ff96a6e79a50d3135f46c5d96b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcProperty.html</anchorfile>
      <anchor>a3488d028992e9e190fb1c269464684eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classcProperty.html</anchorfile>
      <anchor>aad295afda057430418aeaeb0701f2343</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classcProperty.html</anchorfile>
      <anchor>a083ad03dd11135236b3b81dab19eb3cf</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIndex</name>
      <anchorfile>classcProperty.html</anchorfile>
      <anchor>a6badf4da375f9c5668c9051db179d3fc</anchor>
      <arglist>(const char *index)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getIndex</name>
      <anchorfile>classcProperty.html</anchorfile>
      <anchor>a22710a43a86e64e22e76e48cf3b08d77</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIsImplicit</name>
      <anchorfile>classcProperty.html</anchorfile>
      <anchor>a34b9e89d78eb311ba7a8eb74e8261667</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isImplicit</name>
      <anchorfile>classcProperty.html</anchorfile>
      <anchor>a414a967bbba57d3f4caa3bde9f79dd92</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::vector&lt; const char * &gt; &amp;</type>
      <name>getKeys</name>
      <anchorfile>classcProperty.html</anchorfile>
      <anchor>a1fe97626f62bdf79409cff9dbf33f232</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>containsKey</name>
      <anchorfile>classcProperty.html</anchorfile>
      <anchor>ab5cc099b96eb2de47e00fcf011c7b121</anchor>
      <arglist>(const char *key) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addKey</name>
      <anchorfile>classcProperty.html</anchorfile>
      <anchor>a10baf9c335c16ca12d366eeaa5bc318c</anchor>
      <arglist>(const char *key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumValues</name>
      <anchorfile>classcProperty.html</anchorfile>
      <anchor>a73786361f07c3ddc5e56f9443728347c</anchor>
      <arglist>(const char *key) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNumValues</name>
      <anchorfile>classcProperty.html</anchorfile>
      <anchor>a2f462c8f352a84f1fb1fc5398414d06b</anchor>
      <arglist>(const char *key, int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getValue</name>
      <anchorfile>classcProperty.html</anchorfile>
      <anchor>a3ec0cbc426abe2c25ee47ae2f5cee99e</anchor>
      <arglist>(const char *key, int index=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>classcProperty.html</anchorfile>
      <anchor>ad66020233f60c314ddcf19aeec2b476d</anchor>
      <arglist>(const char *key, int index, const char *value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>erase</name>
      <anchorfile>classcProperty.html</anchorfile>
      <anchor>a92bd723068a0cdb9cc77664bf5f96457</anchor>
      <arglist>(const char *key)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cPSquare</name>
    <filename>classcPSquare.html</filename>
    <base>cDensityEstBase</base>
    <member kind="function">
      <type></type>
      <name>cPSquare</name>
      <anchorfile>classcPSquare.html</anchorfile>
      <anchor>a4ab2e85028a3ba815b5d8b89e9e9c312</anchor>
      <arglist>(const cPSquare &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cPSquare</name>
      <anchorfile>classcPSquare.html</anchorfile>
      <anchor>a0281c833b1115b1353573c4088314f70</anchor>
      <arglist>(const char *name=NULL, int cells=10)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cPSquare</name>
      <anchorfile>classcPSquare.html</anchorfile>
      <anchor>a869c0e272bc7aacd2a1f10fbf23c88dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cPSquare &amp;</type>
      <name>operator=</name>
      <anchorfile>classcPSquare.html</anchorfile>
      <anchor>a506a67aa2e8abd36fe21cead74453536</anchor>
      <arglist>(const cPSquare &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPSquare *</type>
      <name>dup</name>
      <anchorfile>classcPSquare.html</anchorfile>
      <anchor>a66d9672354e7603dc375e82258dbc010</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>detailedInfo</name>
      <anchorfile>classcPSquare.html</anchorfile>
      <anchor>a8ecc917e53e49d8b13605261533858e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classcPSquare.html</anchorfile>
      <anchor>a844a77a6ea60f7436d952ee41538dadc</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classcPSquare.html</anchorfile>
      <anchor>a03b81711d88a7d7d5e40bb466a6db3f1</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>transform</name>
      <anchorfile>classcPSquare.html</anchorfile>
      <anchor>a365dd0bc668dbe2de69001885216744e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRange</name>
      <anchorfile>classcPSquare.html</anchorfile>
      <anchor>aff6d983b6ce376a7da5dfd491df23452</anchor>
      <arglist>(double, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRangeAuto</name>
      <anchorfile>classcPSquare.html</anchorfile>
      <anchor>af302959b1f53afcb3a9a5328d6b49cc7</anchor>
      <arglist>(int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRangeAutoLower</name>
      <anchorfile>classcPSquare.html</anchorfile>
      <anchor>ab9383b79a295c394486d326185ade89c</anchor>
      <arglist>(double, int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRangeAutoUpper</name>
      <anchorfile>classcPSquare.html</anchorfile>
      <anchor>a1fb9616b091058db303da4ef3e657e03</anchor>
      <arglist>(double, int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNumFirstVals</name>
      <anchorfile>classcPSquare.html</anchorfile>
      <anchor>a52c3272a27f23ef970b563ac74aa55f4</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumCells</name>
      <anchorfile>classcPSquare.html</anchorfile>
      <anchor>ae31d22c9ebb05c491e2efa8b96214b10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getBasepoint</name>
      <anchorfile>classcPSquare.html</anchorfile>
      <anchor>aca2773a39cfad26dc7554ad2157e8721</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getCellValue</name>
      <anchorfile>classcPSquare.html</anchorfile>
      <anchor>a5827e8afacfa570c16d4bcfa1bc0048b</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getCDF</name>
      <anchorfile>classcPSquare.html</anchorfile>
      <anchor>a707ba10b8a493e9cad0e27fb438dfa5e</anchor>
      <arglist>(double x) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getPDF</name>
      <anchorfile>classcPSquare.html</anchorfile>
      <anchor>acd3fa702f87c985b3dea622f5f5b6ff8</anchor>
      <arglist>(double x) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>random</name>
      <anchorfile>classcPSquare.html</anchorfile>
      <anchor>a84c94957be89649ccbc55d8eb6fc2b6f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>merge</name>
      <anchorfile>classcPSquare.html</anchorfile>
      <anchor>afc670b54a213652856cef82ac3b9df39</anchor>
      <arglist>(const cStatistic *other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>saveToFile</name>
      <anchorfile>classcPSquare.html</anchorfile>
      <anchor>ae3e1eba428e2ef2746aa9da4aee983b3</anchor>
      <arglist>(FILE *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>loadFromFile</name>
      <anchorfile>classcPSquare.html</anchorfile>
      <anchor>a5e370fe0ecf0a0da8edc1726cca9eaf5</anchor>
      <arglist>(FILE *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>collectTransformed</name>
      <anchorfile>classcPSquare.html</anchorfile>
      <anchor>a681ff30c9d2ee25ad3d24b8f94c5390a</anchor>
      <arglist>(double val)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cQueue</name>
    <filename>classcQueue.html</filename>
    <base>cOwnedObject</base>
    <class kind="class">cQueue::Iterator</class>
    <member kind="function">
      <type></type>
      <name>cQueue</name>
      <anchorfile>classcQueue.html</anchorfile>
      <anchor>ac4e6154b4175382cf062939f5ded41dd</anchor>
      <arglist>(const char *name=NULL, CompareFunc cmp=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cQueue</name>
      <anchorfile>classcQueue.html</anchorfile>
      <anchor>aa26c68a131688ad11ecebc14388c9869</anchor>
      <arglist>(const cQueue &amp;queue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cQueue</name>
      <anchorfile>classcQueue.html</anchorfile>
      <anchor>aa8e2354f04566e2b561b32432d6adad2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cQueue &amp;</type>
      <name>operator=</name>
      <anchorfile>classcQueue.html</anchorfile>
      <anchor>ac45aaa9fb2b82bf714540a67466a4c18</anchor>
      <arglist>(const cQueue &amp;queue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cQueue *</type>
      <name>dup</name>
      <anchorfile>classcQueue.html</anchorfile>
      <anchor>a07850412e68bd4fe06cc3157ccc86671</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcQueue.html</anchorfile>
      <anchor>a5cd9736cc3368fc2b318a5f5ddd0636f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classcQueue.html</anchorfile>
      <anchor>a5c58b506f9d9f91b0ef663b0f5eb342a</anchor>
      <arglist>(cVisitor *v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classcQueue.html</anchorfile>
      <anchor>a9fc3bfd3362a2636cb48bbe615d96fdb</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classcQueue.html</anchorfile>
      <anchor>a244e9ce48759d96dea1bb7219127412b</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classcQueue.html</anchorfile>
      <anchor>ae55d70e7fcbf42cbd57c1c1aeb0ee433</anchor>
      <arglist>(CompareFunc cmp)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insert</name>
      <anchorfile>classcQueue.html</anchorfile>
      <anchor>a1f002a75ea582ffa383323392819d99a</anchor>
      <arglist>(cObject *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertBefore</name>
      <anchorfile>classcQueue.html</anchorfile>
      <anchor>a73a52e418e46089eacf5ece6f5331368</anchor>
      <arglist>(cObject *where, cObject *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertAfter</name>
      <anchorfile>classcQueue.html</anchorfile>
      <anchor>aaaa761c485de85682b1e553f0c8a1a42</anchor>
      <arglist>(cObject *where, cObject *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>remove</name>
      <anchorfile>classcQueue.html</anchorfile>
      <anchor>ae14fb12fc481ba468fd34c22dbd433e1</anchor>
      <arglist>(cObject *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>pop</name>
      <anchorfile>classcQueue.html</anchorfile>
      <anchor>a0c402c76b44590e2e97ce5db8eca334a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classcQueue.html</anchorfile>
      <anchor>ab007a57b55f643523c2e7f3d3f2d42cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>front</name>
      <anchorfile>classcQueue.html</anchorfile>
      <anchor>a8a7462722da71a40b4429b702396bba4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>back</name>
      <anchorfile>classcQueue.html</anchorfile>
      <anchor>ad7c47b11e0a1af8c86fcecb75b30caba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getLength</name>
      <anchorfile>classcQueue.html</anchorfile>
      <anchor>ad0de698bf28cb373cc6f83c1720a10be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classcQueue.html</anchorfile>
      <anchor>a117af348b3115f38f9882562db5a8b64</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>classcQueue.html</anchorfile>
      <anchor>a7b0458bcbe794f8b95af49c779c5357f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classcQueue.html</anchorfile>
      <anchor>aafc18887a0b8f318933c1da869f0822e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cObject *</type>
      <name>get</name>
      <anchorfile>classcQueue.html</anchorfile>
      <anchor>a5fbf49ac8e66d3ed32f627175426fab7</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>contains</name>
      <anchorfile>classcQueue.html</anchorfile>
      <anchor>a89bc4e77c647cf4f903e183d447e366d</anchor>
      <arglist>(cObject *obj) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTakeOwnership</name>
      <anchorfile>classcQueue.html</anchorfile>
      <anchor>a63334f958432d2e94cbf1193ead14f4f</anchor>
      <arglist>(bool tk)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getTakeOwnership</name>
      <anchorfile>classcQueue.html</anchorfile>
      <anchor>a766091beb4ac1d804fe0f05fbdd1d5ca</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cQueue::Iterator</name>
    <filename>classcQueue_1_1Iterator.html</filename>
    <member kind="function">
      <type></type>
      <name>Iterator</name>
      <anchorfile>classcQueue_1_1Iterator.html</anchorfile>
      <anchor>a4cc8d8b2a410f4327114dff91574e4cf</anchor>
      <arglist>(const cQueue &amp;q, bool reverse=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classcQueue_1_1Iterator.html</anchorfile>
      <anchor>a10d63ac45bf8cec8d4ad7024c47b7bbc</anchor>
      <arglist>(const cQueue &amp;q, bool reverse=false)</arglist>
    </member>
    <member kind="function">
      <type>cObject *</type>
      <name>operator()</name>
      <anchorfile>classcQueue_1_1Iterator.html</anchorfile>
      <anchor>a62719a69c6c3bf218cdb47defc5d3807</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>end</name>
      <anchorfile>classcQueue_1_1Iterator.html</anchorfile>
      <anchor>ad41b4408db62d45bdd9c2873bb97584f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cObject *</type>
      <name>operator++</name>
      <anchorfile>classcQueue_1_1Iterator.html</anchorfile>
      <anchor>a27badc879e2bac617f4f963cec61093f</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>cObject *</type>
      <name>operator--</name>
      <anchorfile>classcQueue_1_1Iterator.html</anchorfile>
      <anchor>a3d6f18996e6bf822177cbbfbe384ac6e</anchor>
      <arglist>(int)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cRealTimeScheduler</name>
    <filename>classcRealTimeScheduler.html</filename>
    <base>cScheduler</base>
    <member kind="function">
      <type></type>
      <name>cRealTimeScheduler</name>
      <anchorfile>classcRealTimeScheduler.html</anchorfile>
      <anchor>a956410008de19331cb68f288cb7e93a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cRealTimeScheduler</name>
      <anchorfile>classcRealTimeScheduler.html</anchorfile>
      <anchor>acd24ef069c8e7cc3bb5bc19e3104dc86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>startRun</name>
      <anchorfile>classcRealTimeScheduler.html</anchorfile>
      <anchor>a14af5eb1807cdfe871fb3ed641869027</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>endRun</name>
      <anchorfile>classcRealTimeScheduler.html</anchorfile>
      <anchor>a6840ad3d9f1582a0c9051a1cef7b939f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>executionResumed</name>
      <anchorfile>classcRealTimeScheduler.html</anchorfile>
      <anchor>aa7db86c3bfe9792194ce0aec35503293</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cMessage *</type>
      <name>getNextEvent</name>
      <anchorfile>classcRealTimeScheduler.html</anchorfile>
      <anchor>a9643e157d27ca16a12531dd845f3d2b9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cRectangleFigure</name>
    <filename>classcRectangleFigure.html</filename>
    <base>cAbstractShapeFigure</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cRectangleFigure *</type>
      <name>dup</name>
      <anchorfile>classcRectangleFigure.html</anchorfile>
      <anchor>a6d47fe6743d54673f16e78629ac87597</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcRectangleFigure.html</anchorfile>
      <anchor>a42633ee54c6d1e93eb54686d40bbd57e</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cRegistrationList</name>
    <filename>classcRegistrationList.html</filename>
    <base>cNamedObject</base>
    <base protection="private">noncopyable</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classcRegistrationList.html</anchorfile>
      <anchor>a706418fe05fed8d156e3ec95fb92c281</anchor>
      <arglist>(cOwnedObject *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>size</name>
      <anchorfile>classcRegistrationList.html</anchorfile>
      <anchor>a454e308e96ea5127499bd66d9508c0dd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cOwnedObject *</type>
      <name>get</name>
      <anchorfile>classcRegistrationList.html</anchorfile>
      <anchor>a51b1d45fa45bd4c2c6556b95aa1f54fe</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cOwnedObject *</type>
      <name>find</name>
      <anchorfile>classcRegistrationList.html</anchorfile>
      <anchor>a2b5374274832c545cf614e74ed1ccd25</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cOwnedObject *</type>
      <name>lookup</name>
      <anchorfile>classcRegistrationList.html</anchorfile>
      <anchor>a18a0e7ae38f0d0d648512321469237ab</anchor>
      <arglist>(const char *qualifiedName) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sort</name>
      <anchorfile>classcRegistrationList.html</anchorfile>
      <anchor>a1ea02f219f81191eb9bd9a773464ee68</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcRegistrationList.html</anchorfile>
      <anchor>a3a7483422e69465c4b576db17ee84260</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classcRegistrationList.html</anchorfile>
      <anchor>a0d1bba5dd8be8d7445eee4b2e8eeadd3</anchor>
      <arglist>(cVisitor *v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cResultFilter</name>
    <filename>classcResultFilter.html</filename>
    <base>cResultListener</base>
  </compound>
  <compound kind="class">
    <name>cResultFilterDescriptor</name>
    <filename>classcResultFilterDescriptor.html</filename>
    <base>cNoncopyableOwnedObject</base>
    <member kind="function">
      <type></type>
      <name>cResultFilterDescriptor</name>
      <anchorfile>classcResultFilterDescriptor.html</anchorfile>
      <anchor>a9c69a257d17046471ec0f2cbb094a359</anchor>
      <arglist>(const char *name, cResultFilter *(*f)())</arglist>
    </member>
    <member kind="function">
      <type>cResultFilter *</type>
      <name>create</name>
      <anchorfile>classcResultFilterDescriptor.html</anchorfile>
      <anchor>a9228d96a93590f20cc0bcaec30a4aa4d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cResultFilterDescriptor *</type>
      <name>find</name>
      <anchorfile>classcResultFilterDescriptor.html</anchorfile>
      <anchor>a446dabe711e80f25bf1a26eb9d4332f2</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cResultFilterDescriptor *</type>
      <name>get</name>
      <anchorfile>classcResultFilterDescriptor.html</anchorfile>
      <anchor>a0b75b9374891d8182e9d2fb8eb073d51</anchor>
      <arglist>(const char *name)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cResultListener</name>
    <filename>classcResultListener.html</filename>
    <base>cIListener</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>classcResultListener.html</anchorfile>
      <anchor>acc19e7c572f627b4ce0f5f6f806d0462</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, bool b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>classcResultListener.html</anchorfile>
      <anchor>aabf59edfa32631f193c5600dfae23e4d</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, long l)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>classcResultListener.html</anchorfile>
      <anchor>a351eb1cf62c264f33ccfdea45bb213b3</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, unsigned long l)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>classcResultListener.html</anchorfile>
      <anchor>a65a6f4d6a7c7b0574c3900de9e845f2f</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, double d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>classcResultListener.html</anchorfile>
      <anchor>a01f24feba0f976e611d1dae49dc01414</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, const SimTime &amp;v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>classcResultListener.html</anchorfile>
      <anchor>a9950e9bcf254d595d32b3e5c331f35fb</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, const char *s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>classcResultListener.html</anchorfile>
      <anchor>a55fbe1f9af591be7441ab935910ed114</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, cObject *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>subscribedTo</name>
      <anchorfile>classcResultListener.html</anchorfile>
      <anchor>a15af1478e7602febcbe290735e9418f2</anchor>
      <arglist>(cComponent *component, simsignal_t signalID)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unsubscribedFrom</name>
      <anchorfile>classcResultListener.html</anchorfile>
      <anchor>affae4d47fe5f4cfabf829cd4018f6666</anchor>
      <arglist>(cComponent *component, simsignal_t signalID)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>classcResultListener.html</anchorfile>
      <anchor>adc3ed3b57c89d492762d5dc86d2664cc</anchor>
      <arglist>(cComponent *component, simsignal_t signalID)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cResultRecorder</name>
    <filename>classcResultRecorder.html</filename>
    <base>cResultListener</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classcResultRecorder.html</anchorfile>
      <anchor>af24a5f469357a51dbdaac5c1ff082fbd</anchor>
      <arglist>(cComponent *component, const char *statisticName, const char *recordingMode, cProperty *attrsProperty, opp_string_map *manualAttrs=NULL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cResultRecorderDescriptor</name>
    <filename>classcResultRecorderDescriptor.html</filename>
    <base>cNoncopyableOwnedObject</base>
    <member kind="function">
      <type></type>
      <name>cResultRecorderDescriptor</name>
      <anchorfile>classcResultRecorderDescriptor.html</anchorfile>
      <anchor>a3c9b3c98902ac07dfd5ff8abd6b79304</anchor>
      <arglist>(const char *name, cResultRecorder *(*f)())</arglist>
    </member>
    <member kind="function">
      <type>cResultRecorder *</type>
      <name>create</name>
      <anchorfile>classcResultRecorderDescriptor.html</anchorfile>
      <anchor>a496b795409af1c28a411fda381409c52</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cResultRecorderDescriptor *</type>
      <name>find</name>
      <anchorfile>classcResultRecorderDescriptor.html</anchorfile>
      <anchor>aa36a70dfb151106b667f1e13b87a93e9</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cResultRecorderDescriptor *</type>
      <name>get</name>
      <anchorfile>classcResultRecorderDescriptor.html</anchorfile>
      <anchor>ae95dec1f95997412a66a4e319bc1992b</anchor>
      <arglist>(const char *name)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cRNG</name>
    <filename>classcRNG.html</filename>
    <base>cObject</base>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classcRNG.html</anchorfile>
      <anchor>a047d8cef2135f936d2ada2b28552e25a</anchor>
      <arglist>(int seedSet, int rngId, int numRngs, int parsimProcId, int parsimNumPartitions, cConfiguration *cfg)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>selfTest</name>
      <anchorfile>classcRNG.html</anchorfile>
      <anchor>a13b9af8a0de12cc481b9d27d5bbb28ff</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned long</type>
      <name>getNumbersDrawn</name>
      <anchorfile>classcRNG.html</anchorfile>
      <anchor>a250da70ee1b0bd5f6d2dfaf5a0b0095b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned long</type>
      <name>intRand</name>
      <anchorfile>classcRNG.html</anchorfile>
      <anchor>ad924cad20293a7ed80d356b8dd063a55</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned long</type>
      <name>intRandMax</name>
      <anchorfile>classcRNG.html</anchorfile>
      <anchor>a4e5c87814d13024d5d86946909c7abb2</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned long</type>
      <name>intRand</name>
      <anchorfile>classcRNG.html</anchorfile>
      <anchor>a9bc7056e83715aa0a4699c4886d69cab</anchor>
      <arglist>(unsigned long n)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>doubleRand</name>
      <anchorfile>classcRNG.html</anchorfile>
      <anchor>ab265aebdf48485df86092e9be31386ff</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>doubleRandNonz</name>
      <anchorfile>classcRNG.html</anchorfile>
      <anchor>ae5405c86e3658c2232792b316a872b81</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>doubleRandIncl1</name>
      <anchorfile>classcRNG.html</anchorfile>
      <anchor>a44aa1878a9bd7c7236ba514ab1446a52</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>doubleRandNonzIncl1</name>
      <anchorfile>classcRNG.html</anchorfile>
      <anchor>a6c2f679141484343d7cb5cc60ff17452</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cRunnableEnvir</name>
    <filename>classcRunnableEnvir.html</filename>
    <base>cEnvir</base>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>run</name>
      <anchorfile>classcRunnableEnvir.html</anchorfile>
      <anchor>a0967fe03ce48c310e278729b46d96126</anchor>
      <arglist>(int argc, char *argv[], cConfiguration *cfg)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cRuntimeError</name>
    <filename>classcRuntimeError.html</filename>
    <base>cException</base>
    <member kind="function">
      <type></type>
      <name>cRuntimeError</name>
      <anchorfile>classcRuntimeError.html</anchorfile>
      <anchor>aacd498d12133cb96ba3dbcac557f91e2</anchor>
      <arglist>(OppErrorCode errcode,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cRuntimeError</name>
      <anchorfile>classcRuntimeError.html</anchorfile>
      <anchor>a8090149405fd25ff4b8e84e360bfb3b4</anchor>
      <arglist>(const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cRuntimeError</name>
      <anchorfile>classcRuntimeError.html</anchorfile>
      <anchor>aed86d404f6019d7b1a9bad020bfa25e7</anchor>
      <arglist>(const cObject *where, OppErrorCode errcode,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cRuntimeError</name>
      <anchorfile>classcRuntimeError.html</anchorfile>
      <anchor>aa7735ad35e64f13776ed3c756b28787e</anchor>
      <arglist>(const cObject *where, const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cRuntimeError</name>
      <anchorfile>classcRuntimeError.html</anchorfile>
      <anchor>a413646c577852fa82a848ab0187c57c8</anchor>
      <arglist>(const cRuntimeError &amp;e)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cRuntimeError *</type>
      <name>dup</name>
      <anchorfile>classcRuntimeError.html</anchorfile>
      <anchor>a6d34e0bf66e83e7c209bb72df3b816f8</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cScheduler</name>
    <filename>classcScheduler.html</filename>
    <base>cObject</base>
    <member kind="function">
      <type></type>
      <name>cScheduler</name>
      <anchorfile>classcScheduler.html</anchorfile>
      <anchor>a54fda844583bc9ce475d33f95e9db4f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cScheduler</name>
      <anchorfile>classcScheduler.html</anchorfile>
      <anchor>a57718b1ef8d9e536ee53701435acb654</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSimulation</name>
      <anchorfile>classcScheduler.html</anchorfile>
      <anchor>a08336db9c2ff46dbe1d6d516cb0316fc</anchor>
      <arglist>(cSimulation *_sim)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>startRun</name>
      <anchorfile>classcScheduler.html</anchorfile>
      <anchor>a648cabfaf6091ddd6d00464b87ebc6e9</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>endRun</name>
      <anchorfile>classcScheduler.html</anchorfile>
      <anchor>a1a67600f9b0a0daa0539aadd779b9cff</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>executionResumed</name>
      <anchorfile>classcScheduler.html</anchorfile>
      <anchor>a7ab75e1152842ce482c0ece2e70bd783</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cMessage *</type>
      <name>getNextEvent</name>
      <anchorfile>classcScheduler.html</anchorfile>
      <anchor>a80f30744912bd157280f41b4573f4f9b</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cSequentialScheduler</name>
    <filename>classcSequentialScheduler.html</filename>
    <base>cScheduler</base>
    <member kind="function">
      <type></type>
      <name>cSequentialScheduler</name>
      <anchorfile>classcSequentialScheduler.html</anchorfile>
      <anchor>ac5806d4b43308ae89ba35c284037efef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>startRun</name>
      <anchorfile>classcSequentialScheduler.html</anchorfile>
      <anchor>a2569ec13e2a6ba80979fb6abb33bccde</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>endRun</name>
      <anchorfile>classcSequentialScheduler.html</anchorfile>
      <anchor>a6960d9dec3df5a98ab6d7f7a3d64161e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cMessage *</type>
      <name>getNextEvent</name>
      <anchorfile>classcSequentialScheduler.html</anchorfile>
      <anchor>ac173601ca5d4d2ad03cf36d7262b007b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cSimpleModule</name>
    <filename>classcSimpleModule.html</filename>
    <base>cModule</base>
    <member kind="function">
      <type></type>
      <name>cSimpleModule</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>a73cd49242b12142d1bcf9d8e44725d20</anchor>
      <arglist>(unsigned stacksize=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cSimpleModule</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>abaf3c78d4204a86d97ab802b05777f33</anchor>
      <arglist>(const char *dummy1, cModule *dummy2, unsigned stacksize)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cSimpleModule</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>ac71066adcba7babfa8fe6295032c1dcf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>a1fbb4e8997b557f8e688284bda26ea48</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>ae6c2cca1385f7e0cea5c5a100e4cfb69</anchor>
      <arglist>(cVisitor *v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>scheduleStart</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>ada3fe83c75268f2cae40959d6b2dc64e</anchor>
      <arglist>(simtime_t t)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deleteModule</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>aed071be3b66c9a695b51bfebd19c5aa5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>usesActivity</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>acd1545693d0f3bdd452e2aa5cbe6ebcb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTerminated</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>a6a1f30ed927bb0060252d0be6d31f4f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>snapshot</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>ae9cce4496d6afc5ad01ef241a3320b93</anchor>
      <arglist>(cObject *obj=NULL, const char *label=NULL)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>send</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>a94590ba6481116f29f4c43d00733deea</anchor>
      <arglist>(cMessage *msg, int gateid)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>send</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>a3066269a97c0585bff0f41c81bd5d095</anchor>
      <arglist>(cMessage *msg, const char *gatename, int gateindex=-1)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>send</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>a9e5da3f2aecf61604ad649dff3ab88f4</anchor>
      <arglist>(cMessage *msg, cGate *outputgate)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sendDelayed</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>a269f4b6e4e3e813e12f4a922d3047cf3</anchor>
      <arglist>(cMessage *msg, simtime_t delay, int gateid)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sendDelayed</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>ad97aea478e65f9b1631f85fe0c9fe7b8</anchor>
      <arglist>(cMessage *msg, simtime_t delay, const char *gatename, int gateindex=-1)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sendDelayed</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>ad9c3c6b96d644269f44c458504e684c4</anchor>
      <arglist>(cMessage *msg, simtime_t delay, cGate *outputgate)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sendDirect</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>a318262d2d5a58f7014fdb7c96d743dc4</anchor>
      <arglist>(cMessage *msg, cModule *mod, const char *inputGateName, int gateIndex=-1)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sendDirect</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>a41b3f5b0dd21a8f4f138c3d4a978ed11</anchor>
      <arglist>(cMessage *msg, cModule *mod, int inputGateId)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sendDirect</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>a4845c418bab12a4f74e70a0610f6aad0</anchor>
      <arglist>(cMessage *msg, cGate *inputGate)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sendDirect</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>adda3af3219c1e3db0211b4c67f4144fd</anchor>
      <arglist>(cMessage *msg, simtime_t propagationDelay, simtime_t duration, cModule *mod, const char *inputGateName, int gateIndex=-1)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sendDirect</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>ac46b5a80045c85725af5b50498c1b98b</anchor>
      <arglist>(cMessage *msg, simtime_t propagationDelay, simtime_t duration, cModule *mod, int inputGateId)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sendDirect</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>ad1bbf6d313ffb7b1028c1e853e98ff35</anchor>
      <arglist>(cMessage *msg, simtime_t propagationDelay, simtime_t duration, cGate *inputGate)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>scheduleAt</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>a29a64f1f0c560ac75494940d5c7a048d</anchor>
      <arglist>(simtime_t t, cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>cMessage *</type>
      <name>cancelEvent</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>ac6dbd3f95eef46c010ab107f0eab3315</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cancelAndDelete</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>a59d46fbc9a77cb3e8164b0f624a51699</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>cMessage *</type>
      <name>receive</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>ae67be4c6ee87a9b09129e81c866a2b1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cMessage *</type>
      <name>receive</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>a64c0ef9d9a844c062ed58d9837f281c0</anchor>
      <arglist>(simtime_t timeout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wait</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>ac049793c0ca1e6b73392d596e7f32e85</anchor>
      <arglist>(simtime_t time)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>waitAndEnqueue</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>ab6b2100ef4e33b2de7fa941b1d610375</anchor>
      <arglist>(simtime_t time, cQueue *queue)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>endSimulation</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>a8713bf9b4d4970fcfe94995dcb42ce9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>halt</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>ae6230498997a3c7e77301629b61d3199</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>error</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>a31fa5f75091ee137832ee6d2d714fb19</anchor>
      <arglist>(const char *format,...) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasStackOverflow</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>a8e3867232e08037e1794790150b4c0b4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned</type>
      <name>getStackSize</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>aacc60dd6953b6002657efad300eadff7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned</type>
      <name>getStackUsage</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>a848a48e638bb68dddbf2e178c863eac2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>activity</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>ae7367768a6ad61a0e2256635e1ef6de2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>ac1a639fd9b931de297477fca26341650</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>cModule</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>a37aa51760d5f85b54d00668308b926c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>cSimulation</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>a3c6add72105ce0170138d90021da4d97</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cSimulation</name>
    <filename>classcSimulation.html</filename>
    <base>cNamedObject</base>
    <base protection="private">noncopyable</base>
    <member kind="function">
      <type></type>
      <name>cSimulation</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>aac660bf17af684502dc8db106defa1c2</anchor>
      <arglist>(const char *name, cEnvir *env)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cSimulation</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>a482bfeff90e9774c27842fd986730f9b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>a19281d9200ef473503301e4fee865148</anchor>
      <arglist>(cVisitor *v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getFullPath</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>a7dcce39ec36783f910dcf11ab0d7f35f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>registerModule</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>a2467255a86d7db446110d792e7a2df5c</anchor>
      <arglist>(cModule *mod)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deregisterModule</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>a6b178f0628d904030e2ed88c2b04d1ac</anchor>
      <arglist>(cModule *mod)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLastModuleId</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>ac164b9ffb5b96a550cb8ec08ea496fed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>getModuleByPath</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>ad74570b2e108672859083a667a353e47</anchor>
      <arglist>(const char *modulepath) const </arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>getModule</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>a4a52271d194b889ea9013c84a6501435</anchor>
      <arglist>(int id) const </arglist>
    </member>
    <member kind="function">
      <type>_OPPDEPRECATED cModule &amp;</type>
      <name>operator[]</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>a2d8506a2f636dc6100d09776682495c3</anchor>
      <arglist>(int id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSystemModule</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>a11b4c248450bab930617287ec7deec9b</anchor>
      <arglist>(cModule *p)</arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>getSystemModule</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>ad890c7addce2475e17003242c15be570</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScheduler</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>a6b604ffa7083353ceb040bf6093a72c2</anchor>
      <arglist>(cScheduler *scheduler)</arglist>
    </member>
    <member kind="function">
      <type>cScheduler *</type>
      <name>getScheduler</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>a8a402680d54f20829ce4337db4d4e58a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setupNetwork</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>af74967a0898da470a67c38a2da0efcd9</anchor>
      <arglist>(cModuleType *networkType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startRun</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>a906a49f03292339127fc228b88440681</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>callFinish</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>a4f25fe094f9693d4c3096406e3415ac4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>endRun</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>a10432b325dea6ca0f62b66f389da7222</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteNetwork</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>a366756a8aaaacc40aadde619b6f84573</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSimulationStage</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>aba8afda8aa794d95f1e46d9bdd7ab665</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cModuleType *</type>
      <name>getNetworkType</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>a7ac89f91e7bacd42d9efd6cd1504b0b4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSimTime</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>a460389d29ffc3e9c0f6a2d95e35a29a5</anchor>
      <arglist>(simtime_t time)</arglist>
    </member>
    <member kind="function">
      <type>simtime_t_cref</type>
      <name>getSimTime</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>a888772bf03376bfea84473df6a88853f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>eventnumber_t</type>
      <name>getEventNumber</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>a5555d126ef1ae39d38d97541c9511df6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>simtime_t_cref</type>
      <name>getWarmupPeriod</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>ad2757a6263b242e0ff65308a5f89bc8d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWarmupPeriod</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>a378c843a8b3eb09e36a83fb3870b82a7</anchor>
      <arglist>(simtime_t t)</arglist>
    </member>
    <member kind="function">
      <type>cSimpleModule *</type>
      <name>selectNextModule</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>ab2e4d1c1e9b3a4977e461b086ccbbee9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cMessage *</type>
      <name>guessNextEvent</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>a64b53a2b8a476243b4f45c9c298d5ecc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cSimpleModule *</type>
      <name>guessNextModule</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>aec01659570a4569d7979752d42d81696</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>guessNextSimtime</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>ad83678bf9986dfa44dbbb9635785e859</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doOneEvent</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>a0699bb8cf59fc88d19b99808ba8b8019</anchor>
      <arglist>(cSimpleModule *m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transferTo</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>aae6078fbec235fcc136a33ab5356612c</anchor>
      <arglist>(cSimpleModule *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transferToMain</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>a4e955ec45e74e0f4a289d2d5e14c1923</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertMsg</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>a4b5ac683789c96baac8453f3e7b48dfe</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setContext</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>aca2699572575eb41de51966048bc2548</anchor>
      <arglist>(cComponent *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setContextType</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>a4f19a0c3dc9427eab363356dd2974b9c</anchor>
      <arglist>(int ctxtype)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGlobalContext</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>a65a75b0d019fedb364935bce92a61441</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cSimpleModule *</type>
      <name>getActivityModule</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>aa262c9409a1d10f5e48a2faf0783730d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cComponent *</type>
      <name>getContext</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>a4e333ccc55b8f74fcc990754dd334344</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getContextType</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>a1c0414f0260b172f217fab2fc0a99a86</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>getContextModule</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>a273681a1a98a6f29cabc5fe089848c90</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cSimpleModule *</type>
      <name>getContextSimpleModule</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>a9d60e3596aa89e46df8d32a04bdb5415</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>requestTrapOnNextEvent</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>a0bd32349c7fabb2a0e087d8f8c41bc9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearTrapOnNextEvent</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>af77c54be8722440dd323d744957154e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTrapOnNextEventRequested</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>abc00347b4590230380379e67247ef34b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>getUniqueNumber</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>a2d24fbe01f22383338df558db322dda5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>snapshot</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>a784ddd34b1a2576f60b5982529e02625</anchor>
      <arglist>(cObject *obj, const char *label)</arglist>
    </member>
    <member kind="function">
      <type>cHasher *</type>
      <name>getHasher</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>afc942ee3b49068bd6b212399731d09f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHasher</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>ac434ca653e2bd186bb354fc6a33c38dd</anchor>
      <arglist>(cHasher *hasher)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>loadNedSourceFolder</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>a3f860475f30d916be4428cce02b867d5</anchor>
      <arglist>(const char *foldername)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>loadNedFile</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>a15180ada8eeab7c4636c4e420d801235</anchor>
      <arglist>(const char *nedfname, const char *expectedPackage=NULL, bool isXML=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>loadNedText</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>a163cad94a6d4f87c50214016be8b3072</anchor>
      <arglist>(const char *name, const char *nedtext, const char *expectedPackage=NULL, bool isXML=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>doneLoadingNedFiles</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>a4498f8e64b8acac672bcdf406d669462</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>getNedPackageForFolder</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>a3c159064a42463e645004c12dc3392f3</anchor>
      <arglist>(const char *folder)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>cSimpleModule</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>a6e6b6163d95b48ed0e0f953153b2febd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>cEnvir *</type>
      <name>getEnvir</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>afd5720f3321dfd026872ad316193d4b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cSimulation *</type>
      <name>getActiveSimulation</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>a03ed00b8671530ff66e7a6f9bc23e368</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cEnvir *</type>
      <name>getActiveEnvir</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>abfd70820c5cf9907a46477e2060bb9fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setActiveSimulation</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>afa166416e2cf54b0745f26dcdc96b4ab</anchor>
      <arglist>(cSimulation *sim)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setStaticEnvir</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>a01d61839ca1bf1ccb876bb47ccd6ebd3</anchor>
      <arglist>(cEnvir *env)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cEnvir *</type>
      <name>getStaticEnvir</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>a7d362bbc94219865f21ffbd5b6fdc5ab</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cSnapshotManager</name>
    <filename>classcSnapshotManager.html</filename>
    <base>cObject</base>
    <member kind="function">
      <type></type>
      <name>cSnapshotManager</name>
      <anchorfile>classcSnapshotManager.html</anchorfile>
      <anchor>ac599ca35acb13e2ec0f58ea179826a5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cSnapshotManager</name>
      <anchorfile>classcSnapshotManager.html</anchorfile>
      <anchor>ae9a08c97c02296029b202f5efdd6ced2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>startRun</name>
      <anchorfile>classcSnapshotManager.html</anchorfile>
      <anchor>a4ddf97740f46a6263c246ba5e3dfeff1</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>endRun</name>
      <anchorfile>classcSnapshotManager.html</anchorfile>
      <anchor>a0e8f54d153afd756736c7e220374ff60</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::ostream *</type>
      <name>getStreamForSnapshot</name>
      <anchorfile>classcSnapshotManager.html</anchorfile>
      <anchor>a509fd69394b564363d3616289ae33924</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>releaseStreamForSnapshot</name>
      <anchorfile>classcSnapshotManager.html</anchorfile>
      <anchor>ac91b31c182f1c3b24ba3ae8e611fd54f</anchor>
      <arglist>(std::ostream *os)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getFileName</name>
      <anchorfile>classcSnapshotManager.html</anchorfile>
      <anchor>ad5f6368719edb9f1942a938859ff3b7c</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cStackCleanupException</name>
    <filename>classcStackCleanupException.html</filename>
    <base>cException</base>
    <member kind="function">
      <type></type>
      <name>cStackCleanupException</name>
      <anchorfile>classcStackCleanupException.html</anchorfile>
      <anchor>a7b8cb032ed9b1b547c7f654d693180e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cStackCleanupException</name>
      <anchorfile>classcStackCleanupException.html</anchorfile>
      <anchor>ac7b9457b6cab0a8fc2e9f5601c85fdeb</anchor>
      <arglist>(const cStackCleanupException &amp;e)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cStackCleanupException *</type>
      <name>dup</name>
      <anchorfile>classcStackCleanupException.html</anchorfile>
      <anchor>a6106d0f66dee0d823e1f6f4868c9ea65</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isError</name>
      <anchorfile>classcStackCleanupException.html</anchorfile>
      <anchor>ab7728cfc9eb1e9d507f9ddbc7163f580</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cStatistic</name>
    <filename>classcStatistic.html</filename>
    <base>cOwnedObject</base>
    <member kind="function">
      <type></type>
      <name>cStatistic</name>
      <anchorfile>classcStatistic.html</anchorfile>
      <anchor>af1b8518d87e931dbe476b8426ffbbbbc</anchor>
      <arglist>(const cStatistic &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cStatistic</name>
      <anchorfile>classcStatistic.html</anchorfile>
      <anchor>a33aa620e1c8d9919f7cacc71a27c15f6</anchor>
      <arglist>(const char *name=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cStatistic</name>
      <anchorfile>classcStatistic.html</anchorfile>
      <anchor>a98228620a56854723400e5601b645fe9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cStatistic &amp;</type>
      <name>operator=</name>
      <anchorfile>classcStatistic.html</anchorfile>
      <anchor>af1091c28f0b1cc8ac094c13ab9737f7e</anchor>
      <arglist>(const cStatistic &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classcStatistic.html</anchorfile>
      <anchor>a3abf1c45d352c84e098e39e6bb67348a</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classcStatistic.html</anchorfile>
      <anchor>a01b0c82f99f0adba34904279d0eeaa10</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>collect</name>
      <anchorfile>classcStatistic.html</anchorfile>
      <anchor>a5705bc607dfe423186c3da64436d7534</anchor>
      <arglist>(double value)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collect</name>
      <anchorfile>classcStatistic.html</anchorfile>
      <anchor>a402cbbda6e9efe3f26a3bc9aeebd2e59</anchor>
      <arglist>(SimTime value)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isWeighted</name>
      <anchorfile>classcStatistic.html</anchorfile>
      <anchor>ae94084b89e707c6ccb112d1431a10c35</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collect2</name>
      <anchorfile>classcStatistic.html</anchorfile>
      <anchor>af1fb39d4bf764e4c640c1ed0592274a5</anchor>
      <arglist>(double value, double weight)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>merge</name>
      <anchorfile>classcStatistic.html</anchorfile>
      <anchor>ab68fa890a4f21c09fb524c9e441e5750</anchor>
      <arglist>(const cStatistic *other)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clearResult</name>
      <anchorfile>classcStatistic.html</anchorfile>
      <anchor>ab0411f1ce700f36f8e649c74e72efe86</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long</type>
      <name>getCount</name>
      <anchorfile>classcStatistic.html</anchorfile>
      <anchor>aca75a29be22628992883ccf21827091b</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getSum</name>
      <anchorfile>classcStatistic.html</anchorfile>
      <anchor>a7da6ee8b26ba4d8ca9598adfd60ccda6</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getSqrSum</name>
      <anchorfile>classcStatistic.html</anchorfile>
      <anchor>adc4ed439038873c576710f0c208bf406</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getMin</name>
      <anchorfile>classcStatistic.html</anchorfile>
      <anchor>a44560fc5abcc0b5bb0c3d7249fa471e3</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getMax</name>
      <anchorfile>classcStatistic.html</anchorfile>
      <anchor>a9a376c9ebc7d190a1398a7d1fdeea8df</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getMean</name>
      <anchorfile>classcStatistic.html</anchorfile>
      <anchor>aeff94ddc54538a3324ed4e78af43de51</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getStddev</name>
      <anchorfile>classcStatistic.html</anchorfile>
      <anchor>a55f4e38b9d8b23d7f1000e323060ec93</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getVariance</name>
      <anchorfile>classcStatistic.html</anchorfile>
      <anchor>a5dcc5f267458a9d72d1bf6f85dde6ea8</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getWeights</name>
      <anchorfile>classcStatistic.html</anchorfile>
      <anchor>ab53ad33cab4e72024c7518cd369d7698</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getWeightedSum</name>
      <anchorfile>classcStatistic.html</anchorfile>
      <anchor>af807a52ceb6b5d3a44e58cf85ba8eb9f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getSqrSumWeights</name>
      <anchorfile>classcStatistic.html</anchorfile>
      <anchor>ae04ee0aeafd45561a3fbfcc1ac3b1990</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getWeightedSqrSum</name>
      <anchorfile>classcStatistic.html</anchorfile>
      <anchor>a08017b3b228235d41291a421e3d26fbf</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addTransientDetection</name>
      <anchorfile>classcStatistic.html</anchorfile>
      <anchor>aeec5219f3bd69cd1c7a12e4ff90eca3a</anchor>
      <arglist>(cTransientDetection *object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addAccuracyDetection</name>
      <anchorfile>classcStatistic.html</anchorfile>
      <anchor>ae88d62e84d94c201459275d05d3209a5</anchor>
      <arglist>(cAccuracyDetection *object)</arglist>
    </member>
    <member kind="function">
      <type>cTransientDetection *</type>
      <name>getTransientDetectionObject</name>
      <anchorfile>classcStatistic.html</anchorfile>
      <anchor>a0de952cf082c8ac956da56a575094c69</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cAccuracyDetection *</type>
      <name>getAccuracyDetectionObject</name>
      <anchorfile>classcStatistic.html</anchorfile>
      <anchor>a7427b4f9e2bfd9d8848826865356ce36</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGenK</name>
      <anchorfile>classcStatistic.html</anchorfile>
      <anchor>a65518185c8e77aceb941ee67d6ddcb96</anchor>
      <arglist>(int gen_nr)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>random</name>
      <anchorfile>classcStatistic.html</anchorfile>
      <anchor>ad93cec6491a2d08e9fe319bda5f76bbb</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>saveToFile</name>
      <anchorfile>classcStatistic.html</anchorfile>
      <anchor>acc60f0394c175f9e51f5188630c3e55a</anchor>
      <arglist>(FILE *) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>loadFromFile</name>
      <anchorfile>classcStatistic.html</anchorfile>
      <anchor>a7a2a6df2039a2ad50a99c7525afc1619</anchor>
      <arglist>(FILE *)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>record</name>
      <anchorfile>classcStatistic.html</anchorfile>
      <anchor>a3dc9a5572c2e0ef3bb10b181f4a541e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>recordWithUnit</name>
      <anchorfile>classcStatistic.html</anchorfile>
      <anchor>a83260d0bd1e11ccf3ed81d83d4f7f4d1</anchor>
      <arglist>(const char *unit)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>recordAs</name>
      <anchorfile>classcStatistic.html</anchorfile>
      <anchor>afb43a821ce893fe61db0172e0d3fbb3d</anchor>
      <arglist>(const char *name, const char *unit=NULL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cStdDev</name>
    <filename>classcStdDev.html</filename>
    <base>cStatistic</base>
    <member kind="function">
      <type></type>
      <name>cStdDev</name>
      <anchorfile>classcStdDev.html</anchorfile>
      <anchor>a854244eba9dad00dfe15955f139cf73b</anchor>
      <arglist>(const cStdDev &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cStdDev</name>
      <anchorfile>classcStdDev.html</anchorfile>
      <anchor>ad78e3948b6d64b65ea4b2f72ab909778</anchor>
      <arglist>(const char *name=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cStdDev</name>
      <anchorfile>classcStdDev.html</anchorfile>
      <anchor>acd53e74f06b12020f9c4aee3e0bf3a53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cStdDev &amp;</type>
      <name>operator=</name>
      <anchorfile>classcStdDev.html</anchorfile>
      <anchor>a8b2112a447ec0a8c3ade292ec6f92399</anchor>
      <arglist>(const cStdDev &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cStdDev *</type>
      <name>dup</name>
      <anchorfile>classcStdDev.html</anchorfile>
      <anchor>a48e7dbbdf92c1f4ca4ada627cbc75e00</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcStdDev.html</anchorfile>
      <anchor>a7c74ec4e295f5c92e2530d70593dd588</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>detailedInfo</name>
      <anchorfile>classcStdDev.html</anchorfile>
      <anchor>a2b4ba4d350f71976428e0f53759b51a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classcStdDev.html</anchorfile>
      <anchor>a7e16e1a9746ad610c10f078b334b72ba</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classcStdDev.html</anchorfile>
      <anchor>a20cf412fc94dc2bd5b407c5f1399ddee</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collect</name>
      <anchorfile>classcStdDev.html</anchorfile>
      <anchor>a876b40062b9da17e156488870b69fed9</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collect</name>
      <anchorfile>classcStdDev.html</anchorfile>
      <anchor>abd4788b0b8c0ad9f05b1371bfe488493</anchor>
      <arglist>(SimTime value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>merge</name>
      <anchorfile>classcStdDev.html</anchorfile>
      <anchor>ae89d25eafee7cf2d1ea97d76cce3ce5b</anchor>
      <arglist>(const cStatistic *other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isWeighted</name>
      <anchorfile>classcStdDev.html</anchorfile>
      <anchor>a433510aede0e5ec538cafce12e4b3872</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>getCount</name>
      <anchorfile>classcStdDev.html</anchorfile>
      <anchor>a02746f817156ccedf188b18bf28a531d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getSum</name>
      <anchorfile>classcStdDev.html</anchorfile>
      <anchor>a387c04c503e651a5b97b6443696c9a0d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getSqrSum</name>
      <anchorfile>classcStdDev.html</anchorfile>
      <anchor>a930e919d0d1802d5e7812c38e85f203d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMin</name>
      <anchorfile>classcStdDev.html</anchorfile>
      <anchor>ab682269238bc1d82f8fa870de9351e0a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMax</name>
      <anchorfile>classcStdDev.html</anchorfile>
      <anchor>a9dae2eb597d46cb90722048590f1385d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMean</name>
      <anchorfile>classcStdDev.html</anchorfile>
      <anchor>a3fde16a03e479d5dd00d38fe0847c16b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getStddev</name>
      <anchorfile>classcStdDev.html</anchorfile>
      <anchor>a73d4b346643b657814894367cd26c82d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getVariance</name>
      <anchorfile>classcStdDev.html</anchorfile>
      <anchor>a480c95cda18dce2474f7422b6b0a3a42</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getWeights</name>
      <anchorfile>classcStdDev.html</anchorfile>
      <anchor>afdf78b935d89cc81e131c0166fbe27dd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getWeightedSum</name>
      <anchorfile>classcStdDev.html</anchorfile>
      <anchor>a48cb0581c961dc85653726c1ac64599f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getSqrSumWeights</name>
      <anchorfile>classcStdDev.html</anchorfile>
      <anchor>ac2ec786322ea95b366bf931901ec3237</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getWeightedSqrSum</name>
      <anchorfile>classcStdDev.html</anchorfile>
      <anchor>ac4fd3d140566ad730d3b823f61daa638</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>random</name>
      <anchorfile>classcStdDev.html</anchorfile>
      <anchor>a5a14d103ec8bbfc3c0737b26d1aece3f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clearResult</name>
      <anchorfile>classcStdDev.html</anchorfile>
      <anchor>a1a1242e898dd3f929fd0f1adbbb2bb17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>saveToFile</name>
      <anchorfile>classcStdDev.html</anchorfile>
      <anchor>a3515fb39dc39dfa183cbb64042352502</anchor>
      <arglist>(FILE *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>loadFromFile</name>
      <anchorfile>classcStdDev.html</anchorfile>
      <anchor>a1a7ada29a27c4d0de885882f6de429b5</anchor>
      <arglist>(FILE *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cStringParImpl</name>
    <filename>classcStringParImpl.html</filename>
    <base>cParImpl</base>
    <member kind="function">
      <type></type>
      <name>cStringParImpl</name>
      <anchorfile>classcStringParImpl.html</anchorfile>
      <anchor>ae88df043bf3204f785b78104bacb7eae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cStringParImpl</name>
      <anchorfile>classcStringParImpl.html</anchorfile>
      <anchor>a68e14b8bb70b46d5baabdf61662835bc</anchor>
      <arglist>(const cStringParImpl &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cStringParImpl</name>
      <anchorfile>classcStringParImpl.html</anchorfile>
      <anchor>a8d688d75ca60479a6c61d6c9fdaee00b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classcStringParImpl.html</anchorfile>
      <anchor>ae7328b0431fc16f552e2ed6506012ad4</anchor>
      <arglist>(const cStringParImpl &amp;otherpar)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cStringParImpl *</type>
      <name>dup</name>
      <anchorfile>classcStringParImpl.html</anchorfile>
      <anchor>af31f2182b8d40013556eeb1e1285a098</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classcStringParImpl.html</anchorfile>
      <anchor>acf93e7e9bc96d8a5a5e70b8ea7bbac4f</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classcStringParImpl.html</anchorfile>
      <anchor>a245c1e5f24280f025ff7dfb94e7f3f4a</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBoolValue</name>
      <anchorfile>classcStringParImpl.html</anchorfile>
      <anchor>a1f6b699811ab61acb84aac6d98ea14a8</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLongValue</name>
      <anchorfile>classcStringParImpl.html</anchorfile>
      <anchor>a55b68aa25f1dffe31546066b184f23b6</anchor>
      <arglist>(long l)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDoubleValue</name>
      <anchorfile>classcStringParImpl.html</anchorfile>
      <anchor>a69cb31b72739fbb77e1c7fbd787caa8a</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStringValue</name>
      <anchorfile>classcStringParImpl.html</anchorfile>
      <anchor>a30b3cf802bf65079bae90208e159e100</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setXMLValue</name>
      <anchorfile>classcStringParImpl.html</anchorfile>
      <anchor>a3d7b96b86e62dc836a1ef2bd07adf99c</anchor>
      <arglist>(cXMLElement *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setExpression</name>
      <anchorfile>classcStringParImpl.html</anchorfile>
      <anchor>a7552bc3e569839e3b5a0759aab7b9aad</anchor>
      <arglist>(cExpression *e)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>boolValue</name>
      <anchorfile>classcStringParImpl.html</anchorfile>
      <anchor>a8613cef3a790c202c476075a3972377a</anchor>
      <arglist>(cComponent *context) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>longValue</name>
      <anchorfile>classcStringParImpl.html</anchorfile>
      <anchor>a7b36f5c3c8ba6668f2282304d7440d09</anchor>
      <arglist>(cComponent *context) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>doubleValue</name>
      <anchorfile>classcStringParImpl.html</anchorfile>
      <anchor>a98c25f3b28aa2942a753ea0049b4456c</anchor>
      <arglist>(cComponent *context) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>stringValue</name>
      <anchorfile>classcStringParImpl.html</anchorfile>
      <anchor>af85d61175479c4ee13c43ae3028401cf</anchor>
      <arglist>(cComponent *context) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>stdstringValue</name>
      <anchorfile>classcStringParImpl.html</anchorfile>
      <anchor>ae4e48c006c8189e5f5aa2b85d5c18177</anchor>
      <arglist>(cComponent *context) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>xmlValue</name>
      <anchorfile>classcStringParImpl.html</anchorfile>
      <anchor>aeed7b0428f1311dc73049ba91f71b8b9</anchor>
      <arglist>(cComponent *context) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cExpression *</type>
      <name>getExpression</name>
      <anchorfile>classcStringParImpl.html</anchorfile>
      <anchor>ad1194ac9b78f126eb9bbe8d87eb5ba7a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Type</type>
      <name>getType</name>
      <anchorfile>classcStringParImpl.html</anchorfile>
      <anchor>a7f419a2476544807817940d2ce2f8cc5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isNumeric</name>
      <anchorfile>classcStringParImpl.html</anchorfile>
      <anchor>a37de50edc6371f29b697ced28b310ab6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>convertToConst</name>
      <anchorfile>classcStringParImpl.html</anchorfile>
      <anchor>aa03507aed9c5a4f0b3310e3ba4bec839</anchor>
      <arglist>(cComponent *context)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classcStringParImpl.html</anchorfile>
      <anchor>a1871c8dbbc528c7d3b750764b86c51f7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classcStringParImpl.html</anchorfile>
      <anchor>a7bf0a12bfb4941299ff6eba640f6798c</anchor>
      <arglist>(const char *text)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compare</name>
      <anchorfile>classcStringParImpl.html</anchorfile>
      <anchor>a6015e6b22c5157e320b6fa6e8eaea1be</anchor>
      <arglist>(const cParImpl *other) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cStringPool</name>
    <filename>classcStringPool.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>get</name>
      <anchorfile>classcStringPool.html</anchorfile>
      <anchor>a5ed7e79e19860d02ecb44c0152228665</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>peek</name>
      <anchorfile>classcStringPool.html</anchorfile>
      <anchor>aa3f7b6a8ab4ac102b5e53a7e3e8eca36</anchor>
      <arglist>(const char *s) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>release</name>
      <anchorfile>classcStringPool.html</anchorfile>
      <anchor>a5039c59c659a5f42dd8b18e2d18ad6d7</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchorfile>classcStringPool.html</anchorfile>
      <anchor>aee9471ca65df1f49fbfb3e9f983c25f8</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cStringTokenizer</name>
    <filename>classcStringTokenizer.html</filename>
    <member kind="function">
      <type></type>
      <name>cStringTokenizer</name>
      <anchorfile>classcStringTokenizer.html</anchorfile>
      <anchor>aa6ae14aa970cc07bdca732f254bc68b9</anchor>
      <arglist>(const char *str, const char *delimiters=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cStringTokenizer</name>
      <anchorfile>classcStringTokenizer.html</anchorfile>
      <anchor>a7cc82b3c4e73959fc7cdcdd31d0594b4</anchor>
      <arglist>(const cStringTokenizer &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~cStringTokenizer</name>
      <anchorfile>classcStringTokenizer.html</anchorfile>
      <anchor>a9efbb483d5136864e2cb5f53164a9843</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cStringTokenizer &amp;</type>
      <name>operator=</name>
      <anchorfile>classcStringTokenizer.html</anchorfile>
      <anchor>af471a02314f98a7d67d09f87848de567</anchor>
      <arglist>(const cStringTokenizer &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDelimiter</name>
      <anchorfile>classcStringTokenizer.html</anchorfile>
      <anchor>a186e74690c84130fe7215540ac56a3df</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasMoreTokens</name>
      <anchorfile>classcStringTokenizer.html</anchorfile>
      <anchor>af8805776a4f9d0edeb9f669488897cec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>nextToken</name>
      <anchorfile>classcStringTokenizer.html</anchorfile>
      <anchor>a012468a6d662c579f83a5e2d9304184c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>asVector</name>
      <anchorfile>classcStringTokenizer.html</anchorfile>
      <anchor>a8b1a9ea250b0f88a67b8aee444ed3285</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; int &gt;</type>
      <name>asIntVector</name>
      <anchorfile>classcStringTokenizer.html</anchorfile>
      <anchor>a81f1e211573f636ca54468da3ac89df9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt;</type>
      <name>asDoubleVector</name>
      <anchorfile>classcStringTokenizer.html</anchorfile>
      <anchor>a93ccad9345ef4f97c04cfbc7a73d956a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cSubModIterator</name>
    <filename>classcSubModIterator.html</filename>
    <base>cModule::SubmoduleIterator</base>
  </compound>
  <compound kind="class">
    <name>cTDExpandingWindows</name>
    <filename>classcTDExpandingWindows.html</filename>
    <base>cTransientDetection</base>
    <member kind="function">
      <type></type>
      <name>cTDExpandingWindows</name>
      <anchorfile>classcTDExpandingWindows.html</anchorfile>
      <anchor>a2c503559f9b980a7a7600fee54dd7286</anchor>
      <arglist>(const cTDExpandingWindows &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cTDExpandingWindows</name>
      <anchorfile>classcTDExpandingWindows.html</anchorfile>
      <anchor>a06efa254338aa2722a8f779a618402bc</anchor>
      <arglist>(const char *name=NULL, int reps=3, int minw=4, double wind=1.3, double acc=0.3, PostTDFunc f=NULL, void *p=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cTDExpandingWindows</name>
      <anchorfile>classcTDExpandingWindows.html</anchorfile>
      <anchor>aab8deab17d71bd13105d0f61454ed1b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cTDExpandingWindows &amp;</type>
      <name>operator=</name>
      <anchorfile>classcTDExpandingWindows.html</anchorfile>
      <anchor>adba0f06432d34dbe142db6754e7399f2</anchor>
      <arglist>(const cTDExpandingWindows &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cTDExpandingWindows *</type>
      <name>dup</name>
      <anchorfile>classcTDExpandingWindows.html</anchorfile>
      <anchor>aa882cf7d507af1ec63c59d8e37cc26c5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collect</name>
      <anchorfile>classcTDExpandingWindows.html</anchorfile>
      <anchor>a82758c9d954381f61c1221978ab67fb2</anchor>
      <arglist>(double val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>detected</name>
      <anchorfile>classcTDExpandingWindows.html</anchorfile>
      <anchor>ac176d541f70e20985ac8d0ebfea54be6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classcTDExpandingWindows.html</anchorfile>
      <anchor>a9de9afb49502da6143d3ce14e11198a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>stop</name>
      <anchorfile>classcTDExpandingWindows.html</anchorfile>
      <anchor>adeb9b979ac045178c1eab0c614227ace</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>start</name>
      <anchorfile>classcTDExpandingWindows.html</anchorfile>
      <anchor>a683928ce2122a8c37817e82a6dbb438a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameters</name>
      <anchorfile>classcTDExpandingWindows.html</anchorfile>
      <anchor>a1732bad9228498f19f5de054d787ef62</anchor>
      <arglist>(int reps=3, int minw=4, double wind=1.3, double acc=0.3)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cTerminationException</name>
    <filename>classcTerminationException.html</filename>
    <base>cException</base>
    <member kind="function">
      <type></type>
      <name>cTerminationException</name>
      <anchorfile>classcTerminationException.html</anchorfile>
      <anchor>a42b56576f08f95583027f1ff96709e65</anchor>
      <arglist>(OppErrorCode errcode,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cTerminationException</name>
      <anchorfile>classcTerminationException.html</anchorfile>
      <anchor>a9c5105c443602a4bf5a311e00992caa9</anchor>
      <arglist>(const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cTerminationException</name>
      <anchorfile>classcTerminationException.html</anchorfile>
      <anchor>a66a35ea486cf023a8bab4aa620b68f41</anchor>
      <arglist>(const cTerminationException &amp;e)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cTerminationException *</type>
      <name>dup</name>
      <anchorfile>classcTerminationException.html</anchorfile>
      <anchor>a3cc34be98273933d33c17328b9c0f5e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isError</name>
      <anchorfile>classcTerminationException.html</anchorfile>
      <anchor>a800ea3ac1413f70600cb9118eb7c1003</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cTextFigure</name>
    <filename>classcTextFigure.html</filename>
    <base>cFigure</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cTextFigure *</type>
      <name>dup</name>
      <anchorfile>classcTextFigure.html</anchorfile>
      <anchor>a44ef4462e4a72590c29ba52b920d5e7f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcTextFigure.html</anchorfile>
      <anchor>acab8f0a3f97e5a8cd8d20b06514ef325</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cTimestampedValue</name>
    <filename>classcTimestampedValue.html</filename>
    <base>cITimestampedValue</base>
    <base>cObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t_cref</type>
      <name>getTimestamp</name>
      <anchorfile>classcTimestampedValue.html</anchorfile>
      <anchor>a9ce51cc42afed5b4f2386e620270a86c</anchor>
      <arglist>(simsignal_t signalID) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SimsignalType</type>
      <name>getValueType</name>
      <anchorfile>classcTimestampedValue.html</anchorfile>
      <anchor>a00feb36de57e9ea8cc192428041fef07</anchor>
      <arglist>(simsignal_t signalID) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cTimestampedValue</name>
      <anchorfile>classcTimestampedValue.html</anchorfile>
      <anchor>a6cadbe609bdaa045fca07a2022569465</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cTimestampedValue</name>
      <anchorfile>classcTimestampedValue.html</anchorfile>
      <anchor>a95fd95b4d0fc90c34a399293b2d7d468</anchor>
      <arglist>(simtime_t timestamp, bool b)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cTimestampedValue</name>
      <anchorfile>classcTimestampedValue.html</anchorfile>
      <anchor>a7c1de0048a9632079d13ff6eb2413721</anchor>
      <arglist>(simtime_t timestamp, long l)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cTimestampedValue</name>
      <anchorfile>classcTimestampedValue.html</anchorfile>
      <anchor>a92f0df59b5482ddc62eba9694bdc62bd</anchor>
      <arglist>(simtime_t timestamp, unsigned long ul)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cTimestampedValue</name>
      <anchorfile>classcTimestampedValue.html</anchorfile>
      <anchor>a95b509eeee2a3b91980f2aa3d06c93d0</anchor>
      <arglist>(simtime_t timestamp, double d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cTimestampedValue</name>
      <anchorfile>classcTimestampedValue.html</anchorfile>
      <anchor>ad52bad9127d36535c5d34e801e70b922</anchor>
      <arglist>(simtime_t timestamp, const SimTime &amp;t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cTimestampedValue</name>
      <anchorfile>classcTimestampedValue.html</anchorfile>
      <anchor>a653a4636324465492bb8799a3040bbd1</anchor>
      <arglist>(simtime_t timestamp, const char *s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cTimestampedValue</name>
      <anchorfile>classcTimestampedValue.html</anchorfile>
      <anchor>a68bbf08d0003dd33002defcfc6496386</anchor>
      <arglist>(simtime_t timestamp, cObject *obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classcTimestampedValue.html</anchorfile>
      <anchor>a4f7675e43ae99e76a1dd4f62601a6382</anchor>
      <arglist>(simtime_t timestamp, bool b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classcTimestampedValue.html</anchorfile>
      <anchor>a3c00a09527151368c3d26794406a1b03</anchor>
      <arglist>(simtime_t timestamp, long l)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classcTimestampedValue.html</anchorfile>
      <anchor>a9020c087bb1b73fc2ba2a7b3c4a9c8c4</anchor>
      <arglist>(simtime_t timestamp, unsigned long ul)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classcTimestampedValue.html</anchorfile>
      <anchor>ad49ccea35789d75043a54640d7c87146</anchor>
      <arglist>(simtime_t timestamp, double d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classcTimestampedValue.html</anchorfile>
      <anchor>abefd214bd950106492beec8d295a6183</anchor>
      <arglist>(simtime_t timestamp, const SimTime &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classcTimestampedValue.html</anchorfile>
      <anchor>a179837401ec6e7d2939e4af3f35a76cf</anchor>
      <arglist>(simtime_t timestamp, const char *s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classcTimestampedValue.html</anchorfile>
      <anchor>ab36ade8dbe096964457307046217d357</anchor>
      <arglist>(simtime_t timestamp, cObject *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>boolValue</name>
      <anchorfile>classcTimestampedValue.html</anchorfile>
      <anchor>a16f7d1a9f1583eae323dc6b7212d5571</anchor>
      <arglist>(simsignal_t signalID) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>longValue</name>
      <anchorfile>classcTimestampedValue.html</anchorfile>
      <anchor>a01afb8e2dfb2006c5a774365a80d3984</anchor>
      <arglist>(simsignal_t signalID) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned long</type>
      <name>unsignedLongValue</name>
      <anchorfile>classcTimestampedValue.html</anchorfile>
      <anchor>aa4076f29918168709f135b87932427f9</anchor>
      <arglist>(simsignal_t signalID) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>doubleValue</name>
      <anchorfile>classcTimestampedValue.html</anchorfile>
      <anchor>aac9569410971b43e75255db72c44b58f</anchor>
      <arglist>(simsignal_t signalID) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SimTime</type>
      <name>simtimeValue</name>
      <anchorfile>classcTimestampedValue.html</anchorfile>
      <anchor>a413b1d2d61a56c5e5084c543687fdae4</anchor>
      <arglist>(simsignal_t signalID) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>stringValue</name>
      <anchorfile>classcTimestampedValue.html</anchorfile>
      <anchor>a577cec48ff871090a79bdb6c223e9d84</anchor>
      <arglist>(simsignal_t signalID) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>objectValue</name>
      <anchorfile>classcTimestampedValue.html</anchorfile>
      <anchor>aa715fb138fed3fd59375e51c27cfc3f5</anchor>
      <arglist>(simsignal_t signalID) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cTopology</name>
    <filename>classcTopology.html</filename>
    <base>cOwnedObject</base>
    <class kind="class">cTopology::Link</class>
    <class kind="class">cTopology::LinkIn</class>
    <class kind="class">cTopology::LinkOut</class>
    <class kind="class">cTopology::Node</class>
    <class kind="class">cTopology::Predicate</class>
    <member kind="function">
      <type></type>
      <name>cTopology</name>
      <anchorfile>classcTopology.html</anchorfile>
      <anchor>aa540fd27dcbbd67714c1eb46980c049d</anchor>
      <arglist>(const char *name=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cTopology</name>
      <anchorfile>classcTopology.html</anchorfile>
      <anchor>a6b4430e9e3a4b3ffe346d8dc85e29987</anchor>
      <arglist>(const cTopology &amp;topo)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cTopology</name>
      <anchorfile>classcTopology.html</anchorfile>
      <anchor>a97436f45bc7fc20ba3802d11a4cfe173</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cTopology &amp;</type>
      <name>operator=</name>
      <anchorfile>classcTopology.html</anchorfile>
      <anchor>af9ebab8c0519c82df3f3e358ffd035b2</anchor>
      <arglist>(const cTopology &amp;topo)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cTopology *</type>
      <name>dup</name>
      <anchorfile>classcTopology.html</anchorfile>
      <anchor>af9fb1215e25675e3f49ada50acae1605</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcTopology.html</anchorfile>
      <anchor>a644049ca8239eb389fe20a49e3d3c428</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classcTopology.html</anchorfile>
      <anchor>a790b08ba3baa3a66808e5f72525f52d9</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classcTopology.html</anchorfile>
      <anchor>a40a84d778bad4bf009bfe6a7661fc33c</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extractFromNetwork</name>
      <anchorfile>classcTopology.html</anchorfile>
      <anchor>a449b5ad0c2916511e76d7b0131a6ef09</anchor>
      <arglist>(bool(*selfunc)(cModule *, void *), void *userdata=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extractFromNetwork</name>
      <anchorfile>classcTopology.html</anchorfile>
      <anchor>a688e0515aa814e872564cfb122c87d85</anchor>
      <arglist>(Predicate *predicate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extractByModulePath</name>
      <anchorfile>classcTopology.html</anchorfile>
      <anchor>a54b4891abd28e1a9700946654034d367</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;fullPathPatterns)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extractByNedTypeName</name>
      <anchorfile>classcTopology.html</anchorfile>
      <anchor>ae2b6970c74322b7179e136029a187f9c</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;nedTypeNames)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extractByProperty</name>
      <anchorfile>classcTopology.html</anchorfile>
      <anchor>a387ea85304d459e6da463fea8aeb7f72</anchor>
      <arglist>(const char *propertyName, const char *value=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extractByParameter</name>
      <anchorfile>classcTopology.html</anchorfile>
      <anchor>a5a5f9bd454fb850d158640e4f8c7cd0c</anchor>
      <arglist>(const char *paramName, const char *paramValue=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classcTopology.html</anchorfile>
      <anchor>a7d96a698039156fb857a9ba72a41379c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumNodes</name>
      <anchorfile>classcTopology.html</anchorfile>
      <anchor>a9ab37e112ec07e7cdded2c5046910957</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Node *</type>
      <name>getNode</name>
      <anchorfile>classcTopology.html</anchorfile>
      <anchor>a90e795af4b961529b8e2d83eca316079</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>Node *</type>
      <name>getNodeFor</name>
      <anchorfile>classcTopology.html</anchorfile>
      <anchor>a4000b9e28b62b3c1816d69695d93da95</anchor>
      <arglist>(cModule *mod)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calculateUnweightedSingleShortestPathsTo</name>
      <anchorfile>classcTopology.html</anchorfile>
      <anchor>acac27e130259f6992b726d31cc9f10fd</anchor>
      <arglist>(Node *target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calculateWeightedSingleShortestPathsTo</name>
      <anchorfile>classcTopology.html</anchorfile>
      <anchor>a51a47079b356ff3a70964f4f518e3a3e</anchor>
      <arglist>(Node *target)</arglist>
    </member>
    <member kind="function">
      <type>Node *</type>
      <name>getTargetNode</name>
      <anchorfile>classcTopology.html</anchorfile>
      <anchor>a78dbad0c81c4242b6aa4584c1b47f6cb</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cTopology::Link</name>
    <filename>classcTopology_1_1Link.html</filename>
    <member kind="function">
      <type>double</type>
      <name>getWeight</name>
      <anchorfile>classcTopology_1_1Link.html</anchorfile>
      <anchor>a60a0887cfc44372e86a23fc2a5385fbc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWeight</name>
      <anchorfile>classcTopology_1_1Link.html</anchorfile>
      <anchor>a05d0cec24b7c5d152d7de0428a8341f9</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEnabled</name>
      <anchorfile>classcTopology_1_1Link.html</anchorfile>
      <anchor>aecd8ce6e058e02f7128ff7d657c47a50</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enable</name>
      <anchorfile>classcTopology_1_1Link.html</anchorfile>
      <anchor>a02b3c6a76945a2d790cc08f02b28fdc1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disable</name>
      <anchorfile>classcTopology_1_1Link.html</anchorfile>
      <anchor>a884440c3db68066bbca7ae683441c114</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>cTopology</name>
      <anchorfile>classcTopology_1_1Link.html</anchorfile>
      <anchor>a0c74f5a58ad12fc5c99980f5ea4d9705</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cTopology::LinkIn</name>
    <filename>classcTopology_1_1LinkIn.html</filename>
    <base>cTopology::Link</base>
    <member kind="function">
      <type>Node *</type>
      <name>getRemoteNode</name>
      <anchorfile>classcTopology_1_1LinkIn.html</anchorfile>
      <anchor>aa38955ebf4bad3124177157e9ba19241</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRemoteGateId</name>
      <anchorfile>classcTopology_1_1LinkIn.html</anchorfile>
      <anchor>aa04fbab42c5ca1088df410555929a678</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLocalGateId</name>
      <anchorfile>classcTopology_1_1LinkIn.html</anchorfile>
      <anchor>acef65f8d336a210874b34533b19db8f5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cGate *</type>
      <name>getRemoteGate</name>
      <anchorfile>classcTopology_1_1LinkIn.html</anchorfile>
      <anchor>a3c425dfef8c2f875943f6b909f700b8c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cGate *</type>
      <name>getLocalGate</name>
      <anchorfile>classcTopology_1_1LinkIn.html</anchorfile>
      <anchor>aba2894c6bfef20c813a975b7a2a4b994</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cTopology::LinkOut</name>
    <filename>classcTopology_1_1LinkOut.html</filename>
    <base>cTopology::Link</base>
    <member kind="function">
      <type>Node *</type>
      <name>getRemoteNode</name>
      <anchorfile>classcTopology_1_1LinkOut.html</anchorfile>
      <anchor>af8c64819f67c9cddd3706faaf8d59020</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRemoteGateId</name>
      <anchorfile>classcTopology_1_1LinkOut.html</anchorfile>
      <anchor>a116cbf73187385db973d2e749457c856</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLocalGateId</name>
      <anchorfile>classcTopology_1_1LinkOut.html</anchorfile>
      <anchor>ae1685fb9e9c354a23118eb6c0d3f2482</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cGate *</type>
      <name>getRemoteGate</name>
      <anchorfile>classcTopology_1_1LinkOut.html</anchorfile>
      <anchor>ad7441fe4d2142066e2df84a00ce992fc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cGate *</type>
      <name>getLocalGate</name>
      <anchorfile>classcTopology_1_1LinkOut.html</anchorfile>
      <anchor>aea44c077b46de76a7202bf243ac2b6d7</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cTopology::Node</name>
    <filename>classcTopology_1_1Node.html</filename>
    <member kind="function">
      <type>int</type>
      <name>getModuleId</name>
      <anchorfile>classcTopology_1_1Node.html</anchorfile>
      <anchor>a7bc69c7c84de00aea5239603a95aa65a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>getModule</name>
      <anchorfile>classcTopology_1_1Node.html</anchorfile>
      <anchor>a3c1a00ba6a226ea0438f8c7d1726d9b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getWeight</name>
      <anchorfile>classcTopology_1_1Node.html</anchorfile>
      <anchor>a2def6bf6251a2952f6c4136028b700fa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWeight</name>
      <anchorfile>classcTopology_1_1Node.html</anchorfile>
      <anchor>a93d16782ad61cbbbc91af58b39659aad</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEnabled</name>
      <anchorfile>classcTopology_1_1Node.html</anchorfile>
      <anchor>a58eba810b871d952032f43f0ba532314</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enable</name>
      <anchorfile>classcTopology_1_1Node.html</anchorfile>
      <anchor>a46433904c656e2a171eec7010825c4ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disable</name>
      <anchorfile>classcTopology_1_1Node.html</anchorfile>
      <anchor>add6108ece6afc339526f228d1e6ef13e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumInLinks</name>
      <anchorfile>classcTopology_1_1Node.html</anchorfile>
      <anchor>a995abe92ca1eb8e1b7ebd998c5585301</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>LinkIn *</type>
      <name>getLinkIn</name>
      <anchorfile>classcTopology_1_1Node.html</anchorfile>
      <anchor>a9cff2f0e7c3d16c438474dbdfbff382f</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumOutLinks</name>
      <anchorfile>classcTopology_1_1Node.html</anchorfile>
      <anchor>ac0089b7d3a5a1c4a749b9e58a5096d86</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>LinkOut *</type>
      <name>getLinkOut</name>
      <anchorfile>classcTopology_1_1Node.html</anchorfile>
      <anchor>a673a8d827984074507740f5a7c71480f</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDistanceToTarget</name>
      <anchorfile>classcTopology_1_1Node.html</anchorfile>
      <anchor>a030f27dd8bbb6587988ca91a8232cb47</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumPaths</name>
      <anchorfile>classcTopology_1_1Node.html</anchorfile>
      <anchor>a5dc7c43818c611596d155f75e8326a77</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>LinkOut *</type>
      <name>getPath</name>
      <anchorfile>classcTopology_1_1Node.html</anchorfile>
      <anchor>aefec9c109d20b4603ef6cccece08249a</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>cTopology</name>
      <anchorfile>classcTopology_1_1Node.html</anchorfile>
      <anchor>a0c74f5a58ad12fc5c99980f5ea4d9705</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cTopology::Predicate</name>
    <filename>classcTopology_1_1Predicate.html</filename>
  </compound>
  <compound kind="class">
    <name>cTransientDetection</name>
    <filename>classcTransientDetection.html</filename>
    <base>cOwnedObject</base>
    <member kind="function">
      <type></type>
      <name>cTransientDetection</name>
      <anchorfile>classcTransientDetection.html</anchorfile>
      <anchor>a5fd74b0f005467a1aeca2a7920e72d7e</anchor>
      <arglist>(const char *name=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cTransientDetection</name>
      <anchorfile>classcTransientDetection.html</anchorfile>
      <anchor>a3225b5ebcafb1b8edaf284fc58b72b47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cTransientDetection *</type>
      <name>dup</name>
      <anchorfile>classcTransientDetection.html</anchorfile>
      <anchor>a3a4093f92e549b3b9ea36e5efa9b8600</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>collect</name>
      <anchorfile>classcTransientDetection.html</anchorfile>
      <anchor>a1e739b4323569aef81dc5a1363aa637f</anchor>
      <arglist>(double val)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>detected</name>
      <anchorfile>classcTransientDetection.html</anchorfile>
      <anchor>a998b7008254db8febe67cc2687ef281b</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classcTransientDetection.html</anchorfile>
      <anchor>a5ea081cd63666c0bf6794589c2badd76</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>stop</name>
      <anchorfile>classcTransientDetection.html</anchorfile>
      <anchor>a4a7e75b50d22da5182a341acca4c84b9</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>start</name>
      <anchorfile>classcTransientDetection.html</anchorfile>
      <anchor>aa2337bbd289831acb83590030dd3219a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPostDetectFunction</name>
      <anchorfile>classcTransientDetection.html</anchorfile>
      <anchor>a9c2a78672e559c7436826493326fb567</anchor>
      <arglist>(PostTDFunc f, void *p)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setHostObject</name>
      <anchorfile>classcTransientDetection.html</anchorfile>
      <anchor>a2126b3a802fa373cab8d81313576d591</anchor>
      <arglist>(cStatistic *ptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cStatistic *</type>
      <name>getHostObject</name>
      <anchorfile>classcTransientDetection.html</anchorfile>
      <anchor>af884370a03bb6ca62b0dd2f3dd8acb92</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cVarHistogram</name>
    <filename>classcVarHistogram.html</filename>
    <base>cHistogramBase</base>
    <member kind="function">
      <type></type>
      <name>cVarHistogram</name>
      <anchorfile>classcVarHistogram.html</anchorfile>
      <anchor>ae03257448f4154279ce9124413135826</anchor>
      <arglist>(const cVarHistogram &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cVarHistogram</name>
      <anchorfile>classcVarHistogram.html</anchorfile>
      <anchor>a6c05be75271d551279d283a41f9b8eea</anchor>
      <arglist>(const char *name=NULL, int numcells=11, int transformtype=HIST_TR_AUTO_EPC_DBL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cVarHistogram</name>
      <anchorfile>classcVarHistogram.html</anchorfile>
      <anchor>ae73abea192a9698d5c8504e546b28573</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cVarHistogram &amp;</type>
      <name>operator=</name>
      <anchorfile>classcVarHistogram.html</anchorfile>
      <anchor>a1ee1ff868db540c7f0c73a8844593e5d</anchor>
      <arglist>(const cVarHistogram &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cVarHistogram *</type>
      <name>dup</name>
      <anchorfile>classcVarHistogram.html</anchorfile>
      <anchor>aed8c240f90ef2144514907b9397614e9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classcVarHistogram.html</anchorfile>
      <anchor>ac1c5884fea06530513371d4393644c32</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classcVarHistogram.html</anchorfile>
      <anchor>ad5e9ecc395add66fd59bba4a8067a689</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clearResult</name>
      <anchorfile>classcVarHistogram.html</anchorfile>
      <anchor>a73ba0a64920b47bf9b8060af9252b69b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>transform</name>
      <anchorfile>classcVarHistogram.html</anchorfile>
      <anchor>a417ff6cbb791083a18ffd0b8e387362d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collectTransformed</name>
      <anchorfile>classcVarHistogram.html</anchorfile>
      <anchor>ac3e6085534ed5da99d6d6e1122e1083c</anchor>
      <arglist>(double val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>random</name>
      <anchorfile>classcVarHistogram.html</anchorfile>
      <anchor>a5a1abf46d8d087cf2357cac4c32ac963</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getPDF</name>
      <anchorfile>classcVarHistogram.html</anchorfile>
      <anchor>a9db4f1f544d9432d4f3f09bcd38a5c1a</anchor>
      <arglist>(double x) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getCDF</name>
      <anchorfile>classcVarHistogram.html</anchorfile>
      <anchor>adb83f1fbdfd2023eee2f28a9f8a03943</anchor>
      <arglist>(double x) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getBasepoint</name>
      <anchorfile>classcVarHistogram.html</anchorfile>
      <anchor>adbf78789be7bc18495d7e4a42e40824a</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getCellValue</name>
      <anchorfile>classcVarHistogram.html</anchorfile>
      <anchor>abbeff824744cb1549148f0146d3a939d</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>saveToFile</name>
      <anchorfile>classcVarHistogram.html</anchorfile>
      <anchor>aaee7d41009a609b13a4b829a39c1b30d</anchor>
      <arglist>(FILE *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>loadFromFile</name>
      <anchorfile>classcVarHistogram.html</anchorfile>
      <anchor>aa726ae998777abe0394e34b2c1ed0f9c</anchor>
      <arglist>(FILE *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addBinBound</name>
      <anchorfile>classcVarHistogram.html</anchorfile>
      <anchor>af3ef4a68db91e0b677c7d31f79d9d1ce</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>createEquiprobableCells</name>
      <anchorfile>classcVarHistogram.html</anchorfile>
      <anchor>a2ba6ad8b61c759b7b178a3473b2209a8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cVisitor</name>
    <filename>classcVisitor.html</filename>
    <class kind="class">cVisitor::EndTraversalException</class>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cVisitor</name>
      <anchorfile>classcVisitor.html</anchorfile>
      <anchor>a4dee38a895cdf805bc5f2d64cd791793</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>process</name>
      <anchorfile>classcVisitor.html</anchorfile>
      <anchor>a53f3fdaaacc8a823780dd34f24f57fa8</anchor>
      <arglist>(cObject *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>processChildrenOf</name>
      <anchorfile>classcVisitor.html</anchorfile>
      <anchor>aa73997abb2f68efb6b24911b40fcdda2</anchor>
      <arglist>(cObject *obj)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>visit</name>
      <anchorfile>classcVisitor.html</anchorfile>
      <anchor>acb24dffe98329aa11479419c644ccdb4</anchor>
      <arglist>(cObject *obj)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cVisitor::EndTraversalException</name>
    <filename>classcVisitor_1_1EndTraversalException.html</filename>
  </compound>
  <compound kind="class">
    <name>cWatch_bool</name>
    <filename>classcWatch__bool.html</filename>
    <base>cWatchBase</base>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classcWatch__bool.html</anchorfile>
      <anchor>ad96deb7bfd4d0dd74dc9caa794bbb46b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>supportsAssignment</name>
      <anchorfile>classcWatch__bool.html</anchorfile>
      <anchor>ab050ad51fa48d510b81468bd29a72c3e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcWatch__bool.html</anchorfile>
      <anchor>a2fb4e045f4069acbcf305937d40924df</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>assign</name>
      <anchorfile>classcWatch__bool.html</anchorfile>
      <anchor>ab454770715c4928e204159c0cfeea665</anchor>
      <arglist>(const char *s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cWatch_char</name>
    <filename>classcWatch__char.html</filename>
    <base>cWatchBase</base>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classcWatch__char.html</anchorfile>
      <anchor>af111294202a8117c57b960f4ddaa0bd0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>supportsAssignment</name>
      <anchorfile>classcWatch__char.html</anchorfile>
      <anchor>adad7bac551ff2b54d3879203bad156ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcWatch__char.html</anchorfile>
      <anchor>ab8e4d6c1f8fcbe82656963b9a0b7e0c1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>assign</name>
      <anchorfile>classcWatch__char.html</anchorfile>
      <anchor>a9f9ef7768e6407b2122543fec0cde75c</anchor>
      <arglist>(const char *s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cWatch_cObject</name>
    <filename>classcWatch__cObject.html</filename>
    <base>cWatchBase</base>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classcWatch__cObject.html</anchorfile>
      <anchor>a7970907a01116651174447fd79996ffb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcWatch__cObject.html</anchorfile>
      <anchor>af1f62229d05bc8ed07776e473be60045</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>supportsAssignment</name>
      <anchorfile>classcWatch__cObject.html</anchorfile>
      <anchor>a652da5cfd64a8f662218f38e231142a4</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cWatch_cObjectPtr</name>
    <filename>classcWatch__cObjectPtr.html</filename>
    <base>cWatchBase</base>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classcWatch__cObjectPtr.html</anchorfile>
      <anchor>a0916649464e4b5f1a323058d030ff60a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcWatch__cObjectPtr.html</anchorfile>
      <anchor>a31419301f2bc3158b732b406c139d1a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>supportsAssignment</name>
      <anchorfile>classcWatch__cObjectPtr.html</anchorfile>
      <anchor>a449b91d6772ebbbf0e04be107c794358</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cWatch_stdstring</name>
    <filename>classcWatch__stdstring.html</filename>
    <base>cWatchBase</base>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classcWatch__stdstring.html</anchorfile>
      <anchor>a9189f43e162467e538427c802202fecc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>supportsAssignment</name>
      <anchorfile>classcWatch__stdstring.html</anchorfile>
      <anchor>af25c123ae0bfe059a6b281cd972af655</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcWatch__stdstring.html</anchorfile>
      <anchor>a653ff0414e3d6846c54f80a8a76064ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>assign</name>
      <anchorfile>classcWatch__stdstring.html</anchorfile>
      <anchor>a958f5edd1e7ba42156f1de07cbcc8e36</anchor>
      <arglist>(const char *s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cWatch_uchar</name>
    <filename>classcWatch__uchar.html</filename>
    <base>cWatchBase</base>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classcWatch__uchar.html</anchorfile>
      <anchor>aceaa68ffceaf245291e00e0f3b592d75</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>supportsAssignment</name>
      <anchorfile>classcWatch__uchar.html</anchorfile>
      <anchor>aad33d2ecd2b4dbae8807558f444ff924</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcWatch__uchar.html</anchorfile>
      <anchor>ae4ecc9f4a4316b80942e9249b05876f9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>assign</name>
      <anchorfile>classcWatch__uchar.html</anchorfile>
      <anchor>a352b7b4311178453307a59c7a446a6a0</anchor>
      <arglist>(const char *s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cWatchBase</name>
    <filename>classcWatchBase.html</filename>
    <base>cNoncopyableOwnedObject</base>
    <member kind="function">
      <type></type>
      <name>cWatchBase</name>
      <anchorfile>classcWatchBase.html</anchorfile>
      <anchor>a1891451ef8355b0cdb19fe31537ab301</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>supportsAssignment</name>
      <anchorfile>classcWatchBase.html</anchorfile>
      <anchor>aba8b006675fc5d4872e37dd65c82ef94</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>assign</name>
      <anchorfile>classcWatchBase.html</anchorfile>
      <anchor>aaff3b84dd36e98fcd9fa0defb58c9f87</anchor>
      <arglist>(const char *s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cWeightedStdDev</name>
    <filename>classcWeightedStdDev.html</filename>
    <base>cStdDev</base>
    <member kind="function">
      <type></type>
      <name>cWeightedStdDev</name>
      <anchorfile>classcWeightedStdDev.html</anchorfile>
      <anchor>ac880787976195ff37cd810b0558293d0</anchor>
      <arglist>(const cWeightedStdDev &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cWeightedStdDev</name>
      <anchorfile>classcWeightedStdDev.html</anchorfile>
      <anchor>acb181765c15e22af8caaf2cdf75ed637</anchor>
      <arglist>(const char *name=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cWeightedStdDev</name>
      <anchorfile>classcWeightedStdDev.html</anchorfile>
      <anchor>a8c169a60fa3ac455e9fd5ce7c3250f81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cWeightedStdDev &amp;</type>
      <name>operator=</name>
      <anchorfile>classcWeightedStdDev.html</anchorfile>
      <anchor>a052caf694a6ed751aa1d4761ec6d5f3b</anchor>
      <arglist>(const cWeightedStdDev &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cWeightedStdDev *</type>
      <name>dup</name>
      <anchorfile>classcWeightedStdDev.html</anchorfile>
      <anchor>a4454c196bc0bd683f3fe30a3f78f5255</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcWeightedStdDev.html</anchorfile>
      <anchor>a3f6c7b739f7f47e53d0893bf080470bd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classcWeightedStdDev.html</anchorfile>
      <anchor>aecb391238382d5739d1c6f9ccd130d10</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classcWeightedStdDev.html</anchorfile>
      <anchor>a0b73ffcca7e249cfabc621452883d5bf</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collect</name>
      <anchorfile>classcWeightedStdDev.html</anchorfile>
      <anchor>aaf7a699620541027abbbd458ddade2ae</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collect</name>
      <anchorfile>classcWeightedStdDev.html</anchorfile>
      <anchor>aeae71c96cecc89a2d00f680e787eec4b</anchor>
      <arglist>(SimTime value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isWeighted</name>
      <anchorfile>classcWeightedStdDev.html</anchorfile>
      <anchor>a87ab15369366d47e827075a3266beb83</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collect2</name>
      <anchorfile>classcWeightedStdDev.html</anchorfile>
      <anchor>a039b4a047d7c94c9e8fcce1703cafda6</anchor>
      <arglist>(double value, double weight)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collect2</name>
      <anchorfile>classcWeightedStdDev.html</anchorfile>
      <anchor>a1540426e2b06cf04c30863c7da303a38</anchor>
      <arglist>(SimTime value, double weight)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collect2</name>
      <anchorfile>classcWeightedStdDev.html</anchorfile>
      <anchor>a55f2ce23a45556d316ea664705188356</anchor>
      <arglist>(double value, SimTime weight)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collect2</name>
      <anchorfile>classcWeightedStdDev.html</anchorfile>
      <anchor>ac573345e65c2098b1cc1376665a5f6f0</anchor>
      <arglist>(SimTime value, SimTime weight)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>merge</name>
      <anchorfile>classcWeightedStdDev.html</anchorfile>
      <anchor>ab1e6da65f020c7d85fb6c367afda6673</anchor>
      <arglist>(const cStatistic *other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clearResult</name>
      <anchorfile>classcWeightedStdDev.html</anchorfile>
      <anchor>ae2330ba2b3ff6c5782efb09f0814821c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMean</name>
      <anchorfile>classcWeightedStdDev.html</anchorfile>
      <anchor>a2e5094d15c158ed1d2d8ac432638a81b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getVariance</name>
      <anchorfile>classcWeightedStdDev.html</anchorfile>
      <anchor>a1326075c85bac13e6c973363c523f002</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getWeights</name>
      <anchorfile>classcWeightedStdDev.html</anchorfile>
      <anchor>ae50260f15610121025266bf023935a53</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getWeightedSum</name>
      <anchorfile>classcWeightedStdDev.html</anchorfile>
      <anchor>a2e8cf58c052141f754f251ede0594ef8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getSqrSumWeights</name>
      <anchorfile>classcWeightedStdDev.html</anchorfile>
      <anchor>af0d73ec54e66a23e99e2d81fc7ed3391</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getWeightedSqrSum</name>
      <anchorfile>classcWeightedStdDev.html</anchorfile>
      <anchor>a8fccffe48981af1d6dbbc0ca064d5da5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>saveToFile</name>
      <anchorfile>classcWeightedStdDev.html</anchorfile>
      <anchor>a53e2204f1c3f765692fe9b757666ee8e</anchor>
      <arglist>(FILE *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>loadFromFile</name>
      <anchorfile>classcWeightedStdDev.html</anchorfile>
      <anchor>a5f74795738987e2bdb12d8678558d130</anchor>
      <arglist>(FILE *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cXMLElement</name>
    <filename>classcXMLElement.html</filename>
    <class kind="class">cXMLElement::ParamResolver</class>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classcXMLElement.html</anchorfile>
      <anchor>ab31f59487abe87dc265bf1b4393db722</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getSourceLocation</name>
      <anchorfile>classcXMLElement.html</anchorfile>
      <anchor>a217fb5ebdbfd2d8384a9c7ef5e75be76</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getNodeValue</name>
      <anchorfile>classcXMLElement.html</anchorfile>
      <anchor>a400e61ce035da6db65695bf3c3564e09</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classcXMLElement.html</anchorfile>
      <anchor>a3ad740721da561cb7dab07cbd96d6e8b</anchor>
      <arglist>(const char *attr) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasAttributes</name>
      <anchorfile>classcXMLElement.html</anchorfile>
      <anchor>ab6df920921539a5ecb54888b3d49b6f9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const cXMLAttributeMap &amp;</type>
      <name>getAttributes</name>
      <anchorfile>classcXMLElement.html</anchorfile>
      <anchor>af629e2b3be3db7cd9a8f9c4ee506dc6f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>getParentNode</name>
      <anchorfile>classcXMLElement.html</anchorfile>
      <anchor>a4857a23b65658917fb5242f3431f608e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasChildren</name>
      <anchorfile>classcXMLElement.html</anchorfile>
      <anchor>a9c5f1dcc9cf4630d48af6498fd238255</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>getFirstChild</name>
      <anchorfile>classcXMLElement.html</anchorfile>
      <anchor>a68ceb3e31024a045ec24aa88c1284672</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>getLastChild</name>
      <anchorfile>classcXMLElement.html</anchorfile>
      <anchor>a5adbe2320255672a363bf044632da8f6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>getNextSibling</name>
      <anchorfile>classcXMLElement.html</anchorfile>
      <anchor>af91880587d491e5010de574dd69f6fd2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>getPreviousSibling</name>
      <anchorfile>classcXMLElement.html</anchorfile>
      <anchor>a966855138e47374343d018202278ec7d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>getFirstChildWithTag</name>
      <anchorfile>classcXMLElement.html</anchorfile>
      <anchor>a7d0dd840b917adb96a0d609a7253d5c8</anchor>
      <arglist>(const char *tagname) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>getNextSiblingWithTag</name>
      <anchorfile>classcXMLElement.html</anchorfile>
      <anchor>a463ab9af802e9f73d7d99fa90513a5dd</anchor>
      <arglist>(const char *tagname) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElementList</type>
      <name>getChildren</name>
      <anchorfile>classcXMLElement.html</anchorfile>
      <anchor>a4269fc8a225acf95bc86406a6160e2d9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElementList</type>
      <name>getChildrenByTagName</name>
      <anchorfile>classcXMLElement.html</anchorfile>
      <anchor>a9491b5c135bcef38916e7dd2a2dce207</anchor>
      <arglist>(const char *tagname) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElementList</type>
      <name>getElementsByTagName</name>
      <anchorfile>classcXMLElement.html</anchorfile>
      <anchor>ac497a6b66b7f49c6741ad4e5368b28ec</anchor>
      <arglist>(const char *tagname) const </arglist>
    </member>
    <member kind="function">
      <type>cXMLElement *</type>
      <name>getFirstChildWithAttribute</name>
      <anchorfile>classcXMLElement.html</anchorfile>
      <anchor>a514c5ee1ad0413512590bbedf82e2407</anchor>
      <arglist>(const char *tagname, const char *attr, const char *attrvalue=NULL) const </arglist>
    </member>
    <member kind="function">
      <type>cXMLElement *</type>
      <name>getElementById</name>
      <anchorfile>classcXMLElement.html</anchorfile>
      <anchor>a8c9579eb2b55718f3d565c1916b3372e</anchor>
      <arglist>(const char *idattrvalue) const </arglist>
    </member>
    <member kind="function">
      <type>cXMLElement *</type>
      <name>getElementByPath</name>
      <anchorfile>classcXMLElement.html</anchorfile>
      <anchor>a090da9780482335d7bf1a098310611a7</anchor>
      <arglist>(const char *pathexpression, cXMLElement *root=NULL, ParamResolver *resolver=NULL) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>debugDump</name>
      <anchorfile>classcXMLElement.html</anchorfile>
      <anchor>a8e9623552af52b00ea0a18b8232c8488</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>detailedInfo</name>
      <anchorfile>classcXMLElement.html</anchorfile>
      <anchor>a165e31a04a52931178ba3b6ae2b185ae</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cXMLElement::ParamResolver</name>
    <filename>classcXMLElement_1_1ParamResolver.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>resolve</name>
      <anchorfile>classcXMLElement_1_1ParamResolver.html</anchorfile>
      <anchor>a924af4bd77addefa9ea48e0c5fac594f</anchor>
      <arglist>(const char *paramname, std::string &amp;value)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cXMLParImpl</name>
    <filename>classcXMLParImpl.html</filename>
    <base>cParImpl</base>
    <member kind="function">
      <type></type>
      <name>cXMLParImpl</name>
      <anchorfile>classcXMLParImpl.html</anchorfile>
      <anchor>a64fdc669eb5f578ef28b728a4bc2c4f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cXMLParImpl</name>
      <anchorfile>classcXMLParImpl.html</anchorfile>
      <anchor>a3c55727a626c5d908d4e830a36ed90ea</anchor>
      <arglist>(const cXMLParImpl &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cXMLParImpl</name>
      <anchorfile>classcXMLParImpl.html</anchorfile>
      <anchor>a8168e39c52aa54d9611ef3ecfe75b760</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classcXMLParImpl.html</anchorfile>
      <anchor>abcf0faa2ae72ad5f319ae21b1441c880</anchor>
      <arglist>(const cXMLParImpl &amp;otherpar)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLParImpl *</type>
      <name>dup</name>
      <anchorfile>classcXMLParImpl.html</anchorfile>
      <anchor>adee2626461d43bb0ac5c9fc1a615c349</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>detailedInfo</name>
      <anchorfile>classcXMLParImpl.html</anchorfile>
      <anchor>adfd6b4646ae1a3ebe9e167c35815f405</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classcXMLParImpl.html</anchorfile>
      <anchor>ab2bba82152b94a5720c2e4d0a605d855</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classcXMLParImpl.html</anchorfile>
      <anchor>a5699e266f1848b4e99e358a37425259b</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBoolValue</name>
      <anchorfile>classcXMLParImpl.html</anchorfile>
      <anchor>a2ec3f39a0e9c53e66113eee2ec2c1d60</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLongValue</name>
      <anchorfile>classcXMLParImpl.html</anchorfile>
      <anchor>a4b9ac8bbeeecd9d4c35520422bd96c20</anchor>
      <arglist>(long l)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDoubleValue</name>
      <anchorfile>classcXMLParImpl.html</anchorfile>
      <anchor>ad028c16a0a248d2a17cef5d53dcc8deb</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStringValue</name>
      <anchorfile>classcXMLParImpl.html</anchorfile>
      <anchor>afd3a53fa5d8bd013a87c69f155f0aa6a</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setXMLValue</name>
      <anchorfile>classcXMLParImpl.html</anchorfile>
      <anchor>a0a2486875ab896d474f028b853f283f8</anchor>
      <arglist>(cXMLElement *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setExpression</name>
      <anchorfile>classcXMLParImpl.html</anchorfile>
      <anchor>aad1db81576cf1bc9016b2f822883da4e</anchor>
      <arglist>(cExpression *e)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>boolValue</name>
      <anchorfile>classcXMLParImpl.html</anchorfile>
      <anchor>a4450668060139ebfa5e80290d059e3ec</anchor>
      <arglist>(cComponent *context) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>longValue</name>
      <anchorfile>classcXMLParImpl.html</anchorfile>
      <anchor>a2e916d1d5dd0c9bd5025f342711da412</anchor>
      <arglist>(cComponent *context) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>doubleValue</name>
      <anchorfile>classcXMLParImpl.html</anchorfile>
      <anchor>ab9e743b3d25184a31c39a720dc6e3b5c</anchor>
      <arglist>(cComponent *context) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>stringValue</name>
      <anchorfile>classcXMLParImpl.html</anchorfile>
      <anchor>a45a4cd39ee511bf81115af16feed58d2</anchor>
      <arglist>(cComponent *context) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>stdstringValue</name>
      <anchorfile>classcXMLParImpl.html</anchorfile>
      <anchor>ad3a433eaa8133b52c097f4a1d8357ee4</anchor>
      <arglist>(cComponent *context) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>xmlValue</name>
      <anchorfile>classcXMLParImpl.html</anchorfile>
      <anchor>a3344daf3dc0bced252adb631ee4bf3aa</anchor>
      <arglist>(cComponent *context) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cExpression *</type>
      <name>getExpression</name>
      <anchorfile>classcXMLParImpl.html</anchorfile>
      <anchor>abe119317dde8859366fbc6ac2544bf7c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Type</type>
      <name>getType</name>
      <anchorfile>classcXMLParImpl.html</anchorfile>
      <anchor>ab2babd8db054b0b5355d13f372c35b40</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isNumeric</name>
      <anchorfile>classcXMLParImpl.html</anchorfile>
      <anchor>afc0d97a5aeea0eea635e87eeefae80f7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>convertToConst</name>
      <anchorfile>classcXMLParImpl.html</anchorfile>
      <anchor>a49e55ca83e3f50f29dc43e63f9dd376b</anchor>
      <arglist>(cComponent *context)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classcXMLParImpl.html</anchorfile>
      <anchor>a5cddad69a4a7c6fdaa731ef79a25a844</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classcXMLParImpl.html</anchorfile>
      <anchor>a7940ca68f331cf7f978e08793b6c0d6a</anchor>
      <arglist>(const char *text)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compare</name>
      <anchorfile>classcXMLParImpl.html</anchorfile>
      <anchor>a38e0ce6e7d554a7d9a8834f8716ba8d8</anchor>
      <arglist>(const cParImpl *other) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ModNameParamResolver</name>
    <filename>classModNameParamResolver.html</filename>
    <base>cXMLElement::ParamResolver</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>resolve</name>
      <anchorfile>classModNameParamResolver.html</anchorfile>
      <anchor>ab36e4d81f521b3a5aa4f64417b2418fc</anchor>
      <arglist>(const char *paramname, std::string &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>noncopyable</name>
    <filename>classnoncopyable.html</filename>
  </compound>
  <compound kind="class">
    <name>opp_string</name>
    <filename>classopp__string.html</filename>
    <member kind="function">
      <type></type>
      <name>opp_string</name>
      <anchorfile>classopp__string.html</anchorfile>
      <anchor>ae3f7634d2e82806eff522981c0ec9733</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>opp_string</name>
      <anchorfile>classopp__string.html</anchorfile>
      <anchor>a1463fa2c576b27b32dfecfc97e674923</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>opp_string</name>
      <anchorfile>classopp__string.html</anchorfile>
      <anchor>af4b981a019bd5173cb304f238ff437a4</anchor>
      <arglist>(const char *s, int n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>opp_string</name>
      <anchorfile>classopp__string.html</anchorfile>
      <anchor>a3f79a838ee26847c11118264c5a8f16c</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>opp_string</name>
      <anchorfile>classopp__string.html</anchorfile>
      <anchor>aa78ea93f10e2e800cff3e3ef5b66e426</anchor>
      <arglist>(const opp_string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~opp_string</name>
      <anchorfile>classopp__string.html</anchorfile>
      <anchor>aef59858c19f1ed70ed6d2f80e417c1f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>c_str</name>
      <anchorfile>classopp__string.html</anchorfile>
      <anchor>aa66a083b034ac9a5bb3e8f5eed8461b5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classopp__string.html</anchorfile>
      <anchor>a80750ed79bd25f8a8ef620b044568f2e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>buffer</name>
      <anchorfile>classopp__string.html</anchorfile>
      <anchor>a89166d50fffc29d2eb89f5f20d084f07</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>reserve</name>
      <anchorfile>classopp__string.html</anchorfile>
      <anchor>a002643451a05d407f4112f6e87ae1f43</anchor>
      <arglist>(unsigned size)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>operator=</name>
      <anchorfile>classopp__string.html</anchorfile>
      <anchor>a241df9cd2daf254a2bb940d744fec9f2</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>opp_string &amp;</type>
      <name>operator=</name>
      <anchorfile>classopp__string.html</anchorfile>
      <anchor>ad201a8b19d4b0179408bb3a6f7aa0deb</anchor>
      <arglist>(const opp_string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>opp_string &amp;</type>
      <name>operator=</name>
      <anchorfile>classopp__string.html</anchorfile>
      <anchor>aba716135786cc63fd3c3f70c1bd5e75e</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classopp__string.html</anchorfile>
      <anchor>aa2a19711f60a47cb8aedf92f3e903751</anchor>
      <arglist>(const opp_string &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>opp_string &amp;</type>
      <name>operator+=</name>
      <anchorfile>classopp__string.html</anchorfile>
      <anchor>a49723cfa2bf9e17439df3936420c49cf</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>opp_string &amp;</type>
      <name>operator+=</name>
      <anchorfile>classopp__string.html</anchorfile>
      <anchor>aefc610d6f9166da9aaa29d9a4853b36a</anchor>
      <arglist>(const opp_string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>opp_string &amp;</type>
      <name>operator+=</name>
      <anchorfile>classopp__string.html</anchorfile>
      <anchor>a76ac328a1f91e12b9ff29d2ad57cd199</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>opp_string</type>
      <name>operator+</name>
      <anchorfile>classopp__string.html</anchorfile>
      <anchor>a13fa47e7f07aef8d809d318f37ff37ba</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>opp_string</type>
      <name>operator+</name>
      <anchorfile>classopp__string.html</anchorfile>
      <anchor>a2d5427db0ecaea50753b7dbf705fda75</anchor>
      <arglist>(const opp_string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>opp_string</type>
      <name>operator+</name>
      <anchorfile>classopp__string.html</anchorfile>
      <anchor>a1c4bf066b2071ca5cbeb17b84a2a39d4</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>opp_string_map</name>
    <filename>classopp__string__map.html</filename>
  </compound>
  <compound kind="class">
    <name>opp_string_vector</name>
    <filename>classopp__string__vector.html</filename>
  </compound>
  <compound kind="class">
    <name>SimTime</name>
    <filename>classSimTime.html</filename>
    <member kind="function">
      <type>double</type>
      <name>dbl</name>
      <anchorfile>classSimTime.html</anchorfile>
      <anchor>abd20d87e1b1f27c118e91615163fe428</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>inUnit</name>
      <anchorfile>classSimTime.html</anchorfile>
      <anchor>ac46588adff41b2d59fcc074b8148e29d</anchor>
      <arglist>(int exponent) const </arglist>
    </member>
    <member kind="function">
      <type>SimTime</type>
      <name>trunc</name>
      <anchorfile>classSimTime.html</anchorfile>
      <anchor>aa3f333fa230ae7a83f82c3fda45ea85d</anchor>
      <arglist>(int exponent) const </arglist>
    </member>
    <member kind="function">
      <type>SimTime</type>
      <name>remainderForUnit</name>
      <anchorfile>classSimTime.html</anchorfile>
      <anchor>a28b06da9c4ec79d93aa3ca60569f5380</anchor>
      <arglist>(int exponent) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>split</name>
      <anchorfile>classSimTime.html</anchorfile>
      <anchor>a7613fd03eb385a1f8c0f30331582d4c1</anchor>
      <arglist>(int exponent, int64 &amp;outValue, SimTime &amp;outRemainder) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>str</name>
      <anchorfile>classSimTime.html</anchorfile>
      <anchor>a97cecbb52a8e12e67d94081b5742f14a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>str</name>
      <anchorfile>classSimTime.html</anchorfile>
      <anchor>a41eb87c74a1f34337f62bdd2fcc42940</anchor>
      <arglist>(char *buf) const </arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>raw</name>
      <anchorfile>classSimTime.html</anchorfile>
      <anchor>ac2b56d0e2f409544a9a9c80a598241ce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const SimTime &amp;</type>
      <name>setRaw</name>
      <anchorfile>classSimTime.html</anchorfile>
      <anchor>ad5d257f0bef1edd72b75cef0c6421252</anchor>
      <arglist>(int64 l)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTime</name>
      <anchorfile>classSimTime.html</anchorfile>
      <anchor>aad8d1396857e60887b0b890fd126ed8d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTime</name>
      <anchorfile>classSimTime.html</anchorfile>
      <anchor>ab0b9c6766ba74041817a696da11720c9</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTime</name>
      <anchorfile>classSimTime.html</anchorfile>
      <anchor>a28c7b92e7d1bf1278026cedaea38b38c</anchor>
      <arglist>(cPar &amp;d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTime</name>
      <anchorfile>classSimTime.html</anchorfile>
      <anchor>a8a39d63a39f399bb5604a71264ec9def</anchor>
      <arglist>(int64 significand, int exponent)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTime</name>
      <anchorfile>classSimTime.html</anchorfile>
      <anchor>ac6a40d4cf384440342559085b7c25e21</anchor>
      <arglist>(const SimTime &amp;x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SimTime</type>
      <name>getMaxTime</name>
      <anchorfile>classSimTime.html</anchorfile>
      <anchor>afbad339d1fd2bc190e0c4d9859982ae2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int64</type>
      <name>getScale</name>
      <anchorfile>classSimTime.html</anchorfile>
      <anchor>acca31d0c4fc6bcf08d8131ee3bafc18e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getScaleExp</name>
      <anchorfile>classSimTime.html</anchorfile>
      <anchor>a9d8ed6b092f3b31e97a87532aea9bbe2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setScaleExp</name>
      <anchorfile>classSimTime.html</anchorfile>
      <anchor>a803d09ccc1ab49aae1a1ec630b74ba13</anchor>
      <arglist>(int e)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SimTime</type>
      <name>parse</name>
      <anchorfile>classSimTime.html</anchorfile>
      <anchor>a5439f7c74cae85ef52f811731e1ea776</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SimTime</type>
      <name>parse</name>
      <anchorfile>classSimTime.html</anchorfile>
      <anchor>a44fbbb17db2ca1cb907f0e36d8cdafdc</anchor>
      <arglist>(const char *s, const char *&amp;endp)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static char *</type>
      <name>ttoa</name>
      <anchorfile>classSimTime.html</anchorfile>
      <anchor>a77a56bbf689bb4f6888e23a493e56928</anchor>
      <arglist>(char *buf, int64 t, int scaleexp, char *&amp;endp)</arglist>
    </member>
    <member kind="function">
      <type>const SimTime &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTime.html</anchorfile>
      <anchor>a84b56287739f04f0e98759a3cd390646</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>const SimTime &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTime.html</anchorfile>
      <anchor>a03135ecf073a7820e3dd7d05f180d425</anchor>
      <arglist>(const cPar &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>const SimTime &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTime.html</anchorfile>
      <anchor>a3d7bf97c0908f7b0b39fdea5c7937efa</anchor>
      <arglist>(const SimTime &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const SimTime &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTime.html</anchorfile>
      <anchor>ac31b3cd1526f8c478851c700ab69e4c8</anchor>
      <arglist>(T d)</arglist>
    </member>
    <member kind="function">
      <type>const SimTime &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSimTime.html</anchorfile>
      <anchor>a98a15caa4ca64d162fa1bc053771170c</anchor>
      <arglist>(const SimTime &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const SimTime &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSimTime.html</anchorfile>
      <anchor>a7554b409e797df8b24b8b8e1daa80f8b</anchor>
      <arglist>(const SimTime &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const SimTime &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSimTime.html</anchorfile>
      <anchor>ab9baeca8e629c9d06e0e0ecd8613f11b</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>const SimTime &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSimTime.html</anchorfile>
      <anchor>a62d6af49dc779b62bd93b41f3b301c7f</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>const SimTime &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSimTime.html</anchorfile>
      <anchor>abb87fa70bd67744b6f1e7b5abcaca52d</anchor>
      <arglist>(const cPar &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>const SimTime &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSimTime.html</anchorfile>
      <anchor>a787cbd1e24869481fbfce4d6c77ab305</anchor>
      <arglist>(const cPar &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>const SimTime &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSimTime.html</anchorfile>
      <anchor>a5a78f897e31b47bb795f0d39ffb475a1</anchor>
      <arglist>(T d)</arglist>
    </member>
    <member kind="function">
      <type>const SimTime &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSimTime.html</anchorfile>
      <anchor>af497f772c6f6068e23f7c969d4467d38</anchor>
      <arglist>(T d)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSimTime.html</anchorfile>
      <anchor>acce8ff1c450fe0fbcf6635b2d9ec3a99</anchor>
      <arglist>(const SimTime &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSimTime.html</anchorfile>
      <anchor>a20bc176bc55e0c1221b9ae439e46a940</anchor>
      <arglist>(const SimTime &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classSimTime.html</anchorfile>
      <anchor>abe0246b6af6ac984a44f0ddbafd489cb</anchor>
      <arglist>(const SimTime &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classSimTime.html</anchorfile>
      <anchor>ab74dd25d351e692a71b33c5e214372fb</anchor>
      <arglist>(const SimTime &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classSimTime.html</anchorfile>
      <anchor>af9ed1db03cea23096e1661e66fdc7ee9</anchor>
      <arglist>(const SimTime &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classSimTime.html</anchorfile>
      <anchor>a0d489a13c39be08faed794a8632ad5b7</anchor>
      <arglist>(const SimTime &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>SimTime</type>
      <name>operator-</name>
      <anchorfile>classSimTime.html</anchorfile>
      <anchor>ad571543cac0eee496b024d99df5fdd3c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="friend">
      <type>friend const SimTime</type>
      <name>operator+</name>
      <anchorfile>classSimTime.html</anchorfile>
      <anchor>ab5e2465666853e9c798dc0c32e2af957</anchor>
      <arglist>(const SimTime &amp;x, const SimTime &amp;y)</arglist>
    </member>
    <member kind="friend">
      <type>friend const SimTime</type>
      <name>operator-</name>
      <anchorfile>classSimTime.html</anchorfile>
      <anchor>ab34ece3f17212d539e0e791d3cace1b6</anchor>
      <arglist>(const SimTime &amp;x, const SimTime &amp;y)</arglist>
    </member>
    <member kind="friend">
      <type>friend const SimTime</type>
      <name>operator*</name>
      <anchorfile>classSimTime.html</anchorfile>
      <anchor>a0943df59f72d1ac78b26ab9bc85f7d38</anchor>
      <arglist>(const SimTime &amp;x, double d)</arglist>
    </member>
    <member kind="friend">
      <type>friend const SimTime</type>
      <name>operator*</name>
      <anchorfile>classSimTime.html</anchorfile>
      <anchor>a0d048183cfab138d1dc4f4f38e42811d</anchor>
      <arglist>(double d, const SimTime &amp;x)</arglist>
    </member>
    <member kind="friend">
      <type>friend const SimTime</type>
      <name>operator/</name>
      <anchorfile>classSimTime.html</anchorfile>
      <anchor>a4a472a284e915c61b903eb38779575dd</anchor>
      <arglist>(const SimTime &amp;x, double d)</arglist>
    </member>
    <member kind="friend">
      <type>friend double</type>
      <name>operator/</name>
      <anchorfile>classSimTime.html</anchorfile>
      <anchor>ad37e92a6b1771418df08053167959c56</anchor>
      <arglist>(double d, const SimTime &amp;x)</arglist>
    </member>
    <member kind="friend">
      <type>friend double</type>
      <name>operator/</name>
      <anchorfile>classSimTime.html</anchorfile>
      <anchor>a1c6c1978a2f380025ac8f606036d98f1</anchor>
      <arglist>(const SimTime &amp;x, const SimTime &amp;y)</arglist>
    </member>
    <member kind="friend">
      <type>friend const SimTime</type>
      <name>operator*</name>
      <anchorfile>classSimTime.html</anchorfile>
      <anchor>a247b8b906c198a28a72d7ebcd9632adf</anchor>
      <arglist>(const SimTime &amp;x, const cPar &amp;p)</arglist>
    </member>
    <member kind="friend">
      <type>friend const SimTime</type>
      <name>operator*</name>
      <anchorfile>classSimTime.html</anchorfile>
      <anchor>ab8184544a305d8e3dd952513c3122e76</anchor>
      <arglist>(const cPar &amp;p, const SimTime &amp;x)</arglist>
    </member>
    <member kind="friend">
      <type>friend const SimTime</type>
      <name>operator/</name>
      <anchorfile>classSimTime.html</anchorfile>
      <anchor>ac440836b0c7c02f02639718891979aa0</anchor>
      <arglist>(const SimTime &amp;x, const cPar &amp;p)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>stdcharpvector</name>
    <filename>classstdcharpvector.html</filename>
  </compound>
  <compound kind="class">
    <name>stdstring</name>
    <filename>classstdstring.html</filename>
  </compound>
  <compound kind="class">
    <name>stdstringvector</name>
    <filename>classstdstringvector.html</filename>
  </compound>
  <compound kind="class">
    <name>StringMapParamResolver</name>
    <filename>classStringMapParamResolver.html</filename>
    <base>cXMLElement::ParamResolver</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>resolve</name>
      <anchorfile>classStringMapParamResolver.html</anchorfile>
      <anchor>ac0e22351ac473c783e26bce16bdb5a22</anchor>
      <arglist>(const char *paramname, std::string &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NEDSupport::ParameterRef</name>
    <filename>classNEDSupport_1_1ParameterRef.html</filename>
    <base>cDynamicExpression::Functor</base>
    <member kind="function">
      <type>ParameterRef *</type>
      <name>dup</name>
      <anchorfile>classNEDSupport_1_1ParameterRef.html</anchorfile>
      <anchor>af5468a06ea558dc1cb6d217ef1777418</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getFullName</name>
      <anchorfile>classNEDSupport_1_1ParameterRef.html</anchorfile>
      <anchor>a8b02a295683a30b69a735b880f1b3551</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NEDSupport::SiblingModuleParameterRef</name>
    <filename>classNEDSupport_1_1SiblingModuleParameterRef.html</filename>
    <base>cDynamicExpression::Functor</base>
    <member kind="function">
      <type>SiblingModuleParameterRef *</type>
      <name>dup</name>
      <anchorfile>classNEDSupport_1_1SiblingModuleParameterRef.html</anchorfile>
      <anchor>a3a14875e0d1747a6e7fd4e63f0404565</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getFullName</name>
      <anchorfile>classNEDSupport_1_1SiblingModuleParameterRef.html</anchorfile>
      <anchor>a8f2ae5a0a447e2d212f9f885c5d1ad89</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NEDSupport::LoopVar</name>
    <filename>classNEDSupport_1_1LoopVar.html</filename>
    <base>cDynamicExpression::Functor</base>
    <member kind="function">
      <type>LoopVar *</type>
      <name>dup</name>
      <anchorfile>classNEDSupport_1_1LoopVar.html</anchorfile>
      <anchor>a5c561832eaad945c0a378de52e5cbcf5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getFullName</name>
      <anchorfile>classNEDSupport_1_1LoopVar.html</anchorfile>
      <anchor>a25cf69a98eb22d77c27851ce9a931467</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NEDSupport::Sizeof</name>
    <filename>classNEDSupport_1_1Sizeof.html</filename>
    <base>cDynamicExpression::Functor</base>
    <member kind="function">
      <type>Sizeof *</type>
      <name>dup</name>
      <anchorfile>classNEDSupport_1_1Sizeof.html</anchorfile>
      <anchor>a208d8760058c6c341dc230100016319d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getFullName</name>
      <anchorfile>classNEDSupport_1_1Sizeof.html</anchorfile>
      <anchor>a1fc4e68434ed28b585a395326d26bac2</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="dir">
    <name>/home/default/omnetpp/include/</name>
    <path>/home/default/omnetpp/include/</path>
    <filename>dir_c1f96c663b8c6b82e9251148af4abcd0.html</filename>
    <file>carray.h</file>
    <file>cboolparimpl.h</file>
    <file>ccanvas.h</file>
    <file>cchannel.h</file>
    <file>cclassdescriptor.h</file>
    <file>ccommbuffer.h</file>
    <file>ccomponent.h</file>
    <file>ccomponenttype.h</file>
    <file>cconfigoption.h</file>
    <file>cconfigreader.h</file>
    <file>cconfiguration.h</file>
    <file>ccoroutine.h</file>
    <file>cdataratechannel.h</file>
    <file>cdefaultlist.h</file>
    <file>cdelaychannel.h</file>
    <file>cdensityestbase.h</file>
    <file>cdetect.h</file>
    <file>cdisplaystring.h</file>
    <file>cdoubleparimpl.h</file>
    <file>cdynamicexpression.h</file>
    <file>cenum.h</file>
    <file>cenvir.h</file>
    <file>cexception.h</file>
    <file>cexpression.h</file>
    <file>cfsm.h</file>
    <file>cgate.h</file>
    <file>chasher.h</file>
    <file>chistogram.h</file>
    <file>cksplit.h</file>
    <file>clcg32.h</file>
    <file>clinkedlist.h</file>
    <file>clistener.h</file>
    <file>clongparimpl.h</file>
    <file>cmatchexpression.h</file>
    <file>cmersennetwister.h</file>
    <file>cmessage.h</file>
    <file>cmessageheap.h</file>
    <file>cmessageprinter.h</file>
    <file>cmodelchange.h</file>
    <file>cmodule.h</file>
    <file>cmsgpar.h</file>
    <file>cnamedobject.h</file>
    <file>cnedfunction.h</file>
    <file>cnedmathfunction.h</file>
    <file>cnedvalue.h</file>
    <file>cnullenvir.h</file>
    <file>cobject.h</file>
    <file>cobjectfactory.h</file>
    <file>compat.h</file>
    <file>coutvector.h</file>
    <file>cownedobject.h</file>
    <file>cpacketqueue.h</file>
    <file>cpar.h</file>
    <file>cparimpl.h</file>
    <file>cparsimcomm.h</file>
    <file>cpatternmatcher.h</file>
    <file>cproperties.h</file>
    <file>cproperty.h</file>
    <file>cpsquare.h</file>
    <file>cqueue.h</file>
    <file>cregistrationlist.h</file>
    <file>cresultfilter.h</file>
    <file>cresultlistener.h</file>
    <file>cresultrecorder.h</file>
    <file>crng.h</file>
    <file>cscheduler.h</file>
    <file>csimplemodule.h</file>
    <file>csimulation.h</file>
    <file>cstatistic.h</file>
    <file>cstddev.h</file>
    <file>cstlwatch.h</file>
    <file>cstringparimpl.h</file>
    <file>cstringpool.h</file>
    <file>cstringtokenizer.h</file>
    <file>ctimestampedvalue.h</file>
    <file>ctopology.h</file>
    <file>cvarhist.h</file>
    <file>cvisitor.h</file>
    <file>cwatch.h</file>
    <file>cxmlelement.h</file>
    <file>cxmlparimpl.h</file>
    <file>distrib.h</file>
    <file>envirext.h</file>
    <file>errmsg.h</file>
    <file>globals.h</file>
    <file>index.h</file>
    <file>mersennetwister.h</file>
    <file>nedsupport.h</file>
    <file>omnetpp.h</file>
    <file>onstartup.h</file>
    <file>opp_string.h</file>
    <file>packing.h</file>
    <file>random.h</file>
    <file>regmacros.h</file>
    <file>simkerneldefs.h</file>
    <file>simtime.h</file>
    <file>simtime_t.h</file>
    <file>simutil.h</file>
    <file>stlwrap.h</file>
  </compound>
</tagfile>
