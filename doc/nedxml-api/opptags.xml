<?xml version='1.0' encoding='ISO-8859-1' standalone='yes' ?>
<tagfile>
  <compound kind="page">
    <name>main</name>
    <title>OMNeT++ NEDXML API Reference</title>
    <filename>main</filename>
  </compound>
  <compound kind="file">
    <name>index.h</name>
    <path>/home/default/omnetpp/src/nedxml/</path>
    <filename>index_8h</filename>
  </compound>
  <compound kind="file">
    <name>msgcppgenerator.h</name>
    <path>/home/default/omnetpp/src/nedxml/</path>
    <filename>msgcppgenerator_8h</filename>
    <includes id="msgcppgenerator_8h" name="msgcppgenerator.h" local="yes" imported="no">nedelements.h</includes>
    <includes id="nedxmldefs_8h" name="nedxmldefs.h" local="yes" imported="no">nedxmldefs.h</includes>
    <class kind="struct">MsgCppGeneratorOptions</class>
    <class kind="class">MsgCppGenerator</class>
    <class kind="struct">MsgCppGenerator::TypeDesc</class>
    <class kind="class">MsgCppGenerator::ClassInfo</class>
    <class kind="class">MsgCppGenerator::ClassInfo::FieldInfo</class>
    <class kind="class">MsgCppGenerator::EnumInfo</class>
    <class kind="class">MsgCppGenerator::EnumInfo::EnumItem</class>
  </compound>
  <compound kind="file">
    <name>ned1generator.h</name>
    <path>/home/default/omnetpp/src/nedxml/</path>
    <filename>ned1generator_8h</filename>
    <includes id="nedelements_8h" name="nedelements.h" local="yes" imported="no">nedelements.h</includes>
    <includes id="nederror_8h" name="nederror.h" local="yes" imported="no">nederror.h</includes>
    <class kind="class">NED1Generator</class>
    <member kind="function">
      <type>NAMESPACE_BEGIN NEDXML_API void</type>
      <name>generateNED1</name>
      <anchorfile>group__NEDGenerator.html</anchorfile>
      <anchor>ga76a00dccd7b2d245ea917e5e1c7bf063</anchor>
      <arglist>(std::ostream &amp;out, NEDElement *node, NEDErrorStore *e)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ned2generator.h</name>
    <path>/home/default/omnetpp/src/nedxml/</path>
    <filename>ned2generator_8h</filename>
    <includes id="nedelements_8h" name="nedelements.h" local="yes" imported="no">nedelements.h</includes>
    <includes id="nederror_8h" name="nederror.h" local="yes" imported="no">nederror.h</includes>
    <class kind="class">NED2Generator</class>
    <member kind="function">
      <type>NAMESPACE_BEGIN NEDXML_API void</type>
      <name>generateNED2</name>
      <anchorfile>group__NEDGenerator.html</anchorfile>
      <anchor>ga2705d2eab28150a228777e82e54cdd6c</anchor>
      <arglist>(std::ostream &amp;out, NEDElement *node, NEDErrorStore *e)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>nedcrossvalidator.h</name>
    <path>/home/default/omnetpp/src/nedxml/</path>
    <filename>nedcrossvalidator_8h</filename>
    <includes id="nedcrossvalidator_8h" name="nedcrossvalidator.h" local="yes" imported="no">nedvalidator.h</includes>
    <includes id="nederror_8h" name="nederror.h" local="yes" imported="no">nederror.h</includes>
    <includes id="nedxmldefs_8h" name="nedxmldefs.h" local="yes" imported="no">nedxmldefs.h</includes>
    <includes id="nedelements_8h" name="nedelements.h" local="yes" imported="no">nedelements.h</includes>
    <class kind="class">NEDCrossValidator</class>
  </compound>
  <compound kind="file">
    <name>neddtdvalidator.h</name>
    <path>/home/default/omnetpp/src/nedxml/</path>
    <filename>neddtdvalidator_8h</filename>
    <includes id="nedelements_8h" name="nedelements.h" local="yes" imported="no">nedelements.h</includes>
    <includes id="neddtdvalidator_8h" name="neddtdvalidator.h" local="yes" imported="no">neddtdvalidatorbase.h</includes>
    <includes id="nedvalidator_8h" name="nedvalidator.h" local="yes" imported="no">nedvalidator.h</includes>
    <class kind="class">NEDDTDValidator</class>
  </compound>
  <compound kind="file">
    <name>neddtdvalidatorbase.h</name>
    <path>/home/default/omnetpp/src/nedxml/</path>
    <filename>neddtdvalidatorbase_8h</filename>
    <includes id="nedvalidator_8h" name="nedvalidator.h" local="yes" imported="no">nedvalidator.h</includes>
    <class kind="class">NEDDTDValidatorBase</class>
    <class kind="struct">NEDDTDValidatorBase::Choice</class>
  </compound>
  <compound kind="file">
    <name>nedelement.h</name>
    <path>/home/default/omnetpp/src/nedxml/</path>
    <filename>nedelement_8h</filename>
    <includes id="nedxmldefs_8h" name="nedxmldefs.h" local="yes" imported="no">nedxmldefs.h</includes>
    <class kind="class">NEDElementUserData</class>
    <class kind="struct">NEDSourceRegion</class>
    <class kind="class">NEDElement</class>
  </compound>
  <compound kind="file">
    <name>nedelements.h</name>
    <path>/home/default/omnetpp/src/nedxml/</path>
    <filename>nedelements_8h</filename>
    <includes id="nedelement_8h" name="nedelement.h" local="yes" imported="no">nedelement.h</includes>
    <class kind="class">FilesElement</class>
    <class kind="class">NedFileElement</class>
    <class kind="class">CommentElement</class>
    <class kind="class">PackageElement</class>
    <class kind="class">ImportElement</class>
    <class kind="class">PropertyDeclElement</class>
    <class kind="class">ExtendsElement</class>
    <class kind="class">InterfaceNameElement</class>
    <class kind="class">SimpleModuleElement</class>
    <class kind="class">ModuleInterfaceElement</class>
    <class kind="class">CompoundModuleElement</class>
    <class kind="class">ChannelInterfaceElement</class>
    <class kind="class">ChannelElement</class>
    <class kind="class">ParametersElement</class>
    <class kind="class">ParamElement</class>
    <class kind="class">PropertyElement</class>
    <class kind="class">PropertyKeyElement</class>
    <class kind="class">GatesElement</class>
    <class kind="class">GateElement</class>
    <class kind="class">TypesElement</class>
    <class kind="class">SubmodulesElement</class>
    <class kind="class">SubmoduleElement</class>
    <class kind="class">ConnectionsElement</class>
    <class kind="class">ConnectionElement</class>
    <class kind="class">ConnectionGroupElement</class>
    <class kind="class">LoopElement</class>
    <class kind="class">ConditionElement</class>
    <class kind="class">ExpressionElement</class>
    <class kind="class">OperatorElement</class>
    <class kind="class">FunctionElement</class>
    <class kind="class">IdentElement</class>
    <class kind="class">LiteralElement</class>
    <class kind="class">MsgFileElement</class>
    <class kind="class">NamespaceElement</class>
    <class kind="class">CplusplusElement</class>
    <class kind="class">StructDeclElement</class>
    <class kind="class">ClassDeclElement</class>
    <class kind="class">MessageDeclElement</class>
    <class kind="class">PacketDeclElement</class>
    <class kind="class">EnumDeclElement</class>
    <class kind="class">EnumElement</class>
    <class kind="class">EnumFieldsElement</class>
    <class kind="class">EnumFieldElement</class>
    <class kind="class">MessageElement</class>
    <class kind="class">PacketElement</class>
    <class kind="class">ClassElement</class>
    <class kind="class">StructElement</class>
    <class kind="class">FieldElement</class>
    <class kind="class">UnknownElement</class>
    <class kind="class">NEDElementFactory</class>
    <member kind="enumeration">
      <name>NEDElementCode</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>gad34cccc2e635c441d3d7721c4c15b68c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_NULL</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68cabe4646866ad678f9c06fbf48b783db6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_FILES</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68caf0f52ccf1b604c247dfd73bba385986e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_NED_FILE</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68ca47a8aaf0e028d7dc9ef6e84686599af8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_COMMENT</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68ca7828180a7f2a34640cadbe66a5d47627</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_PACKAGE</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68caa1665af429b2e65889485610c0c8f03f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_IMPORT</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68cac0d4ebcbad2ba024f9aa2a3459f44d08</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_PROPERTY_DECL</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68ca21d8117c33e31fdfd783e500853a95c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_EXTENDS</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68caacd830bed1d6264625102f079aeecd74</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_INTERFACE_NAME</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68ca8b478e073c3996bd6ce9abf5dd79362f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_SIMPLE_MODULE</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68ca24308b4324187beac81e6920d09d31fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_MODULE_INTERFACE</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68ca507c7aae391e1d68cb5d0e4796b5ff72</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_COMPOUND_MODULE</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68ca2f52963e4eb44e8aff5e3dd3707766cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_CHANNEL_INTERFACE</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68cac4af69096a9ba2c0138354b0aaaf8708</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_CHANNEL</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68caa5d202195e740e8da772a6e109f70d9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_PARAMETERS</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68caf9976d938ac9fc3a79ada698de026cd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_PARAM</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68cab54508e039787e6f0398f384430dc08f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_PROPERTY</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68ca366803979f7e863f328a2fc32d282e62</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_PROPERTY_KEY</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68ca3cf06ea94e252f4a2bd979abf980c48b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_GATES</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68ca28227565427af0c833a5bee75ef5d644</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_GATE</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68ca12bb7f956774de679e41dc75e4d540df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_TYPES</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68cad8caee31b25cf157b5c4172b6bbb2ed7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_SUBMODULES</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68ca15ca0c9a2e2b66624bb6775019c7324b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_SUBMODULE</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68ca737cb9551d7e0f206a95594b9b4e51ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_CONNECTIONS</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68ca91040a6621bfc3dd6d6a1d49251b97c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_CONNECTION</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68ca5a4b3bae4f85c56101b612c59d62a7f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_CONNECTION_GROUP</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68ca2cb06aa76da0aeabcb0d93f6063e4633</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_LOOP</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68ca80bfe03698c5c33da499c0e3b2e7681b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_CONDITION</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68caa4146926cf4f987508391391ddda2acc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_EXPRESSION</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68ca734f944e9aff83bbc91a0955b1897e14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_OPERATOR</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68caf527a555c91f595c4d8a87031e9a6576</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_FUNCTION</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68ca67c8ebfe2cdba16710b755fabd957b43</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_IDENT</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68ca7af94c708923ef46195eb3f40a09e03a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_LITERAL</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68cac5e0fa7b1aeec2c9c8e4db12d4a32404</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_MSG_FILE</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68caf6fc54e776c962a70d5ab05c4bcfd235</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_NAMESPACE</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68cae80473c92c631ca07aaffc356c185ffe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_CPLUSPLUS</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68ca580edeb93570c921dd22b3aefab4cd2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_STRUCT_DECL</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68cad70d3465bf52a059f19f75b77882008c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_CLASS_DECL</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68ca8b9f948df5d9953eda28c4b599225041</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_MESSAGE_DECL</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68ca02f84cd957697624b7c37400ba00dc6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_PACKET_DECL</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68cae9151e7150e9363c89623c54781febb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_ENUM_DECL</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68caabeb508e148820edf30d11819ac5df76</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_ENUM</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68ca2fe992d1dde8aeabc148e00701be03a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_ENUM_FIELDS</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68ca8e14996df6f58540dbd1627654aef3b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_ENUM_FIELD</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68ca50b0047b9bb5b428cc5cad20b99bc099</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_MESSAGE</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68ca66d2f84f9f6159edd967a14f7c27b4e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_PACKET</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68ca78f7289e11ee7d4ae6a3e8c3bf6fb554</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_CLASS</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68ca9e9eee707e30a18866aa3827671383ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_STRUCT</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68ca6671693f35af380e17da8157cb10f11e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_FIELD</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68caefe111337aad0cad283a278378f7f34a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_UNKNOWN</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68ca2dc1887831f5e3d5c57cd37acdccfda9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_GATETYPE_NONE</name>
      <anchorfile>nedelements_8h.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55baddc93c6d17fe5056f8a08f1c8b1c8ce1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_GATETYPE_INPUT</name>
      <anchorfile>nedelements_8h.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba3f29225c8c18a7e8f9612e9518e35a08</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_GATETYPE_OUTPUT</name>
      <anchorfile>nedelements_8h.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55bad98092bff8686d2464b6216df202f69f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_GATETYPE_INOUT</name>
      <anchorfile>nedelements_8h.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba78dda7dc6c9cab7eacc0b04de92273bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_PARTYPE_NONE</name>
      <anchorfile>nedelements_8h.html</anchorfile>
      <anchor>adf764cbdea00d65edcd07bb9953ad2b7a6c803a9657f3b88598155388718c45b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_PARTYPE_DOUBLE</name>
      <anchorfile>nedelements_8h.html</anchorfile>
      <anchor>adf764cbdea00d65edcd07bb9953ad2b7ad481bd89f4c26ee6215e5259e12c3ac4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_PARTYPE_INT</name>
      <anchorfile>nedelements_8h.html</anchorfile>
      <anchor>adf764cbdea00d65edcd07bb9953ad2b7a602f12db367b0c3879efeb8ede9aae77</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_PARTYPE_STRING</name>
      <anchorfile>nedelements_8h.html</anchorfile>
      <anchor>adf764cbdea00d65edcd07bb9953ad2b7abc2a3ef2d905dbb441a4fe52d95feb73</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_PARTYPE_BOOL</name>
      <anchorfile>nedelements_8h.html</anchorfile>
      <anchor>adf764cbdea00d65edcd07bb9953ad2b7a86271c25a5226dd65799813fb9ee2629</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_PARTYPE_XML</name>
      <anchorfile>nedelements_8h.html</anchorfile>
      <anchor>adf764cbdea00d65edcd07bb9953ad2b7a31b537139690df8fc663343025830602</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_CONST_DOUBLE</name>
      <anchorfile>nedelements_8h.html</anchorfile>
      <anchor>a99fb83031ce9923c84392b4e92f956b5a4c5c7abb8b0ae2bff596fead502481ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_CONST_QUANTITY</name>
      <anchorfile>nedelements_8h.html</anchorfile>
      <anchor>a99fb83031ce9923c84392b4e92f956b5a66de7ddaa292012f2e8dd277e59438a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_CONST_INT</name>
      <anchorfile>nedelements_8h.html</anchorfile>
      <anchor>a99fb83031ce9923c84392b4e92f956b5ad20b6bcc27f89550849690a374896c48</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_CONST_STRING</name>
      <anchorfile>nedelements_8h.html</anchorfile>
      <anchor>a99fb83031ce9923c84392b4e92f956b5a81770be78156b5091a33b36be0561642</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_CONST_BOOL</name>
      <anchorfile>nedelements_8h.html</anchorfile>
      <anchor>a99fb83031ce9923c84392b4e92f956b5a14618ce2c296116b27fe55ce16205471</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_CONST_SPEC</name>
      <anchorfile>nedelements_8h.html</anchorfile>
      <anchor>a99fb83031ce9923c84392b4e92f956b5a6818fe8b578886df4111aff4b4ffd1e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_SUBGATE_NONE</name>
      <anchorfile>nedelements_8h.html</anchorfile>
      <anchor>abc6126af1d45847bc59afa0aa3216b04a297f4f23a51b635f4ff5fb4575fd0c47</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_SUBGATE_I</name>
      <anchorfile>nedelements_8h.html</anchorfile>
      <anchor>abc6126af1d45847bc59afa0aa3216b04ac0fe700641987bf288bd1401094942c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_SUBGATE_O</name>
      <anchorfile>nedelements_8h.html</anchorfile>
      <anchor>abc6126af1d45847bc59afa0aa3216b04a9b5c0bac32933d8b94d11e10f088ef6e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>nederror.h</name>
    <path>/home/default/omnetpp/src/nedxml/</path>
    <filename>nederror_8h</filename>
    <includes id="nedxmldefs_8h" name="nedxmldefs.h" local="yes" imported="no">nedxmldefs.h</includes>
    <class kind="class">NEDErrorStore</class>
    <member kind="define">
      <type>#define</type>
      <name>INTERNAL_ERROR0</name>
      <anchorfile>nederror_8h.html</anchorfile>
      <anchor>a4c3d11a63e2590ad0e259dc59d5d2425</anchor>
      <arglist>(context, msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>INTERNAL_ERROR1</name>
      <anchorfile>nederror_8h.html</anchorfile>
      <anchor>afaa696dffa0e17a7033a09c5a2651b4e</anchor>
      <arglist>(context, msg, arg1)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>INTERNAL_ERROR2</name>
      <anchorfile>nederror_8h.html</anchorfile>
      <anchor>afef2247c7bfd9b9e60090107620d8c0c</anchor>
      <arglist>(context, msg, arg1, arg2)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>INTERNAL_ERROR3</name>
      <anchorfile>nederror_8h.html</anchorfile>
      <anchor>ada383a951cc9e537c2643a1431f7c2a5</anchor>
      <arglist>(context, msg, arg1, arg2, arg3)</arglist>
    </member>
    <member kind="enumeration">
      <name>NEDErrorSeverity</name>
      <anchorfile>nederror_8h.html</anchorfile>
      <anchor>af6464d0b1719609aa654b7360a7059c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_SEVERITY_INFO</name>
      <anchorfile>nederror_8h.html</anchorfile>
      <anchor>af6464d0b1719609aa654b7360a7059c2a3f3429cc5bd2ea8ce12263aef262e4c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_SEVERITY_WARNING</name>
      <anchorfile>nederror_8h.html</anchorfile>
      <anchor>af6464d0b1719609aa654b7360a7059c2a92ad38b5a0446297cb6369ee7bc8aa03</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_SEVERITY_ERROR</name>
      <anchorfile>nederror_8h.html</anchorfile>
      <anchor>af6464d0b1719609aa654b7360a7059c2ab052432f61d253ff06eae674eda8f765</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NEDInternalError</name>
      <anchorfile>nederror_8h.html</anchorfile>
      <anchor>aef9f45c0a6d44a75eb6670a4577fb972</anchor>
      <arglist>(const char *file, int line, NEDElement *context, const char *messagefmt,...)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>nedexception.h</name>
    <path>/home/default/omnetpp/src/nedxml/</path>
    <filename>nedexception_8h</filename>
    <includes id="nedxmldefs_8h" name="nedxmldefs.h" local="yes" imported="no">nedxmldefs.h</includes>
    <class kind="class">NEDException</class>
  </compound>
  <compound kind="file">
    <name>nedfilebuffer.h</name>
    <path>/home/default/omnetpp/src/nedxml/</path>
    <filename>nedfilebuffer_8h</filename>
    <includes id="nedfilebuffer_8h" name="nedfilebuffer.h" local="yes" imported="no">nedparser.h</includes>
    <includes id="nedelement_8h" name="nedelement.h" local="yes" imported="no">nedelement.h</includes>
    <includes id="nedxmldefs_8h" name="nedxmldefs.h" local="yes" imported="no">nedxmldefs.h</includes>
    <includes id="nederror_8h" name="nederror.h" local="yes" imported="no">nederror.h</includes>
    <class kind="class">NEDFileBuffer</class>
  </compound>
  <compound kind="file">
    <name>nedparser.h</name>
    <path>/home/default/omnetpp/src/nedxml/</path>
    <filename>nedparser_8h</filename>
    <includes id="nedelement_8h" name="nedelement.h" local="yes" imported="no">nedelement.h</includes>
    <includes id="nedyydefs_8h" name="nedyydefs.h" local="yes" imported="no">nedyydefs.h</includes>
    <includes id="nederror_8h" name="nederror.h" local="yes" imported="no">nederror.h</includes>
    <class kind="class">NEDParser</class>
    <member kind="define">
      <type>#define</type>
      <name>TYPE_NUMERIC</name>
      <anchorfile>nedparser_8h.html</anchorfile>
      <anchor>ab028b9896a89a6d6b252cbd5bbec71ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TYPE_CONST_NUM</name>
      <anchorfile>nedparser_8h.html</anchorfile>
      <anchor>a910ec460fe8b7b4c4ddfa576d4f6ff5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TYPE_STRING</name>
      <anchorfile>nedparser_8h.html</anchorfile>
      <anchor>a4e4e428e3a6a191834e3ff63bd301866</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TYPE_BOOL</name>
      <anchorfile>nedparser_8h.html</anchorfile>
      <anchor>a375775d23dbf60915db33f1add80c006</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TYPE_XML</name>
      <anchorfile>nedparser_8h.html</anchorfile>
      <anchor>a74a3c3ebe3681ab4e034a1319cfb3e62</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TYPE_ANYTYPE</name>
      <anchorfile>nedparser_8h.html</anchorfile>
      <anchor>ae8969deb5b9c71fa28bf843dad18abaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NEDParser *</type>
      <name>np</name>
      <anchorfile>nedparser_8h.html</anchorfile>
      <anchor>a497ba1b155bd1ff3551bccd03fa86cfb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>nedresourcecache.h</name>
    <path>/home/default/omnetpp/src/nedxml/</path>
    <filename>nedresourcecache_8h</filename>
    <includes id="nedelements_8h" name="nedelements.h" local="yes" imported="no">nedelements.h</includes>
    <includes id="nedresourcecache_8h" name="nedresourcecache.h" local="yes" imported="no">nedtypeinfo.h</includes>
    <class kind="struct">NEDLookupContext</class>
    <class kind="class">NEDResourceCache</class>
    <class kind="class">NEDResourceCache::INEDTypeNames</class>
    <class kind="class">NEDResourceCache::CachedTypeNames</class>
    <class kind="struct">NEDResourceCache::PendingNedType</class>
  </compound>
  <compound kind="file">
    <name>nedsaxhandler.h</name>
    <path>/home/default/omnetpp/src/nedxml/</path>
    <filename>nedsaxhandler_8h</filename>
    <includes id="nedelement_8h" name="nedelement.h" local="yes" imported="no">nedelement.h</includes>
    <includes id="nederror_8h" name="nederror.h" local="yes" imported="no">nederror.h</includes>
    <includes id="nedsaxhandler_8h" name="nedsaxhandler.h" local="yes" imported="no">saxparser.h</includes>
    <includes id="nedxmldefs_8h" name="nedxmldefs.h" local="yes" imported="no">nedxmldefs.h</includes>
    <class kind="class">NEDSAXHandler</class>
  </compound>
  <compound kind="file">
    <name>nedsyntaxvalidator.h</name>
    <path>/home/default/omnetpp/src/nedxml/</path>
    <filename>nedsyntaxvalidator_8h</filename>
    <includes id="nedvalidator_8h" name="nedvalidator.h" local="yes" imported="no">nedvalidator.h</includes>
    <class kind="class">NEDSyntaxValidator</class>
  </compound>
  <compound kind="file">
    <name>nedtools.h</name>
    <path>/home/default/omnetpp/src/nedxml/</path>
    <filename>nedtools_8h</filename>
    <includes id="nedelements_8h" name="nedelements.h" local="yes" imported="no">nedelements.h</includes>
    <class kind="class">NEDTools</class>
  </compound>
  <compound kind="file">
    <name>nedtypeinfo.h</name>
    <path>/home/default/omnetpp/src/nedxml/</path>
    <filename>nedtypeinfo_8h</filename>
    <includes id="nedelements_8h" name="nedelements.h" local="yes" imported="no">nedelements.h</includes>
    <class kind="class">NEDTypeInfo</class>
  </compound>
  <compound kind="file">
    <name>nedutil.h</name>
    <path>/home/default/omnetpp/src/nedxml/</path>
    <filename>nedutil_8h</filename>
    <includes id="nedelement_8h" name="nedelement.h" local="yes" imported="no">nedelement.h</includes>
    <class kind="class">DisplayStringUtil</class>
    <class kind="class">NEDElementUtil</class>
  </compound>
  <compound kind="file">
    <name>nedvalidator.h</name>
    <path>/home/default/omnetpp/src/nedxml/</path>
    <filename>nedvalidator_8h</filename>
    <includes id="nederror_8h" name="nederror.h" local="yes" imported="no">nederror.h</includes>
    <includes id="nedexception_8h" name="nedexception.h" local="yes" imported="no">nedexception.h</includes>
    <includes id="nedelements_8h" name="nedelements.h" local="yes" imported="no">nedelements.h</includes>
    <class kind="class">NEDValidatorBase</class>
  </compound>
  <compound kind="file">
    <name>nedxmldefs.h</name>
    <path>/home/default/omnetpp/src/nedxml/</path>
    <filename>nedxmldefs_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>NEDXML_API</name>
      <anchorfile>nedxmldefs_8h.html</anchorfile>
      <anchor>a3915af7fb1c0a123f29e86b0339a6782</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>nedxmlparser.h</name>
    <path>/home/default/omnetpp/src/nedxml/</path>
    <filename>nedxmlparser_8h</filename>
    <includes id="nedelement_8h" name="nedelement.h" local="yes" imported="no">nedelement.h</includes>
    <includes id="nederror_8h" name="nederror.h" local="yes" imported="no">nederror.h</includes>
    <member kind="function">
      <type>NAMESPACE_BEGIN NEDXML_API NEDElement *</type>
      <name>parseXML</name>
      <anchorfile>group__XMLParser.html</anchorfile>
      <anchor>ga2847fe7ce35d17c8bb6702001b02b20a</anchor>
      <arglist>(const char *filename, NEDErrorStore *errors)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>nedyydefs.h</name>
    <path>/home/default/omnetpp/src/nedxml/</path>
    <filename>nedyydefs_8h</filename>
    <includes id="nedxmldefs_8h" name="nedxmldefs.h" local="yes" imported="no">nedxmldefs.h</includes>
    <class kind="struct">my_yyltype</class>
    <class kind="struct">struct</class>
    <member kind="define">
      <type>#define</type>
      <name>YYSTYPE</name>
      <anchorfile>nedyydefs_8h.html</anchorfile>
      <anchor>a2ceb5b985e149f18e018b142cfdd7264</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>NAMESPACE_END OPP::NEDElement *</type>
      <name>doParseNED2</name>
      <anchorfile>nedyydefs_8h.html</anchorfile>
      <anchor>a8ce4fec25a5fd16407d3959072787247</anchor>
      <arglist>(OPP::NEDParser *p, const char *nedtext)</arglist>
    </member>
    <member kind="function">
      <type>OPP::NEDElement *</type>
      <name>doParseNED1</name>
      <anchorfile>nedyydefs_8h.html</anchorfile>
      <anchor>a931c394ada079dde92e208e8a359c857</anchor>
      <arglist>(OPP::NEDParser *p, const char *nedtext)</arglist>
    </member>
    <member kind="function">
      <type>OPP::NEDElement *</type>
      <name>doParseMSG2</name>
      <anchorfile>nedyydefs_8h.html</anchorfile>
      <anchor>a9306e6b356df62b7a45843e3841b48ba</anchor>
      <arglist>(OPP::NEDParser *p, const char *nedtext)</arglist>
    </member>
    <member kind="variable">
      <type>struct my_yyltype define YYSTYPE NAMESPACE_BEGIN typedef struct</type>
      <name>LineColumn</name>
      <anchorfile>nedyydefs_8h.html</anchorfile>
      <anchor>ab37e57c1f46d8a570f29f7167fe85530</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LineColumn</type>
      <name>pos</name>
      <anchorfile>nedyydefs_8h.html</anchorfile>
      <anchor>a5db42ac8af5c08f937049e91e174b697</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LineColumn</type>
      <name>prevpos</name>
      <anchorfile>nedyydefs_8h.html</anchorfile>
      <anchor>ad503b230caf787844066a886e5e6ebe5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>nedyylib.h</name>
    <path>/home/default/omnetpp/src/nedxml/</path>
    <filename>nedyylib_8h</filename>
    <includes id="nedelements_8h" name="nedelements.h" local="yes" imported="no">nedelements.h</includes>
    <includes id="nedyydefs_8h" name="nedyydefs.h" local="yes" imported="no">nedyydefs.h</includes>
    <includes id="nedparser_8h" name="nedparser.h" local="yes" imported="no">nedparser.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>NONREENTRANT_NED_PARSER</name>
      <anchorfile>nedyylib_8h.html</anchorfile>
      <anchor>a46745343f46884fb81533c96ff703628</anchor>
      <arglist>(p)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>slashifyFilename</name>
      <anchorfile>nedyylib_8h.html</anchorfile>
      <anchor>a2be3bb9aae10643ea08c083d4827200b</anchor>
      <arglist>(const char *fname)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>currentLocation</name>
      <anchorfile>nedyylib_8h.html</anchorfile>
      <anchor>ad3655a55639f827be74f8c4ce9a0731b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NEDElement *</type>
      <name>createElementWithTag</name>
      <anchorfile>nedyylib_8h.html</anchorfile>
      <anchor>ae1fc21dada8ddf920c950b0e131451df</anchor>
      <arglist>(int tagcode, NEDElement *parent=NULL)</arglist>
    </member>
    <member kind="function">
      <type>NEDElement *</type>
      <name>getOrCreateElementWithTag</name>
      <anchorfile>nedyylib_8h.html</anchorfile>
      <anchor>a8efb7ab94c7cc00dbee023b5ad244960</anchor>
      <arglist>(int tagcode, NEDElement *parent)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>storePos</name>
      <anchorfile>nedyylib_8h.html</anchorfile>
      <anchor>a565633614b10696d8299dbe5f8366c3e</anchor>
      <arglist>(NEDElement *node, YYLTYPE pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>storePos</name>
      <anchorfile>nedyylib_8h.html</anchorfile>
      <anchor>a3e6b55ef15d0754c795ab3e5691a9f46</anchor>
      <arglist>(NEDElement *node, YYLTYPE firstpos, YYLTYPE lastpos)</arglist>
    </member>
    <member kind="function">
      <type>PropertyElement *</type>
      <name>addProperty</name>
      <anchorfile>nedyylib_8h.html</anchorfile>
      <anchor>a9b95f15563ae6d90cc926acb29866791</anchor>
      <arglist>(NEDElement *node, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>PropertyElement *</type>
      <name>addComponentProperty</name>
      <anchorfile>nedyylib_8h.html</anchorfile>
      <anchor>a24896f075ea48a5888631b7e0431344a</anchor>
      <arglist>(NEDElement *node, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>PropertyElement *</type>
      <name>storeSourceCode</name>
      <anchorfile>nedyylib_8h.html</anchorfile>
      <anchor>a465a643c88849438e1b0d300dbc9ef66</anchor>
      <arglist>(NEDElement *node, YYLTYPE tokenpos)</arglist>
    </member>
    <member kind="function">
      <type>PropertyElement *</type>
      <name>storeComponentSourceCode</name>
      <anchorfile>nedyylib_8h.html</anchorfile>
      <anchor>a62b2d159280b5dbb555e36e773c875ce</anchor>
      <arglist>(NEDElement *node, YYLTYPE tokenpos)</arglist>
    </member>
    <member kind="function">
      <type>PropertyElement *</type>
      <name>setIsNetworkProperty</name>
      <anchorfile>nedyylib_8h.html</anchorfile>
      <anchor>a37a1aa4a9ce1fa6f99f867e7ee86c78f</anchor>
      <arglist>(NEDElement *node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addComment</name>
      <anchorfile>nedyylib_8h.html</anchorfile>
      <anchor>a0d848b9d79ef88c73c83ca4f3fa2d24d</anchor>
      <arglist>(NEDElement *node, const char *locId, const char *comment, const char *defaultValue)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>storeFileComment</name>
      <anchorfile>nedyylib_8h.html</anchorfile>
      <anchor>ab6f85216e8b6e3afab5b8fd41d55f4ab</anchor>
      <arglist>(NEDElement *node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>storeBannerComment</name>
      <anchorfile>nedyylib_8h.html</anchorfile>
      <anchor>ab87e6f8bbfa04345104414c40eb0da89</anchor>
      <arglist>(NEDElement *node, YYLTYPE tokenpos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>storeRightComment</name>
      <anchorfile>nedyylib_8h.html</anchorfile>
      <anchor>a8c434b5904480e40a35eaa6bd625b3e3</anchor>
      <arglist>(NEDElement *node, YYLTYPE tokenpos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>storeTrailingComment</name>
      <anchorfile>nedyylib_8h.html</anchorfile>
      <anchor>a4e8dc2abe3e1529b3a31230690abbe10</anchor>
      <arglist>(NEDElement *node, YYLTYPE tokenpos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>storeBannerAndRightComments</name>
      <anchorfile>nedyylib_8h.html</anchorfile>
      <anchor>acaee2567868e060c72a0e14f0dd2c63b</anchor>
      <arglist>(NEDElement *node, YYLTYPE pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>storeBannerAndRightComments</name>
      <anchorfile>nedyylib_8h.html</anchorfile>
      <anchor>ad393d0ce331724a527ce8114d4c10564</anchor>
      <arglist>(NEDElement *node, YYLTYPE firstpos, YYLTYPE lastpos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>storeInnerComments</name>
      <anchorfile>nedyylib_8h.html</anchorfile>
      <anchor>a56120e6a562daaa3c82970260fb6f2a8</anchor>
      <arglist>(NEDElement *node, YYLTYPE pos)</arglist>
    </member>
    <member kind="function">
      <type>ParamElement *</type>
      <name>addParameter</name>
      <anchorfile>nedyylib_8h.html</anchorfile>
      <anchor>aa5bbb67874c8ac4e1a50fc43505555c0</anchor>
      <arglist>(NEDElement *params, YYLTYPE namepos)</arglist>
    </member>
    <member kind="function">
      <type>ParamElement *</type>
      <name>addParameter</name>
      <anchorfile>nedyylib_8h.html</anchorfile>
      <anchor>a2b1e8f00fff8dfd97203900bff43dbe8</anchor>
      <arglist>(NEDElement *params, const char *name, YYLTYPE namepos)</arglist>
    </member>
    <member kind="function">
      <type>GateElement *</type>
      <name>addGate</name>
      <anchorfile>nedyylib_8h.html</anchorfile>
      <anchor>aa52f1f577d9d052f2f810665fbee6b4a</anchor>
      <arglist>(NEDElement *gates, YYLTYPE namepos)</arglist>
    </member>
    <member kind="function">
      <type>YYLTYPE</type>
      <name>trimQuotes</name>
      <anchorfile>nedyylib_8h.html</anchorfile>
      <anchor>a636547493c7b4de5c05b5d7b981eec73</anchor>
      <arglist>(YYLTYPE vectorpos)</arglist>
    </member>
    <member kind="function">
      <type>YYLTYPE</type>
      <name>trimDoubleBraces</name>
      <anchorfile>nedyylib_8h.html</anchorfile>
      <anchor>a348de06779968d259762d1bfeb27bc77</anchor>
      <arglist>(YYLTYPE vectorpos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapAttributes</name>
      <anchorfile>nedyylib_8h.html</anchorfile>
      <anchor>a7feca73e6000d0a4534e52606be45050</anchor>
      <arglist>(NEDElement *node, const char *attr1, const char *attr2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapExpressionChildren</name>
      <anchorfile>nedyylib_8h.html</anchorfile>
      <anchor>a5f2c2a105799337ca02c58ec30cf198d</anchor>
      <arglist>(NEDElement *node, const char *attr1, const char *attr2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapConnection</name>
      <anchorfile>nedyylib_8h.html</anchorfile>
      <anchor>ac991eb45910e0b9471fb724ef70e0aa5</anchor>
      <arglist>(NEDElement *conn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transferChildren</name>
      <anchorfile>nedyylib_8h.html</anchorfile>
      <anchor>a376a2a486fd1edc3d8affce19fb095a9</anchor>
      <arglist>(NEDElement *from, NEDElement *to)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>toString</name>
      <anchorfile>nedyylib_8h.html</anchorfile>
      <anchor>a411dfd220ece55640ab27fd750943677</anchor>
      <arglist>(YYLTYPE)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>toString</name>
      <anchorfile>nedyylib_8h.html</anchorfile>
      <anchor>a463009ee61ff32012dcda8bc109ecad0</anchor>
      <arglist>(long)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>removeSpaces</name>
      <anchorfile>nedyylib_8h.html</anchorfile>
      <anchor>adee03029e5247f3e3be8a4390a6b6dca</anchor>
      <arglist>(YYLTYPE pos)</arglist>
    </member>
    <member kind="function">
      <type>ExpressionElement *</type>
      <name>createExpression</name>
      <anchorfile>nedyylib_8h.html</anchorfile>
      <anchor>a60de3d77fa3d912d98b348286cf57050</anchor>
      <arglist>(NEDElement *expr)</arglist>
    </member>
    <member kind="function">
      <type>OperatorElement *</type>
      <name>createOperator</name>
      <anchorfile>nedyylib_8h.html</anchorfile>
      <anchor>aaa14297ecc1eb5c70d1c3bd9eba65bae</anchor>
      <arglist>(const char *op, NEDElement *operand1, NEDElement *operand2=NULL, NEDElement *operand3=NULL)</arglist>
    </member>
    <member kind="function">
      <type>FunctionElement *</type>
      <name>createFunction</name>
      <anchorfile>nedyylib_8h.html</anchorfile>
      <anchor>a2bd093e8db4ff28d7292b0a4e367e407</anchor>
      <arglist>(const char *funcname, NEDElement *arg1=NULL, NEDElement *arg2=NULL, NEDElement *arg3=NULL, NEDElement *arg4=NULL, NEDElement *arg5=NULL, NEDElement *arg6=NULL, NEDElement *arg7=NULL, NEDElement *arg8=NULL, NEDElement *arg9=NULL, NEDElement *arg10=NULL)</arglist>
    </member>
    <member kind="function">
      <type>IdentElement *</type>
      <name>createIdent</name>
      <anchorfile>nedyylib_8h.html</anchorfile>
      <anchor>a7187871aa8447d257bb6807f566f2101</anchor>
      <arglist>(YYLTYPE parampos)</arglist>
    </member>
    <member kind="function">
      <type>IdentElement *</type>
      <name>createIdent</name>
      <anchorfile>nedyylib_8h.html</anchorfile>
      <anchor>ae7355b2efbd3027ed89e36eebfe64ff1</anchor>
      <arglist>(YYLTYPE parampos, YYLTYPE modulepos, NEDElement *moduleindexoperand=NULL)</arglist>
    </member>
    <member kind="function">
      <type>LiteralElement *</type>
      <name>createPropertyValue</name>
      <anchorfile>nedyylib_8h.html</anchorfile>
      <anchor>a482a499d53112492060b13c3cd53ce79</anchor>
      <arglist>(YYLTYPE textpos)</arglist>
    </member>
    <member kind="function">
      <type>LiteralElement *</type>
      <name>createLiteral</name>
      <anchorfile>nedyylib_8h.html</anchorfile>
      <anchor>a51be49d649dc9e2c6e4ea35fdf518264</anchor>
      <arglist>(int type, YYLTYPE valuepos, YYLTYPE textpos)</arglist>
    </member>
    <member kind="function">
      <type>LiteralElement *</type>
      <name>createLiteral</name>
      <anchorfile>nedyylib_8h.html</anchorfile>
      <anchor>ab588620361874c6a3d84a7af91034667</anchor>
      <arglist>(int type, const char *value, const char *text)</arglist>
    </member>
    <member kind="function">
      <type>LiteralElement *</type>
      <name>createStringLiteral</name>
      <anchorfile>nedyylib_8h.html</anchorfile>
      <anchor>a04c9c4cdb1a5ef0e330f5d8a62894f4a</anchor>
      <arglist>(YYLTYPE textpos)</arglist>
    </member>
    <member kind="function">
      <type>LiteralElement *</type>
      <name>createQuantityLiteral</name>
      <anchorfile>nedyylib_8h.html</anchorfile>
      <anchor>a364051352debcc4380369a95a577c51c</anchor>
      <arglist>(YYLTYPE textpos)</arglist>
    </member>
    <member kind="function">
      <type>NEDElement *</type>
      <name>unaryMinus</name>
      <anchorfile>nedyylib_8h.html</anchorfile>
      <anchor>a72b549208af674d8869265f4e46db6dd</anchor>
      <arglist>(NEDElement *node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOptionalExpression</name>
      <anchorfile>nedyylib_8h.html</anchorfile>
      <anchor>a8c9ebbe23d161df6b9e92bfc4b3936f7</anchor>
      <arglist>(NEDElement *elem, const char *attrname, YYLTYPE exprpos, NEDElement *expr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addExpression</name>
      <anchorfile>nedyylib_8h.html</anchorfile>
      <anchor>a2d1fe159c5a907979cbd1a8a5786a573</anchor>
      <arglist>(NEDElement *elem, const char *attrname, YYLTYPE exprpos, NEDElement *expr)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>convertBackgroundDisplayString</name>
      <anchorfile>nedyylib_8h.html</anchorfile>
      <anchor>ac97ad9c797fa49ffa3a3d8f7c0f52fac</anchor>
      <arglist>(const char *old)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>nedyylib_8h.html</anchorfile>
      <anchor>a84946346d63271ecf59de3a3ec49e85a</anchor>
      <arglist>(YYLTYPE pos)</arglist>
    </member>
    <member kind="function">
      <type>YYLTYPE</type>
      <name>makeYYLTYPE</name>
      <anchorfile>nedyylib_8h.html</anchorfile>
      <anchor>afbab4797bd5f4bafd495824dae0b3420</anchor>
      <arglist>(int fl, int fc, int ll, int lc)</arglist>
    </member>
    <member kind="function">
      <type>YYLTYPE</type>
      <name>makeEmptyYYLTYPE</name>
      <anchorfile>nedyylib_8h.html</anchorfile>
      <anchor>ab17025ff6f0a5cb4f9fa0cd36382e297</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>saxparser.h</name>
    <path>/home/default/omnetpp/src/nedxml/</path>
    <filename>saxparser_8h</filename>
    <includes id="nedxmldefs_8h" name="nedxmldefs.h" local="yes" imported="no">nedxmldefs.h</includes>
    <class kind="class">SAXHandler</class>
    <class kind="class">SAXParser</class>
  </compound>
  <compound kind="file">
    <name>xmlgenerator.h</name>
    <path>/home/default/omnetpp/src/nedxml/</path>
    <filename>xmlgenerator_8h</filename>
    <includes id="nedelements_8h" name="nedelements.h" local="yes" imported="no">nedelements.h</includes>
    <class kind="class">NEDXMLGenerator</class>
    <member kind="function">
      <type>NAMESPACE_BEGIN NEDXML_API void</type>
      <name>generateXML</name>
      <anchorfile>group__XMLGenerator.html</anchorfile>
      <anchor>ga53295123a908e449c1cad182a12d4751</anchor>
      <arglist>(std::ostream &amp;out, NEDElement *tree, bool srcloc, int indentsize=4)</arglist>
    </member>
    <member kind="function">
      <type>NEDXML_API std::string</type>
      <name>generateXML</name>
      <anchorfile>group__XMLGenerator.html</anchorfile>
      <anchor>ga26faa15d47c26047dba054f136e4e4f1</anchor>
      <arglist>(NEDElement *tree, bool srcloc, int indentsize=4)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>Overview</name>
    <title>Overview</title>
    <filename>group__Overview.html</filename>
  </compound>
  <compound kind="group">
    <name>DTD</name>
    <title>DTD</title>
    <filename>group__DTD.html</filename>
  </compound>
  <compound kind="group">
    <name>Data</name>
    <title>Data classes</title>
    <filename>group__Data.html</filename>
    <class kind="class">NEDElementUserData</class>
    <class kind="struct">NEDSourceRegion</class>
    <class kind="class">NEDElement</class>
    <class kind="class">FilesElement</class>
    <class kind="class">NedFileElement</class>
    <class kind="class">CommentElement</class>
    <class kind="class">PackageElement</class>
    <class kind="class">ImportElement</class>
    <class kind="class">PropertyDeclElement</class>
    <class kind="class">ExtendsElement</class>
    <class kind="class">InterfaceNameElement</class>
    <class kind="class">SimpleModuleElement</class>
    <class kind="class">ModuleInterfaceElement</class>
    <class kind="class">CompoundModuleElement</class>
    <class kind="class">ChannelInterfaceElement</class>
    <class kind="class">ChannelElement</class>
    <class kind="class">ParametersElement</class>
    <class kind="class">ParamElement</class>
    <class kind="class">PropertyElement</class>
    <class kind="class">PropertyKeyElement</class>
    <class kind="class">GatesElement</class>
    <class kind="class">GateElement</class>
    <class kind="class">TypesElement</class>
    <class kind="class">SubmodulesElement</class>
    <class kind="class">SubmoduleElement</class>
    <class kind="class">ConnectionsElement</class>
    <class kind="class">ConnectionElement</class>
    <class kind="class">ConnectionGroupElement</class>
    <class kind="class">LoopElement</class>
    <class kind="class">ConditionElement</class>
    <class kind="class">ExpressionElement</class>
    <class kind="class">OperatorElement</class>
    <class kind="class">FunctionElement</class>
    <class kind="class">IdentElement</class>
    <class kind="class">LiteralElement</class>
    <class kind="class">MsgFileElement</class>
    <class kind="class">NamespaceElement</class>
    <class kind="class">CplusplusElement</class>
    <class kind="class">StructDeclElement</class>
    <class kind="class">ClassDeclElement</class>
    <class kind="class">MessageDeclElement</class>
    <class kind="class">PacketDeclElement</class>
    <class kind="class">EnumDeclElement</class>
    <class kind="class">EnumElement</class>
    <class kind="class">EnumFieldsElement</class>
    <class kind="class">EnumFieldElement</class>
    <class kind="class">MessageElement</class>
    <class kind="class">PacketElement</class>
    <class kind="class">ClassElement</class>
    <class kind="class">StructElement</class>
    <class kind="class">FieldElement</class>
    <class kind="class">UnknownElement</class>
    <class kind="class">NEDElementFactory</class>
    <member kind="enumeration">
      <name>NEDElementCode</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>gad34cccc2e635c441d3d7721c4c15b68c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_NULL</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68cabe4646866ad678f9c06fbf48b783db6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_FILES</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68caf0f52ccf1b604c247dfd73bba385986e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_NED_FILE</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68ca47a8aaf0e028d7dc9ef6e84686599af8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_COMMENT</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68ca7828180a7f2a34640cadbe66a5d47627</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_PACKAGE</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68caa1665af429b2e65889485610c0c8f03f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_IMPORT</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68cac0d4ebcbad2ba024f9aa2a3459f44d08</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_PROPERTY_DECL</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68ca21d8117c33e31fdfd783e500853a95c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_EXTENDS</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68caacd830bed1d6264625102f079aeecd74</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_INTERFACE_NAME</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68ca8b478e073c3996bd6ce9abf5dd79362f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_SIMPLE_MODULE</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68ca24308b4324187beac81e6920d09d31fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_MODULE_INTERFACE</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68ca507c7aae391e1d68cb5d0e4796b5ff72</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_COMPOUND_MODULE</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68ca2f52963e4eb44e8aff5e3dd3707766cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_CHANNEL_INTERFACE</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68cac4af69096a9ba2c0138354b0aaaf8708</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_CHANNEL</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68caa5d202195e740e8da772a6e109f70d9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_PARAMETERS</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68caf9976d938ac9fc3a79ada698de026cd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_PARAM</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68cab54508e039787e6f0398f384430dc08f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_PROPERTY</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68ca366803979f7e863f328a2fc32d282e62</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_PROPERTY_KEY</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68ca3cf06ea94e252f4a2bd979abf980c48b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_GATES</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68ca28227565427af0c833a5bee75ef5d644</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_GATE</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68ca12bb7f956774de679e41dc75e4d540df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_TYPES</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68cad8caee31b25cf157b5c4172b6bbb2ed7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_SUBMODULES</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68ca15ca0c9a2e2b66624bb6775019c7324b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_SUBMODULE</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68ca737cb9551d7e0f206a95594b9b4e51ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_CONNECTIONS</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68ca91040a6621bfc3dd6d6a1d49251b97c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_CONNECTION</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68ca5a4b3bae4f85c56101b612c59d62a7f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_CONNECTION_GROUP</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68ca2cb06aa76da0aeabcb0d93f6063e4633</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_LOOP</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68ca80bfe03698c5c33da499c0e3b2e7681b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_CONDITION</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68caa4146926cf4f987508391391ddda2acc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_EXPRESSION</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68ca734f944e9aff83bbc91a0955b1897e14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_OPERATOR</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68caf527a555c91f595c4d8a87031e9a6576</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_FUNCTION</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68ca67c8ebfe2cdba16710b755fabd957b43</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_IDENT</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68ca7af94c708923ef46195eb3f40a09e03a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_LITERAL</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68cac5e0fa7b1aeec2c9c8e4db12d4a32404</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_MSG_FILE</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68caf6fc54e776c962a70d5ab05c4bcfd235</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_NAMESPACE</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68cae80473c92c631ca07aaffc356c185ffe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_CPLUSPLUS</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68ca580edeb93570c921dd22b3aefab4cd2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_STRUCT_DECL</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68cad70d3465bf52a059f19f75b77882008c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_CLASS_DECL</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68ca8b9f948df5d9953eda28c4b599225041</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_MESSAGE_DECL</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68ca02f84cd957697624b7c37400ba00dc6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_PACKET_DECL</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68cae9151e7150e9363c89623c54781febb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_ENUM_DECL</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68caabeb508e148820edf30d11819ac5df76</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_ENUM</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68ca2fe992d1dde8aeabc148e00701be03a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_ENUM_FIELDS</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68ca8e14996df6f58540dbd1627654aef3b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_ENUM_FIELD</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68ca50b0047b9bb5b428cc5cad20b99bc099</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_MESSAGE</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68ca66d2f84f9f6159edd967a14f7c27b4e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_PACKET</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68ca78f7289e11ee7d4ae6a3e8c3bf6fb554</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_CLASS</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68ca9e9eee707e30a18866aa3827671383ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_STRUCT</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68ca6671693f35af380e17da8157cb10f11e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_FIELD</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68caefe111337aad0cad283a278378f7f34a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_UNKNOWN</name>
      <anchorfile>group__Data.html</anchorfile>
      <anchor>ggad34cccc2e635c441d3d7721c4c15b68ca2dc1887831f5e3d5c57cd37acdccfda9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>NEDParser</name>
    <title>NED Parsing</title>
    <filename>group__NEDParser.html</filename>
    <class kind="class">NEDFileBuffer</class>
    <class kind="class">NEDParser</class>
  </compound>
  <compound kind="group">
    <name>XMLParser</name>
    <title>XML Parsing</title>
    <filename>group__XMLParser.html</filename>
    <class kind="class">NEDSAXHandler</class>
    <class kind="class">SAXHandler</class>
    <class kind="class">SAXParser</class>
    <member kind="function">
      <type>NAMESPACE_BEGIN NEDXML_API NEDElement *</type>
      <name>parseXML</name>
      <anchorfile>group__XMLParser.html</anchorfile>
      <anchor>ga2847fe7ce35d17c8bb6702001b02b20a</anchor>
      <arglist>(const char *filename, NEDErrorStore *errors)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>XMLGenerator</name>
    <title>Generating XML</title>
    <filename>group__XMLGenerator.html</filename>
    <class kind="class">NEDXMLGenerator</class>
    <member kind="function">
      <type>NAMESPACE_BEGIN NEDXML_API void</type>
      <name>generateXML</name>
      <anchorfile>group__XMLGenerator.html</anchorfile>
      <anchor>ga53295123a908e449c1cad182a12d4751</anchor>
      <arglist>(std::ostream &amp;out, NEDElement *tree, bool srcloc, int indentsize=4)</arglist>
    </member>
    <member kind="function">
      <type>NEDXML_API std::string</type>
      <name>generateXML</name>
      <anchorfile>group__XMLGenerator.html</anchorfile>
      <anchor>ga26faa15d47c26047dba054f136e4e4f1</anchor>
      <arglist>(NEDElement *tree, bool srcloc, int indentsize=4)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>Validation</name>
    <title>Validation</title>
    <filename>group__Validation.html</filename>
    <class kind="class">NEDCrossValidator</class>
    <class kind="class">NEDDTDValidator</class>
    <class kind="class">NEDDTDValidatorBase</class>
    <class kind="class">NEDSyntaxValidator</class>
    <class kind="class">NEDTools</class>
    <class kind="class">NEDValidatorBase</class>
  </compound>
  <compound kind="group">
    <name>NEDResources</name>
    <title>NED Resources</title>
    <filename>group__NEDResources.html</filename>
    <class kind="class">NEDResourceCache</class>
    <class kind="class">NEDTypeInfo</class>
  </compound>
  <compound kind="group">
    <name>NEDGenerator</name>
    <title>Generating NED</title>
    <filename>group__NEDGenerator.html</filename>
    <class kind="class">MsgCppGenerator</class>
    <class kind="class">NED1Generator</class>
    <class kind="class">NED2Generator</class>
    <member kind="function">
      <type>NAMESPACE_BEGIN NEDXML_API void</type>
      <name>generateNED1</name>
      <anchorfile>group__NEDGenerator.html</anchorfile>
      <anchor>ga76a00dccd7b2d245ea917e5e1c7bf063</anchor>
      <arglist>(std::ostream &amp;out, NEDElement *node, NEDErrorStore *e)</arglist>
    </member>
    <member kind="function">
      <type>NAMESPACE_BEGIN NEDXML_API void</type>
      <name>generateNED2</name>
      <anchorfile>group__NEDGenerator.html</anchorfile>
      <anchor>ga2705d2eab28150a228777e82e54cdd6c</anchor>
      <arglist>(std::ostream &amp;out, NEDElement *node, NEDErrorStore *e)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>CppGenerator</name>
    <title>Generating C++ code</title>
    <filename>group__CppGenerator.html</filename>
  </compound>
  <compound kind="class">
    <name>ChannelElement</name>
    <filename>classChannelElement.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>ChannelElement</name>
      <anchorfile>classChannelElement.html</anchorfile>
      <anchor>aa9a316b1fa75e4096e98aa7b268907b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ChannelElement</name>
      <anchorfile>classChannelElement.html</anchorfile>
      <anchor>a615b9bb214da118a6585118f275f09a4</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ChannelElement</name>
      <anchorfile>classChannelElement.html</anchorfile>
      <anchor>aedeea3f5b43709f0bcfee433b27bba81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classChannelElement.html</anchorfile>
      <anchor>a8eabd1a444408e9b078aecb804af7a80</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classChannelElement.html</anchorfile>
      <anchor>a96f5fbf4c39d598284017e15d11df2a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classChannelElement.html</anchorfile>
      <anchor>ad312ef445eab313eef2ce234d8fd2a84</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classChannelElement.html</anchorfile>
      <anchor>a0fd9dae45886f95a96085aa9407ce120</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classChannelElement.html</anchorfile>
      <anchor>aadd885515dd51811c6227ccaa8578c92</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classChannelElement.html</anchorfile>
      <anchor>a73f3e96d6800b9c1c5d7cc5ca6b4d322</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classChannelElement.html</anchorfile>
      <anchor>ae7f6eaa35e86bbba335be25b0a823267</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classChannelElement.html</anchorfile>
      <anchor>a7c05bb38302e4ef80104328213db5104</anchor>
      <arglist>(const char *name, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classChannelElement.html</anchorfile>
      <anchor>a593f3113066fb2ce466c68e8913599e5</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ChannelElement *</type>
      <name>dup</name>
      <anchorfile>classChannelElement.html</anchorfile>
      <anchor>a4432cf12e80e3b9989efa8385054c9c0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classChannelElement.html</anchorfile>
      <anchor>ac4bb789b45a836d8999169bff9d088a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classChannelElement.html</anchorfile>
      <anchor>a1c2db2eecb823e463f7334d33d654fdc</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ChannelElement *</type>
      <name>getNextChannelSibling</name>
      <anchorfile>classChannelElement.html</anchorfile>
      <anchor>aae410b941d4fe18793e1351da8fdab9b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CommentElement *</type>
      <name>getFirstCommentChild</name>
      <anchorfile>classChannelElement.html</anchorfile>
      <anchor>a4d426f870c704e4d273a380d60af5560</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ExtendsElement *</type>
      <name>getFirstExtendsChild</name>
      <anchorfile>classChannelElement.html</anchorfile>
      <anchor>a1734ecc54cabc383813690fc44c590c1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual InterfaceNameElement *</type>
      <name>getFirstInterfaceNameChild</name>
      <anchorfile>classChannelElement.html</anchorfile>
      <anchor>ae2c62b1211073d835e50b3ae4895f203</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParametersElement *</type>
      <name>getFirstParametersChild</name>
      <anchorfile>classChannelElement.html</anchorfile>
      <anchor>afa562eab5a0d484630caacf042d72d19</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ChannelInterfaceElement</name>
    <filename>classChannelInterfaceElement.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>ChannelInterfaceElement</name>
      <anchorfile>classChannelInterfaceElement.html</anchorfile>
      <anchor>a2ce67000301605bbcd7d19a9b694efcd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ChannelInterfaceElement</name>
      <anchorfile>classChannelInterfaceElement.html</anchorfile>
      <anchor>a212bfbbf535a31cada8cb052885ab4d5</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ChannelInterfaceElement</name>
      <anchorfile>classChannelInterfaceElement.html</anchorfile>
      <anchor>af8354d417851f3ae7658c629893fb7f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classChannelInterfaceElement.html</anchorfile>
      <anchor>a24289a7cfe608c8d915f115124053812</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classChannelInterfaceElement.html</anchorfile>
      <anchor>ad99291547eec22371c968ca4b21e730e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classChannelInterfaceElement.html</anchorfile>
      <anchor>a4c117a17d09a2517db184bc33f0c3448</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classChannelInterfaceElement.html</anchorfile>
      <anchor>a685b04a8e40af1e2ec76349b8425aa96</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classChannelInterfaceElement.html</anchorfile>
      <anchor>a6605d3047b1df3e587c3cbfda3274c75</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classChannelInterfaceElement.html</anchorfile>
      <anchor>a9dc6d8c688041c3f8d39d2d9b503c123</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classChannelInterfaceElement.html</anchorfile>
      <anchor>abcc00a7b975eaeac5f5ce1d7e52582bf</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classChannelInterfaceElement.html</anchorfile>
      <anchor>ad2a2ec7ad287cbb2bd7ab7c3db5f7d0c</anchor>
      <arglist>(const char *name, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classChannelInterfaceElement.html</anchorfile>
      <anchor>a271f4d79c9a1893a0db42da0b83e5fc3</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ChannelInterfaceElement *</type>
      <name>dup</name>
      <anchorfile>classChannelInterfaceElement.html</anchorfile>
      <anchor>ac9ba7ba2dbc6cfc26a4e64f6c6b1dc74</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classChannelInterfaceElement.html</anchorfile>
      <anchor>a009809af508531c7dd26c0c8278d0ab6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classChannelInterfaceElement.html</anchorfile>
      <anchor>aa7981131ada20078d33ef4e263261094</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ChannelInterfaceElement *</type>
      <name>getNextChannelInterfaceSibling</name>
      <anchorfile>classChannelInterfaceElement.html</anchorfile>
      <anchor>a40a6cc365a4ac27cc9ddf9f6ffc86819</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CommentElement *</type>
      <name>getFirstCommentChild</name>
      <anchorfile>classChannelInterfaceElement.html</anchorfile>
      <anchor>afdd4c54539d2960254742020f96f9e04</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ExtendsElement *</type>
      <name>getFirstExtendsChild</name>
      <anchorfile>classChannelInterfaceElement.html</anchorfile>
      <anchor>a4ea24c447362b30c0005eb68da6a919d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParametersElement *</type>
      <name>getFirstParametersChild</name>
      <anchorfile>classChannelInterfaceElement.html</anchorfile>
      <anchor>af6a8771ce02fc382c5d8a3b581584172</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ClassDeclElement</name>
    <filename>classClassDeclElement.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>ClassDeclElement</name>
      <anchorfile>classClassDeclElement.html</anchorfile>
      <anchor>a702ccde4c5c15e2da7f7dd413116e031</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ClassDeclElement</name>
      <anchorfile>classClassDeclElement.html</anchorfile>
      <anchor>a0d9705a507d0d44208cd2a38d819f48d</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ClassDeclElement</name>
      <anchorfile>classClassDeclElement.html</anchorfile>
      <anchor>a504de9370b8f463b926fd07547cf6d1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classClassDeclElement.html</anchorfile>
      <anchor>ae5c30ac7f44cb4c05e25ac2d89271580</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classClassDeclElement.html</anchorfile>
      <anchor>ab359486ea88adb28cc50cef0c163ca9b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classClassDeclElement.html</anchorfile>
      <anchor>a43a067dbe57b98ed65107fa94567bc08</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classClassDeclElement.html</anchorfile>
      <anchor>abba76d7165796da1f3472ff35dedae31</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classClassDeclElement.html</anchorfile>
      <anchor>ab23b31964edeaddcd9a5d797966b869b</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classClassDeclElement.html</anchorfile>
      <anchor>a0cd5bbc81bab22393f64f8e3d4311625</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classClassDeclElement.html</anchorfile>
      <anchor>acc89637274ddab054443ce707520733a</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classClassDeclElement.html</anchorfile>
      <anchor>adbbecc79a574ab93e362b6a1bd21ad2e</anchor>
      <arglist>(const char *name, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classClassDeclElement.html</anchorfile>
      <anchor>a8fa2194c1a57d3f6f1b64e22dbd41527</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ClassDeclElement *</type>
      <name>dup</name>
      <anchorfile>classClassDeclElement.html</anchorfile>
      <anchor>a00a12aa82e91ead56e81fa22b96c9785</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classClassDeclElement.html</anchorfile>
      <anchor>a2c38fe711229b2b90ae62af46c12cd2f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classClassDeclElement.html</anchorfile>
      <anchor>a2586be14fe3ce21433e2e3799c054223</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getIsCobject</name>
      <anchorfile>classClassDeclElement.html</anchorfile>
      <anchor>a79acee7812aa66f2fa949b13363d1ec1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIsCobject</name>
      <anchorfile>classClassDeclElement.html</anchorfile>
      <anchor>a66b590e46090799145b36d4a7135abe0</anchor>
      <arglist>(bool val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getExtendsName</name>
      <anchorfile>classClassDeclElement.html</anchorfile>
      <anchor>a0140d86523d83173adf093111c7c405d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExtendsName</name>
      <anchorfile>classClassDeclElement.html</anchorfile>
      <anchor>a5c3f3575758a29938db51a0162312d3b</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ClassDeclElement *</type>
      <name>getNextClassDeclSibling</name>
      <anchorfile>classClassDeclElement.html</anchorfile>
      <anchor>ae5c1d9e0688e7bf62b8e5c81687e22ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CommentElement *</type>
      <name>getFirstCommentChild</name>
      <anchorfile>classClassDeclElement.html</anchorfile>
      <anchor>ad945fcad340bebe9d8815b950843d0a7</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ClassElement</name>
    <filename>classClassElement.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>ClassElement</name>
      <anchorfile>classClassElement.html</anchorfile>
      <anchor>a298d8a95c364fe17e187ed3d9b55fc79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ClassElement</name>
      <anchorfile>classClassElement.html</anchorfile>
      <anchor>a2eeed163bd061c37f8cd0ad4c66a4085</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ClassElement</name>
      <anchorfile>classClassElement.html</anchorfile>
      <anchor>ac41e1631c701bd6731c96957b89b52ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classClassElement.html</anchorfile>
      <anchor>a2be0cbad199b59e3f11c34cb92756647</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classClassElement.html</anchorfile>
      <anchor>ade3c720aa3804c3c65c82d704b577a29</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classClassElement.html</anchorfile>
      <anchor>a580436bc660c7bf3fb0b641a6cd629ef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classClassElement.html</anchorfile>
      <anchor>a630c2a689d68e71d82fc6550f076a650</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classClassElement.html</anchorfile>
      <anchor>a3361e166bad1f6b23a98f6bd3dbdfeba</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classClassElement.html</anchorfile>
      <anchor>aa8aa98afdd21441fda366d3fb42fa22b</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classClassElement.html</anchorfile>
      <anchor>a89e28246df1d4adfbeab94599b27ae1c</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classClassElement.html</anchorfile>
      <anchor>a00988fabccc262f91006fc06ac67c5ab</anchor>
      <arglist>(const char *name, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classClassElement.html</anchorfile>
      <anchor>ac306b0c6011f090ed2ba9fb06db2ac1a</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ClassElement *</type>
      <name>dup</name>
      <anchorfile>classClassElement.html</anchorfile>
      <anchor>a9ad5a8064757da5020547369db2bd9b4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classClassElement.html</anchorfile>
      <anchor>a862c21c521ae9791dc298061cb473cb1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classClassElement.html</anchorfile>
      <anchor>a69b5526eaddc6c2ff747ada089d8b6cb</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getExtendsName</name>
      <anchorfile>classClassElement.html</anchorfile>
      <anchor>af7e6d14940e653783ad51ced75c0c3aa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExtendsName</name>
      <anchorfile>classClassElement.html</anchorfile>
      <anchor>a4426628f086517cc43f58ffbe62a8ad7</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getSourceCode</name>
      <anchorfile>classClassElement.html</anchorfile>
      <anchor>aff3b81a7cb2e425d45c2b95fcb577e8b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSourceCode</name>
      <anchorfile>classClassElement.html</anchorfile>
      <anchor>a82a7e2314dd89a50e9863c35eec5f437</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ClassElement *</type>
      <name>getNextClassSibling</name>
      <anchorfile>classClassElement.html</anchorfile>
      <anchor>a171d3bf7bb4be2a93f9a32b300fc6734</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CommentElement *</type>
      <name>getFirstCommentChild</name>
      <anchorfile>classClassElement.html</anchorfile>
      <anchor>a13502620e0747d3900081e08e9950bbb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PropertyElement *</type>
      <name>getFirstPropertyChild</name>
      <anchorfile>classClassElement.html</anchorfile>
      <anchor>a5b5cb0474bcae6e6608a9b1f90fbf197</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FieldElement *</type>
      <name>getFirstFieldChild</name>
      <anchorfile>classClassElement.html</anchorfile>
      <anchor>a500c53d45dcd18fdd66fee6d9bd1cc6a</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CommentElement</name>
    <filename>classCommentElement.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>CommentElement</name>
      <anchorfile>classCommentElement.html</anchorfile>
      <anchor>ac285e25abed4e2c5e818134d31f5193a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CommentElement</name>
      <anchorfile>classCommentElement.html</anchorfile>
      <anchor>a2873288775b686ab1141a497ff74e56f</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CommentElement</name>
      <anchorfile>classCommentElement.html</anchorfile>
      <anchor>a2a07b720143be46e55afad3cd80cab3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classCommentElement.html</anchorfile>
      <anchor>a93fb83a89923d62c67415704cba77adb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classCommentElement.html</anchorfile>
      <anchor>a87d27dbf276e721f0f34923868b68753</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classCommentElement.html</anchorfile>
      <anchor>a500d7168a2ff91fba9bf1f0ad181c8b1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classCommentElement.html</anchorfile>
      <anchor>aee656c21f25d5fafe6b551b520888891</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classCommentElement.html</anchorfile>
      <anchor>a6cea9e0ed4f6b86eee1981e9b836a637</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classCommentElement.html</anchorfile>
      <anchor>a89894e6920eba04621d6857d1d6c6362</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classCommentElement.html</anchorfile>
      <anchor>ac4ee15e6a0a47b2acd2564314426abf7</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classCommentElement.html</anchorfile>
      <anchor>a3e828593ccd11fe42363ebad2d564df3</anchor>
      <arglist>(const char *name, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classCommentElement.html</anchorfile>
      <anchor>ae62ad204847a61a945fb96a0631e2f65</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CommentElement *</type>
      <name>dup</name>
      <anchorfile>classCommentElement.html</anchorfile>
      <anchor>ab703385960b2c34a6588e0eb091661d2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getLocid</name>
      <anchorfile>classCommentElement.html</anchorfile>
      <anchor>a699af9119629c73a59c047806f43b428</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLocid</name>
      <anchorfile>classCommentElement.html</anchorfile>
      <anchor>af2f30079294c8f738ac5472bee00d06a</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getContent</name>
      <anchorfile>classCommentElement.html</anchorfile>
      <anchor>a823234bca4df80155b0f769639b4d446</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setContent</name>
      <anchorfile>classCommentElement.html</anchorfile>
      <anchor>acd4e46bae89b4acbd2c018aa0037c47e</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CommentElement *</type>
      <name>getNextCommentSibling</name>
      <anchorfile>classCommentElement.html</anchorfile>
      <anchor>a9980e051b64ba86c4fb609ca55926c7a</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CompoundModuleElement</name>
    <filename>classCompoundModuleElement.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>CompoundModuleElement</name>
      <anchorfile>classCompoundModuleElement.html</anchorfile>
      <anchor>ae2e9261bc79035a505d6c0fc9ba1811d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CompoundModuleElement</name>
      <anchorfile>classCompoundModuleElement.html</anchorfile>
      <anchor>adc8d79396b1aeebfaa0f721d8f03b1c3</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CompoundModuleElement</name>
      <anchorfile>classCompoundModuleElement.html</anchorfile>
      <anchor>a50110badec8e3a7b6aa2f6d61c30e1cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classCompoundModuleElement.html</anchorfile>
      <anchor>a5cb90197b895a138f1d8e902255adb6a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classCompoundModuleElement.html</anchorfile>
      <anchor>a2dcff1e3983164ae15528cbd4236227e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classCompoundModuleElement.html</anchorfile>
      <anchor>a5a16c2a2b1b84afb1d00707932119c2b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classCompoundModuleElement.html</anchorfile>
      <anchor>a24ef3cd8f8e20be85125335ebb263c4b</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classCompoundModuleElement.html</anchorfile>
      <anchor>ae3bb9814a45959ca13fec3b592057d4e</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classCompoundModuleElement.html</anchorfile>
      <anchor>a4c5c10780d48b2a650a6ac2569b2df8c</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classCompoundModuleElement.html</anchorfile>
      <anchor>af8cbb3b451f4349107970df7f74857b0</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classCompoundModuleElement.html</anchorfile>
      <anchor>ad6a19dd4c483fd30f262e4dd767f0ddf</anchor>
      <arglist>(const char *name, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classCompoundModuleElement.html</anchorfile>
      <anchor>a8e2e6b9585819bfad834a51b4a7f5b40</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CompoundModuleElement *</type>
      <name>dup</name>
      <anchorfile>classCompoundModuleElement.html</anchorfile>
      <anchor>abf2633baa72302f0f78c4a662c333ccf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classCompoundModuleElement.html</anchorfile>
      <anchor>acbd4249a2dcea4943de6091ac569df60</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classCompoundModuleElement.html</anchorfile>
      <anchor>ad5bef76331800dccaeeed4684e0c455d</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CompoundModuleElement *</type>
      <name>getNextCompoundModuleSibling</name>
      <anchorfile>classCompoundModuleElement.html</anchorfile>
      <anchor>afca5280b3bbb511c59914afda9d2f4ab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CommentElement *</type>
      <name>getFirstCommentChild</name>
      <anchorfile>classCompoundModuleElement.html</anchorfile>
      <anchor>a2fc4c879e9ee5c7769d3f6b78193c7e4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ExtendsElement *</type>
      <name>getFirstExtendsChild</name>
      <anchorfile>classCompoundModuleElement.html</anchorfile>
      <anchor>a0aa547ca1781452eeb6fc097d3aa075a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual InterfaceNameElement *</type>
      <name>getFirstInterfaceNameChild</name>
      <anchorfile>classCompoundModuleElement.html</anchorfile>
      <anchor>a50d51eae003699fee4ac9a23c3e26d7b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParametersElement *</type>
      <name>getFirstParametersChild</name>
      <anchorfile>classCompoundModuleElement.html</anchorfile>
      <anchor>a568ae6d1e89d0274365458c513ae823e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GatesElement *</type>
      <name>getFirstGatesChild</name>
      <anchorfile>classCompoundModuleElement.html</anchorfile>
      <anchor>a28109cde3de11bb41b5aab434b5265e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TypesElement *</type>
      <name>getFirstTypesChild</name>
      <anchorfile>classCompoundModuleElement.html</anchorfile>
      <anchor>a8abbc665f1ce2239a951e3778869483f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SubmodulesElement *</type>
      <name>getFirstSubmodulesChild</name>
      <anchorfile>classCompoundModuleElement.html</anchorfile>
      <anchor>a8f8186935a390a9de4e173c0fa2cda91</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConnectionsElement *</type>
      <name>getFirstConnectionsChild</name>
      <anchorfile>classCompoundModuleElement.html</anchorfile>
      <anchor>af2300386e9a3fb1be4482a387e88061d</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConditionElement</name>
    <filename>classConditionElement.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>ConditionElement</name>
      <anchorfile>classConditionElement.html</anchorfile>
      <anchor>a4880e1a310aa77486ef8bad7572f1882</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConditionElement</name>
      <anchorfile>classConditionElement.html</anchorfile>
      <anchor>a1c63dc3747128deb48c55e3a027e23fb</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConditionElement</name>
      <anchorfile>classConditionElement.html</anchorfile>
      <anchor>acf2d77e5071d1ce01139107668ebc193</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classConditionElement.html</anchorfile>
      <anchor>ac8c88e295b33f22ec993bf3e4e1c4789</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classConditionElement.html</anchorfile>
      <anchor>a3b728150102ea951d6a68e4cff0d1472</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classConditionElement.html</anchorfile>
      <anchor>aadb5c10701c450357aa40680d83e37a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classConditionElement.html</anchorfile>
      <anchor>a92a2891f7f8eb4e4b34cef967ff02299</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classConditionElement.html</anchorfile>
      <anchor>a2e65eb9615e3434fc9ce2479257e9e80</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classConditionElement.html</anchorfile>
      <anchor>a29aff65e6f2bbcaa2bafabe274ce50e2</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classConditionElement.html</anchorfile>
      <anchor>aae9dab971a8252e6d6984558e8593549</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classConditionElement.html</anchorfile>
      <anchor>a246977901e88fe73f98f171dad5bc4b8</anchor>
      <arglist>(const char *name, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classConditionElement.html</anchorfile>
      <anchor>aa036f822e393edd32847d9a3f6979de8</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConditionElement *</type>
      <name>dup</name>
      <anchorfile>classConditionElement.html</anchorfile>
      <anchor>a1eb8b832c8bb21144d6a813b5203b740</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getCondition</name>
      <anchorfile>classConditionElement.html</anchorfile>
      <anchor>a1fd4fced735d57ba206ce054180ea78e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCondition</name>
      <anchorfile>classConditionElement.html</anchorfile>
      <anchor>af4cbc7e8a7fc8a12980d20bd111c0c1f</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConditionElement *</type>
      <name>getNextConditionSibling</name>
      <anchorfile>classConditionElement.html</anchorfile>
      <anchor>a04ad5a2af4aa4d1813df8895ec8976f5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CommentElement *</type>
      <name>getFirstCommentChild</name>
      <anchorfile>classConditionElement.html</anchorfile>
      <anchor>af06cb1b80d639ce4ceb2e3852a8a6bb1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ExpressionElement *</type>
      <name>getFirstExpressionChild</name>
      <anchorfile>classConditionElement.html</anchorfile>
      <anchor>abb7c28309f946fcbfb0d7c04a874d139</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConnectionElement</name>
    <filename>classConnectionElement.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>ConnectionElement</name>
      <anchorfile>classConnectionElement.html</anchorfile>
      <anchor>a4b7e0b040e49e4bf62253393a066189a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConnectionElement</name>
      <anchorfile>classConnectionElement.html</anchorfile>
      <anchor>a0c12195a6b3b2d01f1bca3f4acea5096</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConnectionElement</name>
      <anchorfile>classConnectionElement.html</anchorfile>
      <anchor>adc9b3607274f0b35aaa6e88318769f82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classConnectionElement.html</anchorfile>
      <anchor>a6d7c1acfd9611d2bd86789bd4b947ed7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classConnectionElement.html</anchorfile>
      <anchor>a23b170dcc89b9466e33b5aa5655c71c8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classConnectionElement.html</anchorfile>
      <anchor>a824821d7a73261c1e528a5518e29f8b4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classConnectionElement.html</anchorfile>
      <anchor>a1b20ed7000818d572c88bf0e5622755f</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classConnectionElement.html</anchorfile>
      <anchor>a6c063c19cdb89af55dd78fd9cf7fe971</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classConnectionElement.html</anchorfile>
      <anchor>ac2a51aada8b1581d26b274280d0a7d1d</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classConnectionElement.html</anchorfile>
      <anchor>ac0396eaedaa82c39ffc5f67e39c8531b</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classConnectionElement.html</anchorfile>
      <anchor>a5367f51b4eee4883b19fb5783acdc182</anchor>
      <arglist>(const char *name, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classConnectionElement.html</anchorfile>
      <anchor>a6e9a8b42baed64fe5918e98e91a5d5e5</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConnectionElement *</type>
      <name>dup</name>
      <anchorfile>classConnectionElement.html</anchorfile>
      <anchor>a2835e31056f8e4c76a76dbad66f2e8a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getSrcModule</name>
      <anchorfile>classConnectionElement.html</anchorfile>
      <anchor>aac95a4a44186b153fadd3ad2291e95e7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSrcModule</name>
      <anchorfile>classConnectionElement.html</anchorfile>
      <anchor>a2801bff2bc8688e78568af9996e12f71</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getSrcModuleIndex</name>
      <anchorfile>classConnectionElement.html</anchorfile>
      <anchor>a90f93dae2e759afd91aa94187e344601</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSrcModuleIndex</name>
      <anchorfile>classConnectionElement.html</anchorfile>
      <anchor>aba9b8ad9f98f3c4d09e332773a6220fc</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getSrcGate</name>
      <anchorfile>classConnectionElement.html</anchorfile>
      <anchor>af458de347930aa8f677345279c22e1c6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSrcGate</name>
      <anchorfile>classConnectionElement.html</anchorfile>
      <anchor>a676ef8dae946339ae3700173cb945250</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getSrcGatePlusplus</name>
      <anchorfile>classConnectionElement.html</anchorfile>
      <anchor>a86308395eee04083150efcf294fc99cb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSrcGatePlusplus</name>
      <anchorfile>classConnectionElement.html</anchorfile>
      <anchor>a68d351986bcfd4558c8400f69ec547f3</anchor>
      <arglist>(bool val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getSrcGateIndex</name>
      <anchorfile>classConnectionElement.html</anchorfile>
      <anchor>a91a961baf347a9c2f9345ab5d5cc8ceb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSrcGateIndex</name>
      <anchorfile>classConnectionElement.html</anchorfile>
      <anchor>a776ebc8b4bcda2abb946c180a6b98cb1</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSrcGateSubg</name>
      <anchorfile>classConnectionElement.html</anchorfile>
      <anchor>a339ede4ee478c47cf2485b808718be62</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSrcGateSubg</name>
      <anchorfile>classConnectionElement.html</anchorfile>
      <anchor>ab4f9e39e87259e4ff178294f3907f8a3</anchor>
      <arglist>(int val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getDestModule</name>
      <anchorfile>classConnectionElement.html</anchorfile>
      <anchor>a5258b9f740b38dc399b7106d7a9773a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDestModule</name>
      <anchorfile>classConnectionElement.html</anchorfile>
      <anchor>a3ef213a140d37d1a8d5b868d643ab151</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getDestModuleIndex</name>
      <anchorfile>classConnectionElement.html</anchorfile>
      <anchor>ad3ab6aaec9fb86b48eea19db8ac4888d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDestModuleIndex</name>
      <anchorfile>classConnectionElement.html</anchorfile>
      <anchor>a614d288ee35880772da4113a0eb69fe6</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getDestGate</name>
      <anchorfile>classConnectionElement.html</anchorfile>
      <anchor>a1de2353f0ac36eecd7175c1f344e4aad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDestGate</name>
      <anchorfile>classConnectionElement.html</anchorfile>
      <anchor>af222ecca66a99155f0ce757f99ae1a51</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getDestGatePlusplus</name>
      <anchorfile>classConnectionElement.html</anchorfile>
      <anchor>a4b61cc72dc9dded55bbc8c4a62775a12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDestGatePlusplus</name>
      <anchorfile>classConnectionElement.html</anchorfile>
      <anchor>aa58741913045f245d676b857bf84345e</anchor>
      <arglist>(bool val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getDestGateIndex</name>
      <anchorfile>classConnectionElement.html</anchorfile>
      <anchor>aa0580b95319825b14dbde1e5e7cd9b5c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDestGateIndex</name>
      <anchorfile>classConnectionElement.html</anchorfile>
      <anchor>a6f2da04e738ae6ad0c0dd8f40797d9b5</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDestGateSubg</name>
      <anchorfile>classConnectionElement.html</anchorfile>
      <anchor>abd39f0ecd50eba10e785554264e50a0a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDestGateSubg</name>
      <anchorfile>classConnectionElement.html</anchorfile>
      <anchor>aae97a93bf090f884bb37cf76c6cd4306</anchor>
      <arglist>(int val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classConnectionElement.html</anchorfile>
      <anchor>a1514496c221f8af511373a1f9f242aa2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classConnectionElement.html</anchorfile>
      <anchor>a6cc428110447b4d3fd8dd68261fbd2f3</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getType</name>
      <anchorfile>classConnectionElement.html</anchorfile>
      <anchor>aec1a889b1e9ebdbeab1968b96c5a1d9a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setType</name>
      <anchorfile>classConnectionElement.html</anchorfile>
      <anchor>a3da03138eaa8358d052cf738eec16e00</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getLikeType</name>
      <anchorfile>classConnectionElement.html</anchorfile>
      <anchor>a280fe0540f978adf4f6ef7451b9bc1c6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLikeType</name>
      <anchorfile>classConnectionElement.html</anchorfile>
      <anchor>a4dbe54570c0d4d5ff883330161a556fd</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getLikeExpr</name>
      <anchorfile>classConnectionElement.html</anchorfile>
      <anchor>ab62d6cf7bdb553dda2fa79960f5dff84</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLikeExpr</name>
      <anchorfile>classConnectionElement.html</anchorfile>
      <anchor>a3a4c3e99ab4db36643564549915f9b54</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getIsDefault</name>
      <anchorfile>classConnectionElement.html</anchorfile>
      <anchor>aa96562c64d15ede8c53a804b07af72aa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIsDefault</name>
      <anchorfile>classConnectionElement.html</anchorfile>
      <anchor>a169f8dbb0d4be19a72684fbc87cf394e</anchor>
      <arglist>(bool val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getIsBidirectional</name>
      <anchorfile>classConnectionElement.html</anchorfile>
      <anchor>a7431d421381383d003c23ff07ee7bb84</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIsBidirectional</name>
      <anchorfile>classConnectionElement.html</anchorfile>
      <anchor>a2005db5f20c1fd1984904a09453cf26d</anchor>
      <arglist>(bool val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getIsForwardArrow</name>
      <anchorfile>classConnectionElement.html</anchorfile>
      <anchor>a1055028ebe49737aa8c79f293334d0f0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIsForwardArrow</name>
      <anchorfile>classConnectionElement.html</anchorfile>
      <anchor>a0b97792c2110d96b3f8947654fc0cda6</anchor>
      <arglist>(bool val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConnectionElement *</type>
      <name>getNextConnectionSibling</name>
      <anchorfile>classConnectionElement.html</anchorfile>
      <anchor>a3ffd21fb7de0b5555cde526edadccf76</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CommentElement *</type>
      <name>getFirstCommentChild</name>
      <anchorfile>classConnectionElement.html</anchorfile>
      <anchor>ae8b0c3f6f2d4c0fdca6ba5da873607ea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ExpressionElement *</type>
      <name>getFirstExpressionChild</name>
      <anchorfile>classConnectionElement.html</anchorfile>
      <anchor>a0756b7252f3bbebb20a32d5320737e51</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParametersElement *</type>
      <name>getFirstParametersChild</name>
      <anchorfile>classConnectionElement.html</anchorfile>
      <anchor>ade60ee137924e896f56246cdd71df885</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual LoopElement *</type>
      <name>getFirstLoopChild</name>
      <anchorfile>classConnectionElement.html</anchorfile>
      <anchor>a38093e49eb7479de933c686bc9dc6cc6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConditionElement *</type>
      <name>getFirstConditionChild</name>
      <anchorfile>classConnectionElement.html</anchorfile>
      <anchor>a3a23908355324561b0998f5f94727865</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConnectionGroupElement</name>
    <filename>classConnectionGroupElement.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>ConnectionGroupElement</name>
      <anchorfile>classConnectionGroupElement.html</anchorfile>
      <anchor>aeb27d0daa8f671441318e6066bd5a1d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConnectionGroupElement</name>
      <anchorfile>classConnectionGroupElement.html</anchorfile>
      <anchor>a5b7ad4b72be2885d79505da9f44abac3</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConnectionGroupElement</name>
      <anchorfile>classConnectionGroupElement.html</anchorfile>
      <anchor>a190d5c9e331489a406e7a657e3b5ea5a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classConnectionGroupElement.html</anchorfile>
      <anchor>ac878c3091fd0e41f96fbd92595bb93fd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classConnectionGroupElement.html</anchorfile>
      <anchor>aa9edee09c85e2f4c857ab381b710ca3f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classConnectionGroupElement.html</anchorfile>
      <anchor>acc4ad7f8fe63114b4ea5d4ed87d7d472</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classConnectionGroupElement.html</anchorfile>
      <anchor>afb0f068012cee3c8b50c8f4fbb129ab6</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classConnectionGroupElement.html</anchorfile>
      <anchor>a63923fa544225ec3f82a091817233ca4</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classConnectionGroupElement.html</anchorfile>
      <anchor>a0bbbebf73bc381a4679eb1b44dbddcdb</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classConnectionGroupElement.html</anchorfile>
      <anchor>ab8b4a00cf0dc11155b1648efae4ec8f5</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classConnectionGroupElement.html</anchorfile>
      <anchor>a72b24a3de36c15f997dfc239371e4ffc</anchor>
      <arglist>(const char *name, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classConnectionGroupElement.html</anchorfile>
      <anchor>a3506fa6746932810bfd0682898b517f8</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConnectionGroupElement *</type>
      <name>dup</name>
      <anchorfile>classConnectionGroupElement.html</anchorfile>
      <anchor>a789144850a36336a498e904d237772b6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConnectionGroupElement *</type>
      <name>getNextConnectionGroupSibling</name>
      <anchorfile>classConnectionGroupElement.html</anchorfile>
      <anchor>af49b8baae6af0b25f2724c3b387694f4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CommentElement *</type>
      <name>getFirstCommentChild</name>
      <anchorfile>classConnectionGroupElement.html</anchorfile>
      <anchor>aabc808753a7a91ea0fea1a68d96191e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual LoopElement *</type>
      <name>getFirstLoopChild</name>
      <anchorfile>classConnectionGroupElement.html</anchorfile>
      <anchor>a475d433497df36276c238e58bbb2a159</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConditionElement *</type>
      <name>getFirstConditionChild</name>
      <anchorfile>classConnectionGroupElement.html</anchorfile>
      <anchor>a32ed858f50ec6199b48dd88823bb36f5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConnectionElement *</type>
      <name>getFirstConnectionChild</name>
      <anchorfile>classConnectionGroupElement.html</anchorfile>
      <anchor>a1289abbbd98968a7ab92ff2cb7e0bf7b</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConnectionsElement</name>
    <filename>classConnectionsElement.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>ConnectionsElement</name>
      <anchorfile>classConnectionsElement.html</anchorfile>
      <anchor>a8e0537b9c5e4370765a8e9bde9b1d005</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConnectionsElement</name>
      <anchorfile>classConnectionsElement.html</anchorfile>
      <anchor>a33671f33c34c5130dceabefa8339c7b6</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConnectionsElement</name>
      <anchorfile>classConnectionsElement.html</anchorfile>
      <anchor>ace7d1934573a3cf9f5c0d09c2e8c375e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classConnectionsElement.html</anchorfile>
      <anchor>a68e1c440d5e6d3f50ba0af850edb0886</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classConnectionsElement.html</anchorfile>
      <anchor>a811b7c88576c2119917789561fe67916</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classConnectionsElement.html</anchorfile>
      <anchor>a4b9f0fa59d0de24b64ecbab0eb57975e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classConnectionsElement.html</anchorfile>
      <anchor>a9e3c0ef3ad4fca7861826d275872e4bd</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classConnectionsElement.html</anchorfile>
      <anchor>a8860deed5be3d4a0057dd9f701a9897b</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classConnectionsElement.html</anchorfile>
      <anchor>a6f067ce8e1e82c19aec5bbc6e2c3a689</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classConnectionsElement.html</anchorfile>
      <anchor>aed1b148b88f06b9c5c3f055670226f5e</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classConnectionsElement.html</anchorfile>
      <anchor>a6ad586c6ca6cefc83cc62c0d727c00ce</anchor>
      <arglist>(const char *name, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classConnectionsElement.html</anchorfile>
      <anchor>a0ba0680a89538c4b9d1e7254591808a4</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConnectionsElement *</type>
      <name>dup</name>
      <anchorfile>classConnectionsElement.html</anchorfile>
      <anchor>a6e85619289b5873395ef87ce620167c8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getAllowUnconnected</name>
      <anchorfile>classConnectionsElement.html</anchorfile>
      <anchor>a1472f5d66a1ad896376922a4257fe0de</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAllowUnconnected</name>
      <anchorfile>classConnectionsElement.html</anchorfile>
      <anchor>a37d71f4430a08af15e80b0c41eeac6a0</anchor>
      <arglist>(bool val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConnectionsElement *</type>
      <name>getNextConnectionsSibling</name>
      <anchorfile>classConnectionsElement.html</anchorfile>
      <anchor>a5297f691812cab1460f182a9f7123271</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CommentElement *</type>
      <name>getFirstCommentChild</name>
      <anchorfile>classConnectionsElement.html</anchorfile>
      <anchor>af213a81e2d06ff1f670f36805a62e90d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConnectionElement *</type>
      <name>getFirstConnectionChild</name>
      <anchorfile>classConnectionsElement.html</anchorfile>
      <anchor>a8fbab28daf63b265b68b800b7afbd0df</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConnectionGroupElement *</type>
      <name>getFirstConnectionGroupChild</name>
      <anchorfile>classConnectionsElement.html</anchorfile>
      <anchor>a44e09d4ee59a4e07ca18770e2520bf2a</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CplusplusElement</name>
    <filename>classCplusplusElement.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>CplusplusElement</name>
      <anchorfile>classCplusplusElement.html</anchorfile>
      <anchor>af07bc30f94f4ef37cf7d37c8d65bd329</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CplusplusElement</name>
      <anchorfile>classCplusplusElement.html</anchorfile>
      <anchor>a7a0564f83df3f1ec354cdd2ea93ac63b</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CplusplusElement</name>
      <anchorfile>classCplusplusElement.html</anchorfile>
      <anchor>af495b7121a8957488616cf300fe84f7e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classCplusplusElement.html</anchorfile>
      <anchor>afa7d5fff5a4a00b16b9e78a7ab04cb53</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classCplusplusElement.html</anchorfile>
      <anchor>a000d500ed2b57fccc992939f2c78fa63</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classCplusplusElement.html</anchorfile>
      <anchor>ab5cf58f8ac0158e232e00dfa37b03de0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classCplusplusElement.html</anchorfile>
      <anchor>ad850ae26da0f04367dd2a40f35d2088c</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classCplusplusElement.html</anchorfile>
      <anchor>a530073f97274f49115d14ad7955e5ede</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classCplusplusElement.html</anchorfile>
      <anchor>afece3125cf07a89bff3c5ed438577c97</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classCplusplusElement.html</anchorfile>
      <anchor>a9d9294d51d2a4511df350f0a27295176</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classCplusplusElement.html</anchorfile>
      <anchor>a539230518b6060ef04fe8490d2e9c350</anchor>
      <arglist>(const char *name, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classCplusplusElement.html</anchorfile>
      <anchor>ac0d5a0cc45da87d10db0c10b338d8745</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CplusplusElement *</type>
      <name>dup</name>
      <anchorfile>classCplusplusElement.html</anchorfile>
      <anchor>ae03cf62b903fc26e4ffa179ba42788b2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getBody</name>
      <anchorfile>classCplusplusElement.html</anchorfile>
      <anchor>ae78b17dce829fe3db70c421c0639a631</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBody</name>
      <anchorfile>classCplusplusElement.html</anchorfile>
      <anchor>a443dc7f224477b0227eb8ad4a7a11aea</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CplusplusElement *</type>
      <name>getNextCplusplusSibling</name>
      <anchorfile>classCplusplusElement.html</anchorfile>
      <anchor>adb4098490544f3dc531144741357cf45</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CommentElement *</type>
      <name>getFirstCommentChild</name>
      <anchorfile>classCplusplusElement.html</anchorfile>
      <anchor>a38a62daa47eeed95ace72500236b8af9</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DisplayStringUtil</name>
    <filename>classDisplayStringUtil.html</filename>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>upgradeBackgroundDisplayString</name>
      <anchorfile>classDisplayStringUtil.html</anchorfile>
      <anchor>a71a638782d9f695675ed325409c78fc9</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>upgradeSubmoduleDisplayString</name>
      <anchorfile>classDisplayStringUtil.html</anchorfile>
      <anchor>a16b0373d74b5dfa18ec257078ce51647</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>upgradeConnectionDisplayString</name>
      <anchorfile>classDisplayStringUtil.html</anchorfile>
      <anchor>a734c78f6b5c00ced1b0f3c3a049d40b1</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>toOldBackgroundDisplayString</name>
      <anchorfile>classDisplayStringUtil.html</anchorfile>
      <anchor>ad90fc48106b7145be451d792cb535656</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>toOldSubmoduleDisplayString</name>
      <anchorfile>classDisplayStringUtil.html</anchorfile>
      <anchor>a470632a8d2590fa03f217752e2d333df</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>toOldConnectionDisplayString</name>
      <anchorfile>classDisplayStringUtil.html</anchorfile>
      <anchor>a61011675aeedd39f67ea42bc4bc4ce0f</anchor>
      <arglist>(const char *s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EnumDeclElement</name>
    <filename>classEnumDeclElement.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>EnumDeclElement</name>
      <anchorfile>classEnumDeclElement.html</anchorfile>
      <anchor>a6aa90daa886df1693372b19206722e25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EnumDeclElement</name>
      <anchorfile>classEnumDeclElement.html</anchorfile>
      <anchor>a40fa9670b6ae91d1949b171f3aa6f5ea</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EnumDeclElement</name>
      <anchorfile>classEnumDeclElement.html</anchorfile>
      <anchor>aedba6438f03e480954d3e74cc4e5a32e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classEnumDeclElement.html</anchorfile>
      <anchor>ab31fe5bfc05a5e081f14cb422355f318</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classEnumDeclElement.html</anchorfile>
      <anchor>a08e107ca7094427a297be5c93a42ec88</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classEnumDeclElement.html</anchorfile>
      <anchor>a06abece116a8ecdf7f1608c4933088c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classEnumDeclElement.html</anchorfile>
      <anchor>a95e13ba9cd24c450486e0ab6f93cc90a</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classEnumDeclElement.html</anchorfile>
      <anchor>aacec0b9eff329c059b6cef76c03241b2</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classEnumDeclElement.html</anchorfile>
      <anchor>a46fb35c43fba89c6ed31b953fad18a8f</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classEnumDeclElement.html</anchorfile>
      <anchor>ac4b7b54f0dce28077d4657d68587de1c</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classEnumDeclElement.html</anchorfile>
      <anchor>aa4366eee84df9d5061e3f6b361e1b588</anchor>
      <arglist>(const char *name, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classEnumDeclElement.html</anchorfile>
      <anchor>aeb2041dec0c40a62a8192d94eb98a27c</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual EnumDeclElement *</type>
      <name>dup</name>
      <anchorfile>classEnumDeclElement.html</anchorfile>
      <anchor>a1f4aaf89c7092a141642ffb4c0da4468</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classEnumDeclElement.html</anchorfile>
      <anchor>abcc8a7bbb5aff208370d15236883528e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classEnumDeclElement.html</anchorfile>
      <anchor>a3164ab8dea44c680988f2c4e6b646302</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual EnumDeclElement *</type>
      <name>getNextEnumDeclSibling</name>
      <anchorfile>classEnumDeclElement.html</anchorfile>
      <anchor>a7f0befa5c17a5e2d3edba01c2679b7c9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CommentElement *</type>
      <name>getFirstCommentChild</name>
      <anchorfile>classEnumDeclElement.html</anchorfile>
      <anchor>a193c3d3231169c58b9e0fd3f32e62769</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EnumElement</name>
    <filename>classEnumElement.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>EnumElement</name>
      <anchorfile>classEnumElement.html</anchorfile>
      <anchor>ac1ac0e4281857b48f4e6ebb9da998dca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EnumElement</name>
      <anchorfile>classEnumElement.html</anchorfile>
      <anchor>a57a002d7b347ee107956a149ef40d8f8</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EnumElement</name>
      <anchorfile>classEnumElement.html</anchorfile>
      <anchor>ad8c8704c1a251e3891babebd3e889900</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classEnumElement.html</anchorfile>
      <anchor>a71b45792b9391664f68952971910f36b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classEnumElement.html</anchorfile>
      <anchor>a5ef25ca29a9777b94214876ea90f67b3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classEnumElement.html</anchorfile>
      <anchor>ad478cb1ff421737cce6651f7868d324a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classEnumElement.html</anchorfile>
      <anchor>ae2a8b669ac4a4b2edff09692a1689cc8</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classEnumElement.html</anchorfile>
      <anchor>ae1e04db160b935166347ba8a4c80aa52</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classEnumElement.html</anchorfile>
      <anchor>a220baec425e2b6fd52534a957b810510</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classEnumElement.html</anchorfile>
      <anchor>a72f50be9993c9da37a4b32276174ca0f</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classEnumElement.html</anchorfile>
      <anchor>a1301cc0b73974b14c0b43deb29d5604e</anchor>
      <arglist>(const char *name, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classEnumElement.html</anchorfile>
      <anchor>ac523c32fcc609a27bf2fb0c8cfde4e0d</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual EnumElement *</type>
      <name>dup</name>
      <anchorfile>classEnumElement.html</anchorfile>
      <anchor>a1d8dcd9a75d08a340bd2478e678be822</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classEnumElement.html</anchorfile>
      <anchor>a69b4d60fb63a5e9345cd668e3c6059c7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classEnumElement.html</anchorfile>
      <anchor>a26294bf068f1f3743b50c228e36b02b3</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getExtendsName</name>
      <anchorfile>classEnumElement.html</anchorfile>
      <anchor>a03f45b5f34bc353927e08892ba3aabb0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExtendsName</name>
      <anchorfile>classEnumElement.html</anchorfile>
      <anchor>ad3fa69e9dff36ff92bacf241594034fe</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getSourceCode</name>
      <anchorfile>classEnumElement.html</anchorfile>
      <anchor>ad42c626e5cea20d32155fa85678e1838</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSourceCode</name>
      <anchorfile>classEnumElement.html</anchorfile>
      <anchor>a257410cead9a47da5154e311c5a986bd</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual EnumElement *</type>
      <name>getNextEnumSibling</name>
      <anchorfile>classEnumElement.html</anchorfile>
      <anchor>a83498086dd64fac82c9f2582bc1b3710</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CommentElement *</type>
      <name>getFirstCommentChild</name>
      <anchorfile>classEnumElement.html</anchorfile>
      <anchor>a065bec1536f4ba2f051095e1ad1fc43c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual EnumFieldsElement *</type>
      <name>getFirstEnumFieldsChild</name>
      <anchorfile>classEnumElement.html</anchorfile>
      <anchor>a7255c5db93714e09d20ccf49c03c9976</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EnumFieldElement</name>
    <filename>classEnumFieldElement.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>EnumFieldElement</name>
      <anchorfile>classEnumFieldElement.html</anchorfile>
      <anchor>a9f2930efa498928e88890411b29f61f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EnumFieldElement</name>
      <anchorfile>classEnumFieldElement.html</anchorfile>
      <anchor>a62779cb0147edec2f9f51612f9b9034c</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EnumFieldElement</name>
      <anchorfile>classEnumFieldElement.html</anchorfile>
      <anchor>abfffe6d11222a52a6fd0d883a44ee067</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classEnumFieldElement.html</anchorfile>
      <anchor>a47c8a228219a0afcdf5acd0953c313c8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classEnumFieldElement.html</anchorfile>
      <anchor>ae30a7baffcade6f428f9941f85ffede3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classEnumFieldElement.html</anchorfile>
      <anchor>a8f33d8c4a477c0be2658fe45527bc296</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classEnumFieldElement.html</anchorfile>
      <anchor>a84f3e2582668bdb4ef7370705ffd07c5</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classEnumFieldElement.html</anchorfile>
      <anchor>a0679cb996c894d8d9aabb31677f29d79</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classEnumFieldElement.html</anchorfile>
      <anchor>a872bf4dae442ff53745036b4f251896e</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classEnumFieldElement.html</anchorfile>
      <anchor>ab9ecbf40f3e1afe8f84793e20e30ac34</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classEnumFieldElement.html</anchorfile>
      <anchor>a1f4a5d3505bb0c5e28039c93309c2def</anchor>
      <arglist>(const char *name, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classEnumFieldElement.html</anchorfile>
      <anchor>af85b14784214893eb732fc90ddfcba19</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual EnumFieldElement *</type>
      <name>dup</name>
      <anchorfile>classEnumFieldElement.html</anchorfile>
      <anchor>ad5223199ec418ce2ad5d2482adb6469f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classEnumFieldElement.html</anchorfile>
      <anchor>a9d7805cb1684ffc5c8a115ba2c77e2a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classEnumFieldElement.html</anchorfile>
      <anchor>a63b129161898029de0667f09df68ff82</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getValue</name>
      <anchorfile>classEnumFieldElement.html</anchorfile>
      <anchor>aa9968d0d6b5b3fc274e6a4c9a767b8eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classEnumFieldElement.html</anchorfile>
      <anchor>a5b4fb47ad7851c49f1dc20954c7bcacd</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual EnumFieldElement *</type>
      <name>getNextEnumFieldSibling</name>
      <anchorfile>classEnumFieldElement.html</anchorfile>
      <anchor>a6b9688e56a73f6a0d310dc665aaa5e58</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CommentElement *</type>
      <name>getFirstCommentChild</name>
      <anchorfile>classEnumFieldElement.html</anchorfile>
      <anchor>a9e52ffa29dadd8bd3d078e078994ae0b</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EnumFieldsElement</name>
    <filename>classEnumFieldsElement.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>EnumFieldsElement</name>
      <anchorfile>classEnumFieldsElement.html</anchorfile>
      <anchor>a6ee6f2a53f77ddf7c8cb79c979e8a8b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EnumFieldsElement</name>
      <anchorfile>classEnumFieldsElement.html</anchorfile>
      <anchor>a67c53c2c9c25ed0f42432e1647eeacf7</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EnumFieldsElement</name>
      <anchorfile>classEnumFieldsElement.html</anchorfile>
      <anchor>a03bbda255f8a3d122b1a4007b5419c0e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classEnumFieldsElement.html</anchorfile>
      <anchor>af74e12431f77a98b63ebd355c2ad1a4b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classEnumFieldsElement.html</anchorfile>
      <anchor>a362b35fc76eb056e960cf0df3fc226d8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classEnumFieldsElement.html</anchorfile>
      <anchor>a1fd015c7036777c62ce7afac6d447ac9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classEnumFieldsElement.html</anchorfile>
      <anchor>a4bd27ed88c66d07635024b87eb0110ef</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classEnumFieldsElement.html</anchorfile>
      <anchor>a296fe3780b6a09d92be88d2d21b14351</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classEnumFieldsElement.html</anchorfile>
      <anchor>a1f385b4dcb06aab3d3550201b06beb1a</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classEnumFieldsElement.html</anchorfile>
      <anchor>a854aba489b590595c670570351a62489</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classEnumFieldsElement.html</anchorfile>
      <anchor>af2677358a56e071c64d003d5de5c4224</anchor>
      <arglist>(const char *name, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classEnumFieldsElement.html</anchorfile>
      <anchor>a0486b0ac6038346d3d8d4ae8c53c85ed</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual EnumFieldsElement *</type>
      <name>dup</name>
      <anchorfile>classEnumFieldsElement.html</anchorfile>
      <anchor>a29360fd62cee3468222f5cdc1be0e846</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual EnumFieldsElement *</type>
      <name>getNextEnumFieldsSibling</name>
      <anchorfile>classEnumFieldsElement.html</anchorfile>
      <anchor>ab4d9d67e395d37b664db10c3da6b8ef9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CommentElement *</type>
      <name>getFirstCommentChild</name>
      <anchorfile>classEnumFieldsElement.html</anchorfile>
      <anchor>a26c8984dea25800c0217e69d503b39e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual EnumFieldElement *</type>
      <name>getFirstEnumFieldChild</name>
      <anchorfile>classEnumFieldsElement.html</anchorfile>
      <anchor>a77629f152619c0d16677b8238cf66374</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ExpressionElement</name>
    <filename>classExpressionElement.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>ExpressionElement</name>
      <anchorfile>classExpressionElement.html</anchorfile>
      <anchor>a381df7183580149e05a7660488cfa1af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ExpressionElement</name>
      <anchorfile>classExpressionElement.html</anchorfile>
      <anchor>a1ad6979434a17b9f82a9e5525e70fed9</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ExpressionElement</name>
      <anchorfile>classExpressionElement.html</anchorfile>
      <anchor>a57a3bb78294c32b40b1f003a5bf15470</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classExpressionElement.html</anchorfile>
      <anchor>ac86ad038c431a1850b92b45093e7bb1c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classExpressionElement.html</anchorfile>
      <anchor>a847e31b2c7bdf824083a6b59bada3b42</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classExpressionElement.html</anchorfile>
      <anchor>acef3da490a3268a7f2630de241607734</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classExpressionElement.html</anchorfile>
      <anchor>a43cba11dfa7b578f2438873af5a7e36f</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classExpressionElement.html</anchorfile>
      <anchor>a9d29fafbe0e4ca7ba3b89e11879db703</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classExpressionElement.html</anchorfile>
      <anchor>ade2d4650fc7640ca01fa7126ca32c503</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classExpressionElement.html</anchorfile>
      <anchor>ad48d7321c5683ab40a043d0fb3d04dbc</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classExpressionElement.html</anchorfile>
      <anchor>a40dec4c923b3cb2879650450f14e855c</anchor>
      <arglist>(const char *name, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classExpressionElement.html</anchorfile>
      <anchor>a9347d224495fb354d2d935e5a9500992</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ExpressionElement *</type>
      <name>dup</name>
      <anchorfile>classExpressionElement.html</anchorfile>
      <anchor>ad3907606854f5f84dd7339a26d49abaa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getTarget</name>
      <anchorfile>classExpressionElement.html</anchorfile>
      <anchor>a505178eac02b3b740c71aecad4f2913d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTarget</name>
      <anchorfile>classExpressionElement.html</anchorfile>
      <anchor>aa9ab3166223f4a480bdbef9d649fb5aa</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ExpressionElement *</type>
      <name>getNextExpressionSibling</name>
      <anchorfile>classExpressionElement.html</anchorfile>
      <anchor>a3096a9c49eb3e5697a79c4ccec260a21</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CommentElement *</type>
      <name>getFirstCommentChild</name>
      <anchorfile>classExpressionElement.html</anchorfile>
      <anchor>a9a9ac2e88001a76ddec0c9cd76252088</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OperatorElement *</type>
      <name>getFirstOperatorChild</name>
      <anchorfile>classExpressionElement.html</anchorfile>
      <anchor>a1fa4b27912c3ea27be0dce71089db9c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FunctionElement *</type>
      <name>getFirstFunctionChild</name>
      <anchorfile>classExpressionElement.html</anchorfile>
      <anchor>acb19e4b9842d8d61028782df51ddb631</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IdentElement *</type>
      <name>getFirstIdentChild</name>
      <anchorfile>classExpressionElement.html</anchorfile>
      <anchor>a9d619a4ef4c4067aa6241174d92358be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual LiteralElement *</type>
      <name>getFirstLiteralChild</name>
      <anchorfile>classExpressionElement.html</anchorfile>
      <anchor>a62f0cfcf9a8be77a195bf3f965bfd4b1</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ExtendsElement</name>
    <filename>classExtendsElement.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>ExtendsElement</name>
      <anchorfile>classExtendsElement.html</anchorfile>
      <anchor>a8b712fcb14bbee5d30deb220bf9e80dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ExtendsElement</name>
      <anchorfile>classExtendsElement.html</anchorfile>
      <anchor>a0d6b86ad940a4a2b6eaed4422d306300</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ExtendsElement</name>
      <anchorfile>classExtendsElement.html</anchorfile>
      <anchor>a2f2cc6f20863cac666e8972264d2a0ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classExtendsElement.html</anchorfile>
      <anchor>ade0f6266abf10adfaa0f7edaa6d082e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classExtendsElement.html</anchorfile>
      <anchor>a8801b866d7a7b8118c37ea47b2854468</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classExtendsElement.html</anchorfile>
      <anchor>a5dec70e94a0adc2dc272069a4d69f048</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classExtendsElement.html</anchorfile>
      <anchor>ad37a56e70dd476d4180d7ff9ba3dcfa5</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classExtendsElement.html</anchorfile>
      <anchor>a4509684e2a29bd8ef343f954ba453ee9</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classExtendsElement.html</anchorfile>
      <anchor>ae4b56f35af76cb2474962c43a69ff4be</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classExtendsElement.html</anchorfile>
      <anchor>a16ac3d8dbf22440bc072e0193928b203</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classExtendsElement.html</anchorfile>
      <anchor>a53d79165b300ca918551a02897d021a7</anchor>
      <arglist>(const char *name, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classExtendsElement.html</anchorfile>
      <anchor>ae14375b1a100b725039714c9042634b4</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ExtendsElement *</type>
      <name>dup</name>
      <anchorfile>classExtendsElement.html</anchorfile>
      <anchor>a80facbc41e8fd70c28206bc69ab96217</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classExtendsElement.html</anchorfile>
      <anchor>a96714e5e3d0615dc37c7d7dfd38ee1a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classExtendsElement.html</anchorfile>
      <anchor>ae5c3048c3b53636633d9146070476097</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ExtendsElement *</type>
      <name>getNextExtendsSibling</name>
      <anchorfile>classExtendsElement.html</anchorfile>
      <anchor>afe5556c04e6334b748ceb1cb03da2e6a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CommentElement *</type>
      <name>getFirstCommentChild</name>
      <anchorfile>classExtendsElement.html</anchorfile>
      <anchor>a92e1d817095df3448d5be284e3e5846c</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FieldElement</name>
    <filename>classFieldElement.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>FieldElement</name>
      <anchorfile>classFieldElement.html</anchorfile>
      <anchor>a8826f9472c8885956b5930c937206b5c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FieldElement</name>
      <anchorfile>classFieldElement.html</anchorfile>
      <anchor>a56e6d8d612f70a1f00c0b71705bf0591</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FieldElement</name>
      <anchorfile>classFieldElement.html</anchorfile>
      <anchor>ad1921cdb9469f4661d40590c25d339a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classFieldElement.html</anchorfile>
      <anchor>a353cf4c98d8f1d5c62e287369efc653e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classFieldElement.html</anchorfile>
      <anchor>a346fa3f52aed269655c706b5a670cf01</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classFieldElement.html</anchorfile>
      <anchor>a4aa2c6af8a5fdc75e766a67a276e7ea7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classFieldElement.html</anchorfile>
      <anchor>a3cfe9380cac03118914dbd372e05f7bb</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classFieldElement.html</anchorfile>
      <anchor>af9a6fa51ee8f268b37494f1a16dbd851</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classFieldElement.html</anchorfile>
      <anchor>a7c8789f5cfc7b24c0e6e3892008ef364</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classFieldElement.html</anchorfile>
      <anchor>afedb6b369522c183931b4c9df40491a5</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classFieldElement.html</anchorfile>
      <anchor>ac3a987d915f5595c9813ae74a692ce33</anchor>
      <arglist>(const char *name, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classFieldElement.html</anchorfile>
      <anchor>ad28bb7ec9919ecc4b569b20805a0d20c</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FieldElement *</type>
      <name>dup</name>
      <anchorfile>classFieldElement.html</anchorfile>
      <anchor>af6d86fa45e398593bc8709e5e7d9cbd7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classFieldElement.html</anchorfile>
      <anchor>a98c440c64c6e30e7ff1ee1ec88cc074c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classFieldElement.html</anchorfile>
      <anchor>a5fa347a7ddf8bf71d0768ea95cb5dbe1</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getDataType</name>
      <anchorfile>classFieldElement.html</anchorfile>
      <anchor>a5f622a825c7c4ad633ce18aee5546ee0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDataType</name>
      <anchorfile>classFieldElement.html</anchorfile>
      <anchor>a7be1cbf2f1e310f81ad7753b81da103b</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getIsAbstract</name>
      <anchorfile>classFieldElement.html</anchorfile>
      <anchor>a023e86a19b72371d7a198dfc09fe8ec7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIsAbstract</name>
      <anchorfile>classFieldElement.html</anchorfile>
      <anchor>a471f006dd73118ad38380b45ee80dfb9</anchor>
      <arglist>(bool val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getIsReadonly</name>
      <anchorfile>classFieldElement.html</anchorfile>
      <anchor>ac1c93c70a76b8ae0254c357edf3b117b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIsReadonly</name>
      <anchorfile>classFieldElement.html</anchorfile>
      <anchor>a3bc9c077e6b467b04cea4cf2bd57dc7c</anchor>
      <arglist>(bool val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getIsVector</name>
      <anchorfile>classFieldElement.html</anchorfile>
      <anchor>ac04b2f105726fb6cd5f32b070dc89adc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIsVector</name>
      <anchorfile>classFieldElement.html</anchorfile>
      <anchor>aa5961d2ec8f14014af3cd553b5104572</anchor>
      <arglist>(bool val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getVectorSize</name>
      <anchorfile>classFieldElement.html</anchorfile>
      <anchor>ae2b742446affd3fc3c2a87edd5612cad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVectorSize</name>
      <anchorfile>classFieldElement.html</anchorfile>
      <anchor>a33a4edfc781254df99fb00041fc77cd1</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getDefaultValue</name>
      <anchorfile>classFieldElement.html</anchorfile>
      <anchor>a3a9d43822a52e3acb7170b528afff1d3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultValue</name>
      <anchorfile>classFieldElement.html</anchorfile>
      <anchor>abfea536f37edcaea26b739c8d7620ec9</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FieldElement *</type>
      <name>getNextFieldSibling</name>
      <anchorfile>classFieldElement.html</anchorfile>
      <anchor>a78e87b6777c7843b8814166073f1c9ba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CommentElement *</type>
      <name>getFirstCommentChild</name>
      <anchorfile>classFieldElement.html</anchorfile>
      <anchor>a5869ec7e866b845e7c0142396b417bcc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PropertyElement *</type>
      <name>getFirstPropertyChild</name>
      <anchorfile>classFieldElement.html</anchorfile>
      <anchor>ae29cff9a7544b1e940e32e41d616a4fc</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FilesElement</name>
    <filename>classFilesElement.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>FilesElement</name>
      <anchorfile>classFilesElement.html</anchorfile>
      <anchor>aee3d2c32e45f1a676bcff98155066a2f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FilesElement</name>
      <anchorfile>classFilesElement.html</anchorfile>
      <anchor>ad60b6da57cc56d013243eaa6692249e1</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FilesElement</name>
      <anchorfile>classFilesElement.html</anchorfile>
      <anchor>ae3b754348a292532c0bc96c1c92325a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classFilesElement.html</anchorfile>
      <anchor>a18ae7bbc87c821025925aba19d8575de</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classFilesElement.html</anchorfile>
      <anchor>ae5b776068408ba22290a0d5fe87268a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classFilesElement.html</anchorfile>
      <anchor>a0eb6b69cbdcf617a285613ce361cdfbd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classFilesElement.html</anchorfile>
      <anchor>afc21e5a7518267f9f6e1b9b0f7c4e931</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classFilesElement.html</anchorfile>
      <anchor>aea71c2c252f63b9c6a52d669075c68bf</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classFilesElement.html</anchorfile>
      <anchor>a80e77a71bc88997d8ee5e4b3107b7e4b</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classFilesElement.html</anchorfile>
      <anchor>a798b21e31308dede2003accb5bcedfd1</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classFilesElement.html</anchorfile>
      <anchor>af42de7335c0e83a6c827a2d23b354c2f</anchor>
      <arglist>(const char *name, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classFilesElement.html</anchorfile>
      <anchor>a70ef93644d278c1cb5e92dcfdd408069</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FilesElement *</type>
      <name>dup</name>
      <anchorfile>classFilesElement.html</anchorfile>
      <anchor>a2fcda28d95422dc6b1345bfbc7d05077</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FilesElement *</type>
      <name>getNextFilesSibling</name>
      <anchorfile>classFilesElement.html</anchorfile>
      <anchor>aa7986e8d526ad81372a7f3b88befca2d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NedFileElement *</type>
      <name>getFirstNedFileChild</name>
      <anchorfile>classFilesElement.html</anchorfile>
      <anchor>a8db53d76e8fbf0d8e60543a728b7b285</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MsgFileElement *</type>
      <name>getFirstMsgFileChild</name>
      <anchorfile>classFilesElement.html</anchorfile>
      <anchor>ad2d8be99a07953e4fe83029d61fc9114</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FunctionElement</name>
    <filename>classFunctionElement.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>FunctionElement</name>
      <anchorfile>classFunctionElement.html</anchorfile>
      <anchor>a9ef5ae0a20ad820d915d4a47b0db0113</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FunctionElement</name>
      <anchorfile>classFunctionElement.html</anchorfile>
      <anchor>acb6a7d7f80794643b0159d3fd3e85bdb</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FunctionElement</name>
      <anchorfile>classFunctionElement.html</anchorfile>
      <anchor>aec3ee3f6eab2af1054428e6095c7c7c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classFunctionElement.html</anchorfile>
      <anchor>a8b79da7ba130bbd3e5eb85c288682df3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classFunctionElement.html</anchorfile>
      <anchor>ad706ae18c649ce4cc13199769af16d4c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classFunctionElement.html</anchorfile>
      <anchor>a7c361e0c05622eeb3f49db2e3760a9f2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classFunctionElement.html</anchorfile>
      <anchor>aa36c583b7a355b45786d0f814ba96ff2</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classFunctionElement.html</anchorfile>
      <anchor>a93ae96be087c0741cd0031299880b0be</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classFunctionElement.html</anchorfile>
      <anchor>a9d3b892d7ffe676f757810db742d2c0c</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classFunctionElement.html</anchorfile>
      <anchor>a21dd9381d2fb1650732a9cf61483822a</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classFunctionElement.html</anchorfile>
      <anchor>a2e44c6393bc2bd7211887f3d5bc9f0a0</anchor>
      <arglist>(const char *name, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classFunctionElement.html</anchorfile>
      <anchor>a9cdfbe1c530c46c232f9a2c6a0fd4028</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FunctionElement *</type>
      <name>dup</name>
      <anchorfile>classFunctionElement.html</anchorfile>
      <anchor>a3466f42ed2250f102cafb286ef610865</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classFunctionElement.html</anchorfile>
      <anchor>a7d5a8a82fd54ef4ff1082d4f3abfcd7f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classFunctionElement.html</anchorfile>
      <anchor>a550d41ada13ea6d8b406dfb11a626b92</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FunctionElement *</type>
      <name>getNextFunctionSibling</name>
      <anchorfile>classFunctionElement.html</anchorfile>
      <anchor>a3a3badd6ac5ab51767ffb646b73b4833</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CommentElement *</type>
      <name>getFirstCommentChild</name>
      <anchorfile>classFunctionElement.html</anchorfile>
      <anchor>ae90dce269fc9e215be0a9e8a3ad9123c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OperatorElement *</type>
      <name>getFirstOperatorChild</name>
      <anchorfile>classFunctionElement.html</anchorfile>
      <anchor>a3614441a8f24caa444164a750bc6a67f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FunctionElement *</type>
      <name>getFirstFunctionChild</name>
      <anchorfile>classFunctionElement.html</anchorfile>
      <anchor>ad931295238551335aa63a2afd7438832</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IdentElement *</type>
      <name>getFirstIdentChild</name>
      <anchorfile>classFunctionElement.html</anchorfile>
      <anchor>adfb53f32703803fee2a9371b0c60c743</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual LiteralElement *</type>
      <name>getFirstLiteralChild</name>
      <anchorfile>classFunctionElement.html</anchorfile>
      <anchor>a0e3b673747e5f4d5b3e59202b05fffde</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GateElement</name>
    <filename>classGateElement.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>GateElement</name>
      <anchorfile>classGateElement.html</anchorfile>
      <anchor>a6212cdad2faff0927764517f04ae5483</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GateElement</name>
      <anchorfile>classGateElement.html</anchorfile>
      <anchor>aece999995afc0ec5f7535238a5610465</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GateElement</name>
      <anchorfile>classGateElement.html</anchorfile>
      <anchor>a7da5e94a887b5dafe259bd8080e2fd36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classGateElement.html</anchorfile>
      <anchor>adda1dcff30bb5a950bc2a3a19452e15b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classGateElement.html</anchorfile>
      <anchor>ac64a887f38687975de5bd5ab1bd40cc1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classGateElement.html</anchorfile>
      <anchor>ac7e98253af7fd192c3f30a430195cfce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classGateElement.html</anchorfile>
      <anchor>a89fb7bf5e8475efb258074876b0221d5</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classGateElement.html</anchorfile>
      <anchor>a10a752d97d0ce1cf4b299d96a1c475f6</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classGateElement.html</anchorfile>
      <anchor>abae64138909065cf717a9ae8f97a3b9a</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classGateElement.html</anchorfile>
      <anchor>a7fd6e76e8a0ba213c759eb0da005ca8c</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classGateElement.html</anchorfile>
      <anchor>ab4b321c053df75a51f8314f9d9b67d4e</anchor>
      <arglist>(const char *name, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classGateElement.html</anchorfile>
      <anchor>aecff6deb4c57efadec7c53534ffdb0b2</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GateElement *</type>
      <name>dup</name>
      <anchorfile>classGateElement.html</anchorfile>
      <anchor>ae60dae9a66e108890e741a6912d44162</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classGateElement.html</anchorfile>
      <anchor>ae93c0f90c2793662542df2a95972f335</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classGateElement.html</anchorfile>
      <anchor>a216ab370c4c840c216afdb0d7b4dd041</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getType</name>
      <anchorfile>classGateElement.html</anchorfile>
      <anchor>a6b3745251005372af385ba6f9fd3e3a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setType</name>
      <anchorfile>classGateElement.html</anchorfile>
      <anchor>ab82940c52414b489964675cf83392cce</anchor>
      <arglist>(int val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getIsVector</name>
      <anchorfile>classGateElement.html</anchorfile>
      <anchor>a60838b8d69e513e8d21e403a216a09ca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIsVector</name>
      <anchorfile>classGateElement.html</anchorfile>
      <anchor>a6ce5a9c961499953bde3af3c5d8f1ae2</anchor>
      <arglist>(bool val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getVectorSize</name>
      <anchorfile>classGateElement.html</anchorfile>
      <anchor>aa0940d82f8856f61626ca60377770eb3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVectorSize</name>
      <anchorfile>classGateElement.html</anchorfile>
      <anchor>ace7eea212327d2a075d12485153dbf74</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GateElement *</type>
      <name>getNextGateSibling</name>
      <anchorfile>classGateElement.html</anchorfile>
      <anchor>acb9d891680ee4804d4c06f3fc3af5906</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CommentElement *</type>
      <name>getFirstCommentChild</name>
      <anchorfile>classGateElement.html</anchorfile>
      <anchor>abfa4171822656b247ef5edd8e807e4a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ExpressionElement *</type>
      <name>getFirstExpressionChild</name>
      <anchorfile>classGateElement.html</anchorfile>
      <anchor>aa6dc3013afaf10825b72d41ab3b0e19d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PropertyElement *</type>
      <name>getFirstPropertyChild</name>
      <anchorfile>classGateElement.html</anchorfile>
      <anchor>a5a176dfc548c2b73763ed9172aae8ca9</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GatesElement</name>
    <filename>classGatesElement.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>GatesElement</name>
      <anchorfile>classGatesElement.html</anchorfile>
      <anchor>a56f1d4142dbe9b0eba4617ccc307fc85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GatesElement</name>
      <anchorfile>classGatesElement.html</anchorfile>
      <anchor>a26da74c738d503154ec069ab6bf1a8fb</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GatesElement</name>
      <anchorfile>classGatesElement.html</anchorfile>
      <anchor>a78874f0d344b4a8ec4ba1a80ec4e0b2e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classGatesElement.html</anchorfile>
      <anchor>a8d3f4762b1c88adbb4da0fd22285747e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classGatesElement.html</anchorfile>
      <anchor>a4d1729494888b9f62dfd5130f47e406d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classGatesElement.html</anchorfile>
      <anchor>a07fe54e4993084cc6ec55f1ad865e0c2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classGatesElement.html</anchorfile>
      <anchor>a2aec6e708e74b0d43ef52b4c0a5fa083</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classGatesElement.html</anchorfile>
      <anchor>aede42977b496440ef5f9007e08841885</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classGatesElement.html</anchorfile>
      <anchor>acce129fdd21e02a5cdb970cfff27c12b</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classGatesElement.html</anchorfile>
      <anchor>ad7f89b4e494e9abd864dd461326996e8</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classGatesElement.html</anchorfile>
      <anchor>a7fef62ededcafd874a2a43b0be2ba762</anchor>
      <arglist>(const char *name, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classGatesElement.html</anchorfile>
      <anchor>a627d987f533dccc7c0083cabc08d7979</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GatesElement *</type>
      <name>dup</name>
      <anchorfile>classGatesElement.html</anchorfile>
      <anchor>a72ffe5b429ab38b67e031fb4d98a286b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GatesElement *</type>
      <name>getNextGatesSibling</name>
      <anchorfile>classGatesElement.html</anchorfile>
      <anchor>a5e161649a17ad99583be08a6ccd5eeaa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CommentElement *</type>
      <name>getFirstCommentChild</name>
      <anchorfile>classGatesElement.html</anchorfile>
      <anchor>a99269efa892f6ecf525ccd3f86464a58</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GateElement *</type>
      <name>getFirstGateChild</name>
      <anchorfile>classGatesElement.html</anchorfile>
      <anchor>a6e57c05e12e480ddc0858df3c15d7f26</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IdentElement</name>
    <filename>classIdentElement.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>IdentElement</name>
      <anchorfile>classIdentElement.html</anchorfile>
      <anchor>a7a69b43794d41a887b7375ce34703d2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IdentElement</name>
      <anchorfile>classIdentElement.html</anchorfile>
      <anchor>a945b8c89a575e7854a059a1c3b72723a</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IdentElement</name>
      <anchorfile>classIdentElement.html</anchorfile>
      <anchor>a813b516b62bd1950c82bd337614ef677</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classIdentElement.html</anchorfile>
      <anchor>a4e50cfd68a9dfd99bef086ef5e172148</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classIdentElement.html</anchorfile>
      <anchor>ac1115d9da397e8f46be77a001462291b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classIdentElement.html</anchorfile>
      <anchor>a852b520c8e48946fe10e1694ba542f74</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classIdentElement.html</anchorfile>
      <anchor>a7c37b17e31006775bee783a9df763a96</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classIdentElement.html</anchorfile>
      <anchor>ae427b3a90b771598572c7e94264bcb1e</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classIdentElement.html</anchorfile>
      <anchor>ae7fcbe1984cff6b3f5bff3e90c75e532</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classIdentElement.html</anchorfile>
      <anchor>a4e6afd0b17cc0901a42f253d262d3441</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classIdentElement.html</anchorfile>
      <anchor>acea0bed826ab905db1d54d43921aafd6</anchor>
      <arglist>(const char *name, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classIdentElement.html</anchorfile>
      <anchor>ab80f0afe5c0ffc8be666f5af2b157157</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IdentElement *</type>
      <name>dup</name>
      <anchorfile>classIdentElement.html</anchorfile>
      <anchor>a619e56a742aa02b577d28a28d3063068</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getModule</name>
      <anchorfile>classIdentElement.html</anchorfile>
      <anchor>a702d78e562770af98fa696846b97ec66</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setModule</name>
      <anchorfile>classIdentElement.html</anchorfile>
      <anchor>a46b14d29922365e0a7db707c6d8964d7</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classIdentElement.html</anchorfile>
      <anchor>abedd7f3cc450ccc9e1d5bc56ea85f342</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classIdentElement.html</anchorfile>
      <anchor>ab5e14dbe8dace3ce7ade3663da1e6df8</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IdentElement *</type>
      <name>getNextIdentSibling</name>
      <anchorfile>classIdentElement.html</anchorfile>
      <anchor>aa663f4edafd110f5047789b3091c93a0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CommentElement *</type>
      <name>getFirstCommentChild</name>
      <anchorfile>classIdentElement.html</anchorfile>
      <anchor>a7d5814fbd5de4629f4410ff1e37891d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OperatorElement *</type>
      <name>getFirstOperatorChild</name>
      <anchorfile>classIdentElement.html</anchorfile>
      <anchor>adc504d31cc21ddd0f05aafa4c5d75451</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FunctionElement *</type>
      <name>getFirstFunctionChild</name>
      <anchorfile>classIdentElement.html</anchorfile>
      <anchor>a056cd91dee602d56f8f44b31ee60e10e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IdentElement *</type>
      <name>getFirstIdentChild</name>
      <anchorfile>classIdentElement.html</anchorfile>
      <anchor>a16f1f670625a233049842413ab5e2b19</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual LiteralElement *</type>
      <name>getFirstLiteralChild</name>
      <anchorfile>classIdentElement.html</anchorfile>
      <anchor>a1dc915192436a069dba578937e3f4588</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ImportElement</name>
    <filename>classImportElement.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>ImportElement</name>
      <anchorfile>classImportElement.html</anchorfile>
      <anchor>aa895ea061b8d5cad2dbf54fe9c5c27ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImportElement</name>
      <anchorfile>classImportElement.html</anchorfile>
      <anchor>ae9c180b9df6af28fedbbdf17e5756cf6</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ImportElement</name>
      <anchorfile>classImportElement.html</anchorfile>
      <anchor>ab49568196b404dae5bf891179605007b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classImportElement.html</anchorfile>
      <anchor>aa3bfa5153a1bdb83ab500e64a5ae1ad3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classImportElement.html</anchorfile>
      <anchor>adf9f7b2a7a5c854d8cca0865f822aae9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classImportElement.html</anchorfile>
      <anchor>af0bb8d275705846200f6b701a79ad94c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classImportElement.html</anchorfile>
      <anchor>a2777ab4b34a0c0219805c1054590557c</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classImportElement.html</anchorfile>
      <anchor>ae2a80c892957fbff90c2cc788a34e444</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classImportElement.html</anchorfile>
      <anchor>a90dd92c01151c45de32ebfb801d25bf5</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classImportElement.html</anchorfile>
      <anchor>a562d3799d5948d47e18fc415301f21bd</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classImportElement.html</anchorfile>
      <anchor>a36511acb83ec5d44daa96dfe5e5aeff4</anchor>
      <arglist>(const char *name, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classImportElement.html</anchorfile>
      <anchor>a2eb7508f8d6d039c3e369dc0037bf701</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ImportElement *</type>
      <name>dup</name>
      <anchorfile>classImportElement.html</anchorfile>
      <anchor>ac84b8dfbc9255e4cc97b1ec1fccf6b35</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getImportSpec</name>
      <anchorfile>classImportElement.html</anchorfile>
      <anchor>a783d368d959b4a3446f8fdceff656a35</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setImportSpec</name>
      <anchorfile>classImportElement.html</anchorfile>
      <anchor>af9c392efd34e6167b959f9a68092291a</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ImportElement *</type>
      <name>getNextImportSibling</name>
      <anchorfile>classImportElement.html</anchorfile>
      <anchor>ae1e801240e099495f91cf39b58934613</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CommentElement *</type>
      <name>getFirstCommentChild</name>
      <anchorfile>classImportElement.html</anchorfile>
      <anchor>a10ad55ef84b0d83b744ca52b5f2cb99b</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>InterfaceNameElement</name>
    <filename>classInterfaceNameElement.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>InterfaceNameElement</name>
      <anchorfile>classInterfaceNameElement.html</anchorfile>
      <anchor>a17939a923b83f41cfadc92af8407e478</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InterfaceNameElement</name>
      <anchorfile>classInterfaceNameElement.html</anchorfile>
      <anchor>aff08b5d24c06817b0cf47dd16f4f54c1</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InterfaceNameElement</name>
      <anchorfile>classInterfaceNameElement.html</anchorfile>
      <anchor>a3ec97fae78b5c75364e56871e789b389</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classInterfaceNameElement.html</anchorfile>
      <anchor>a470911e52d06098b236db79457b1b9dd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classInterfaceNameElement.html</anchorfile>
      <anchor>ac61f2aa5a1be4213cf0f2474b34a25f4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classInterfaceNameElement.html</anchorfile>
      <anchor>a0ec7df711b5fbe71a3ed38ed11a9d47a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classInterfaceNameElement.html</anchorfile>
      <anchor>af8bb9b01e2667e3d113d7b7f3f4b4181</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classInterfaceNameElement.html</anchorfile>
      <anchor>a7275559e743014dc6baacc9693739591</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classInterfaceNameElement.html</anchorfile>
      <anchor>ac3fb59b4b506bea22afab0e7cdcfcc62</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classInterfaceNameElement.html</anchorfile>
      <anchor>a21a166a23baa52ac8147437817c9a61d</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classInterfaceNameElement.html</anchorfile>
      <anchor>a43cc9166aa709b97abde8993610c69cc</anchor>
      <arglist>(const char *name, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classInterfaceNameElement.html</anchorfile>
      <anchor>a4e45b1f5573ce6e909198bb918c0c8a7</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual InterfaceNameElement *</type>
      <name>dup</name>
      <anchorfile>classInterfaceNameElement.html</anchorfile>
      <anchor>aa26642f56a6985ff9c9c13aeb585d517</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classInterfaceNameElement.html</anchorfile>
      <anchor>af1983a326d10ff6c40c19edb59170acb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classInterfaceNameElement.html</anchorfile>
      <anchor>a568ae43a94ead2305bbb28458ede5191</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual InterfaceNameElement *</type>
      <name>getNextInterfaceNameSibling</name>
      <anchorfile>classInterfaceNameElement.html</anchorfile>
      <anchor>afde68f5d92f99f9ca68340ba3106c706</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CommentElement *</type>
      <name>getFirstCommentChild</name>
      <anchorfile>classInterfaceNameElement.html</anchorfile>
      <anchor>adc5bad0d29ddbccfc7a8a6fe1b600cdd</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LiteralElement</name>
    <filename>classLiteralElement.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>LiteralElement</name>
      <anchorfile>classLiteralElement.html</anchorfile>
      <anchor>a15448268cf5409b8cb00e93be85fba69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LiteralElement</name>
      <anchorfile>classLiteralElement.html</anchorfile>
      <anchor>afb5407b97716eb806363e6d37e3891e4</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LiteralElement</name>
      <anchorfile>classLiteralElement.html</anchorfile>
      <anchor>a64929ad50027782c2a00317e0ec386ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classLiteralElement.html</anchorfile>
      <anchor>a6fe7d7c77c42225889c95700994d4826</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classLiteralElement.html</anchorfile>
      <anchor>a15a3270e36c8fb61200d1b9718a29b8d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classLiteralElement.html</anchorfile>
      <anchor>adc1fa23071dfe341dc228ca30c7e8c6c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classLiteralElement.html</anchorfile>
      <anchor>a4ee5e8979f0ab24bff29749654c2fabd</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classLiteralElement.html</anchorfile>
      <anchor>afcad005e6604dd38988441851a1bd433</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classLiteralElement.html</anchorfile>
      <anchor>a359b8b0589eb6f73e59a459e89dd5b94</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classLiteralElement.html</anchorfile>
      <anchor>a58e8e0b9a0df1a56e68373b53cae0fe4</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classLiteralElement.html</anchorfile>
      <anchor>a2c7f7151e6d36dd56b84356685704ba6</anchor>
      <arglist>(const char *name, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classLiteralElement.html</anchorfile>
      <anchor>a8acbf75d68f2703c0fa550f451ff1ed7</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual LiteralElement *</type>
      <name>dup</name>
      <anchorfile>classLiteralElement.html</anchorfile>
      <anchor>a94a2144ae816d447d2f450e3665a413a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getType</name>
      <anchorfile>classLiteralElement.html</anchorfile>
      <anchor>a634a3b180c6afb2d7d5e2d0f42a94ee3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setType</name>
      <anchorfile>classLiteralElement.html</anchorfile>
      <anchor>a7aae0c374964c502142b9792e329e9a6</anchor>
      <arglist>(int val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getText</name>
      <anchorfile>classLiteralElement.html</anchorfile>
      <anchor>a0ec97a4a01c5cb434aba59b060d1795c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setText</name>
      <anchorfile>classLiteralElement.html</anchorfile>
      <anchor>ae5d0d29904955759e0dd21476a93c71d</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getValue</name>
      <anchorfile>classLiteralElement.html</anchorfile>
      <anchor>a8cd6c2b18a61673b1f83e91ac9240d37</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classLiteralElement.html</anchorfile>
      <anchor>abd92e536b8cb57ffa9301773b2e118f5</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual LiteralElement *</type>
      <name>getNextLiteralSibling</name>
      <anchorfile>classLiteralElement.html</anchorfile>
      <anchor>a35c16eb119dd3b60ae5c4b4cc7a9dba5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CommentElement *</type>
      <name>getFirstCommentChild</name>
      <anchorfile>classLiteralElement.html</anchorfile>
      <anchor>a38204a2f3f40c6c10106723308d4b3f7</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LoopElement</name>
    <filename>classLoopElement.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>LoopElement</name>
      <anchorfile>classLoopElement.html</anchorfile>
      <anchor>ad9a25d1ec69ee77fd5ac96b29234148f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LoopElement</name>
      <anchorfile>classLoopElement.html</anchorfile>
      <anchor>aacbd38243299088dfee44ede1c6cd297</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LoopElement</name>
      <anchorfile>classLoopElement.html</anchorfile>
      <anchor>ac06c1c33952e14d9c5731cacd4f00ac6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classLoopElement.html</anchorfile>
      <anchor>a497d62fc3cdc0083cfc977b27a7c5161</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classLoopElement.html</anchorfile>
      <anchor>a500201c2256599a589239ca8c39f30fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classLoopElement.html</anchorfile>
      <anchor>abef6ed923e72264ddf0a6e1a7980b10e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classLoopElement.html</anchorfile>
      <anchor>a547eb1c562d3bd1101e317be5773102b</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classLoopElement.html</anchorfile>
      <anchor>a32802128106093524ac49a5cad2c8144</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classLoopElement.html</anchorfile>
      <anchor>a3a04212c8a354786f2f09132c2c00308</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classLoopElement.html</anchorfile>
      <anchor>a10e7eac2d93f99509a3e65a63cc8412b</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classLoopElement.html</anchorfile>
      <anchor>a72dfafe4c70c488c4746a9137c3b6bc4</anchor>
      <arglist>(const char *name, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classLoopElement.html</anchorfile>
      <anchor>a133061af46ae1befb6efac7c604fef11</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual LoopElement *</type>
      <name>dup</name>
      <anchorfile>classLoopElement.html</anchorfile>
      <anchor>a8abc6daf4da33414997f2a6b7c97ff1f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getParamName</name>
      <anchorfile>classLoopElement.html</anchorfile>
      <anchor>a031eceb65a6d95caeb3324657e598a1c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParamName</name>
      <anchorfile>classLoopElement.html</anchorfile>
      <anchor>a99af67a3ddbae56a98ee4067f1a6aafd</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getFromValue</name>
      <anchorfile>classLoopElement.html</anchorfile>
      <anchor>a771e831ed6f2d9fe2df016f4d483ec16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFromValue</name>
      <anchorfile>classLoopElement.html</anchorfile>
      <anchor>a39799f5c0355861cdeaed18a890d70f1</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getToValue</name>
      <anchorfile>classLoopElement.html</anchorfile>
      <anchor>abe9362c10460fb7e7d826a4655da7c54</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToValue</name>
      <anchorfile>classLoopElement.html</anchorfile>
      <anchor>a5844b4c0b9ce96eed550d0f96ce2c16a</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual LoopElement *</type>
      <name>getNextLoopSibling</name>
      <anchorfile>classLoopElement.html</anchorfile>
      <anchor>a95bc86e060d4c7ff062d46c7a74913b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CommentElement *</type>
      <name>getFirstCommentChild</name>
      <anchorfile>classLoopElement.html</anchorfile>
      <anchor>a240402ac2a3bc69c95ddcdad7898797c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ExpressionElement *</type>
      <name>getFirstExpressionChild</name>
      <anchorfile>classLoopElement.html</anchorfile>
      <anchor>a930c3db27d5d1e4eda5eab7c67634aa1</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MessageDeclElement</name>
    <filename>classMessageDeclElement.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>MessageDeclElement</name>
      <anchorfile>classMessageDeclElement.html</anchorfile>
      <anchor>a760abad7f562fa439ab18628c53d2da8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MessageDeclElement</name>
      <anchorfile>classMessageDeclElement.html</anchorfile>
      <anchor>afc58aac9c1fca7177e5470872a7ccf98</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MessageDeclElement</name>
      <anchorfile>classMessageDeclElement.html</anchorfile>
      <anchor>a773089c0c4f3bad0a0df770ad40691cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classMessageDeclElement.html</anchorfile>
      <anchor>a03f01a12c954a000c8037a0f0bc25a5b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classMessageDeclElement.html</anchorfile>
      <anchor>a03c5246d39ab17728b464021fb788aa7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classMessageDeclElement.html</anchorfile>
      <anchor>acaca0e1106f38281eaf4d1a8e4c27e1a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classMessageDeclElement.html</anchorfile>
      <anchor>a65f39c55f079ef387aadcf6c0d950855</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classMessageDeclElement.html</anchorfile>
      <anchor>a5b5d3b4c1d996c527449cbbc17cc3929</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classMessageDeclElement.html</anchorfile>
      <anchor>adfb3846099f99dad7598828d240e656a</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classMessageDeclElement.html</anchorfile>
      <anchor>af13512bc106522fc73f5f0277cf86ea5</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classMessageDeclElement.html</anchorfile>
      <anchor>a8a8e519da3405ffb82c4f97527ad2b69</anchor>
      <arglist>(const char *name, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classMessageDeclElement.html</anchorfile>
      <anchor>a6f0c8d6a26212c7089e4cc4c0ef5cb0c</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MessageDeclElement *</type>
      <name>dup</name>
      <anchorfile>classMessageDeclElement.html</anchorfile>
      <anchor>a660bfbbf829077caff40f77d117baeac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classMessageDeclElement.html</anchorfile>
      <anchor>a9112ca82dc9b85c192a602c36447b9c7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classMessageDeclElement.html</anchorfile>
      <anchor>adf824043f915b76501cc03eca60d1a7f</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MessageDeclElement *</type>
      <name>getNextMessageDeclSibling</name>
      <anchorfile>classMessageDeclElement.html</anchorfile>
      <anchor>af170fa13a9179d3c05c3c81acad5393f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CommentElement *</type>
      <name>getFirstCommentChild</name>
      <anchorfile>classMessageDeclElement.html</anchorfile>
      <anchor>a89da3048896ee7a8ad38277ae201f6dc</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MessageElement</name>
    <filename>classMessageElement.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>MessageElement</name>
      <anchorfile>classMessageElement.html</anchorfile>
      <anchor>ae4d53c3faf5d114bc4d55330e780d1b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MessageElement</name>
      <anchorfile>classMessageElement.html</anchorfile>
      <anchor>a54f5ace575b7c6f8260c9a0e01fb8025</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MessageElement</name>
      <anchorfile>classMessageElement.html</anchorfile>
      <anchor>a0f98b0c27b4076d78fbba7cfb92d1625</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classMessageElement.html</anchorfile>
      <anchor>ad65ff8ec14365269fe748274dad9d950</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classMessageElement.html</anchorfile>
      <anchor>aaa54c4d905cf5e7402ebc20e5bcedad5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classMessageElement.html</anchorfile>
      <anchor>a47f6a51542bee23df4a3a8a920dac1c1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classMessageElement.html</anchorfile>
      <anchor>a9fe67b2dc970685ecdc85bcefac078f0</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classMessageElement.html</anchorfile>
      <anchor>aa6180cec5a18edd2d63bb6c9cddf4b52</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classMessageElement.html</anchorfile>
      <anchor>adcb056d840f25e477f9702db11bb9037</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classMessageElement.html</anchorfile>
      <anchor>abda2b712d05f9cbb69b362acef460f84</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classMessageElement.html</anchorfile>
      <anchor>a96ab27562d5cc1991418509a2b03f4dd</anchor>
      <arglist>(const char *name, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classMessageElement.html</anchorfile>
      <anchor>abcf24f9d41a211cb0f457c48c9fad4bf</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MessageElement *</type>
      <name>dup</name>
      <anchorfile>classMessageElement.html</anchorfile>
      <anchor>ae8b73774acb84db8f5f7a5bd0d6d876a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classMessageElement.html</anchorfile>
      <anchor>aa2b64fda7bfe555dd6d82d4f4a2fa516</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classMessageElement.html</anchorfile>
      <anchor>a089fc92cb8f5b1112679a4017cab9ba6</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getExtendsName</name>
      <anchorfile>classMessageElement.html</anchorfile>
      <anchor>a3660691fc97183085185a4a319770a78</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExtendsName</name>
      <anchorfile>classMessageElement.html</anchorfile>
      <anchor>addadf6e694c3c0760a424dc3b676d342</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getSourceCode</name>
      <anchorfile>classMessageElement.html</anchorfile>
      <anchor>ab56c980ae5d762f04a0b8d1166a5a1f7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSourceCode</name>
      <anchorfile>classMessageElement.html</anchorfile>
      <anchor>a66aab556e35e1df7a2f0d1a6fb8b639b</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MessageElement *</type>
      <name>getNextMessageSibling</name>
      <anchorfile>classMessageElement.html</anchorfile>
      <anchor>a6ef314bf74ea980bdb3948221a0e8de4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CommentElement *</type>
      <name>getFirstCommentChild</name>
      <anchorfile>classMessageElement.html</anchorfile>
      <anchor>ac63a7a91f942414043e988c93678bc83</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PropertyElement *</type>
      <name>getFirstPropertyChild</name>
      <anchorfile>classMessageElement.html</anchorfile>
      <anchor>a5696137e062d08bd7ad3a2e7ed32d620</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FieldElement *</type>
      <name>getFirstFieldChild</name>
      <anchorfile>classMessageElement.html</anchorfile>
      <anchor>a3b9c78be89b6c3d4ce7a3942d6f7895c</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ModuleInterfaceElement</name>
    <filename>classModuleInterfaceElement.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>ModuleInterfaceElement</name>
      <anchorfile>classModuleInterfaceElement.html</anchorfile>
      <anchor>a50c00120dda3f454d57273b4a83fd971</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ModuleInterfaceElement</name>
      <anchorfile>classModuleInterfaceElement.html</anchorfile>
      <anchor>a88238da74dd2bd011e793181eec067b4</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ModuleInterfaceElement</name>
      <anchorfile>classModuleInterfaceElement.html</anchorfile>
      <anchor>a4a2759ac30efc7e48f02141cb1d9962f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classModuleInterfaceElement.html</anchorfile>
      <anchor>a23d3cf9ecadd7228ce8359722dabc8e5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classModuleInterfaceElement.html</anchorfile>
      <anchor>a3a951f90bb0f282522045e76f8aba4e4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classModuleInterfaceElement.html</anchorfile>
      <anchor>a50673045ca8a6b37a775d91ef5a2905f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classModuleInterfaceElement.html</anchorfile>
      <anchor>a7fbde47d24d3cb184ac830b847af22c6</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classModuleInterfaceElement.html</anchorfile>
      <anchor>ae89f1484c3245ed46dd8b3de7ddfced5</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classModuleInterfaceElement.html</anchorfile>
      <anchor>a7f15ddd3c80e2990ba2bfdfaf37ca698</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classModuleInterfaceElement.html</anchorfile>
      <anchor>a62778b2c934f3307366a4858f5d3ee6c</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classModuleInterfaceElement.html</anchorfile>
      <anchor>aed20ac51e84cc7d975c2607bfdb3f74d</anchor>
      <arglist>(const char *name, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classModuleInterfaceElement.html</anchorfile>
      <anchor>a8b757dc6c9d0700f3ef5d7e5faf87397</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModuleInterfaceElement *</type>
      <name>dup</name>
      <anchorfile>classModuleInterfaceElement.html</anchorfile>
      <anchor>a040d03cf3bdf16dd2d56cdf23c2eeb96</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classModuleInterfaceElement.html</anchorfile>
      <anchor>ac31923a8ac9991a1c0224933006295e1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classModuleInterfaceElement.html</anchorfile>
      <anchor>a7658e36e1cc2061804ada61eccaaef6d</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModuleInterfaceElement *</type>
      <name>getNextModuleInterfaceSibling</name>
      <anchorfile>classModuleInterfaceElement.html</anchorfile>
      <anchor>aa68eb9beef6724b252b1be4f789de60a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CommentElement *</type>
      <name>getFirstCommentChild</name>
      <anchorfile>classModuleInterfaceElement.html</anchorfile>
      <anchor>afb31ae93245c73afd36ea6259d932204</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ExtendsElement *</type>
      <name>getFirstExtendsChild</name>
      <anchorfile>classModuleInterfaceElement.html</anchorfile>
      <anchor>a3268a6cf9668731a777257f1acd8daae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParametersElement *</type>
      <name>getFirstParametersChild</name>
      <anchorfile>classModuleInterfaceElement.html</anchorfile>
      <anchor>aee57b41e8830abd9d5d5c3f74fd2f563</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GatesElement *</type>
      <name>getFirstGatesChild</name>
      <anchorfile>classModuleInterfaceElement.html</anchorfile>
      <anchor>ab9871727e8dc3cdea1ca8818f8c49753</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MsgCppGenerator</name>
    <filename>classMsgCppGenerator.html</filename>
    <class kind="class">MsgCppGenerator::ClassInfo</class>
    <class kind="class">MsgCppGenerator::EnumInfo</class>
    <class kind="struct">MsgCppGenerator::TypeDesc</class>
    <member kind="enumeration">
      <name>ClassType</name>
      <anchorfile>classMsgCppGenerator.html</anchorfile>
      <anchor>aa8e2ba65292bb6909e289aaab94af63e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNKNOWN</name>
      <anchorfile>classMsgCppGenerator.html</anchorfile>
      <anchor>aa8e2ba65292bb6909e289aaab94af63eaf2a1bde57d4a01bf346332e023d3d079</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STRUCT</name>
      <anchorfile>classMsgCppGenerator.html</anchorfile>
      <anchor>aa8e2ba65292bb6909e289aaab94af63ea8ac062cfa45ee5271586c21a58e54dc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COBJECT</name>
      <anchorfile>classMsgCppGenerator.html</anchorfile>
      <anchor>aa8e2ba65292bb6909e289aaab94af63ea9fb7d148b4ff3c28a9f7c51cf4b83838</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COWNEDOBJECT</name>
      <anchorfile>classMsgCppGenerator.html</anchorfile>
      <anchor>aa8e2ba65292bb6909e289aaab94af63ea58c35a17ecfa214a13d5f85fc88f0f61</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CNAMEDOBJECT</name>
      <anchorfile>classMsgCppGenerator.html</anchorfile>
      <anchor>aa8e2ba65292bb6909e289aaab94af63ea2cbd07baaaeeeb455ff35e80b97f0f5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FOREIGN</name>
      <anchorfile>classMsgCppGenerator.html</anchorfile>
      <anchor>aa8e2ba65292bb6909e289aaab94af63ea17c5fc39e7ad3e107da1dc4fbeb03918</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; std::string &gt;</type>
      <name>StringVector</name>
      <anchorfile>classMsgCppGenerator.html</anchorfile>
      <anchor>af9922ecf2e0036144b3ef26f8d38d39f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MsgCppGenerator</name>
      <anchorfile>classMsgCppGenerator.html</anchorfile>
      <anchor>a3b382451c0eed48da30cf5fcca50fa17</anchor>
      <arglist>(NEDErrorStore *errors, const MsgCppGeneratorOptions &amp;options)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MsgCppGenerator</name>
      <anchorfile>classMsgCppGenerator.html</anchorfile>
      <anchor>ac7453672e770f99627afaceafde97d78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generate</name>
      <anchorfile>classMsgCppGenerator.html</anchorfile>
      <anchor>a8799c58d6031bf60df5161ae7fcae4f3</anchor>
      <arglist>(MsgFileElement *fileElement, const char *hFile, const char *ccFile)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; std::string, TypeDesc &gt;</type>
      <name>TypeMap</name>
      <anchorfile>classMsgCppGenerator.html</anchorfile>
      <anchor>aee1d7c35ac36abe829194a2a72442d61</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; std::string, std::string &gt;</type>
      <name>Properties</name>
      <anchorfile>classMsgCppGenerator.html</anchorfile>
      <anchor>a8dd6aca3bcbf8ff1128adee034f56308</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>prefixWithNamespace</name>
      <anchorfile>classMsgCppGenerator.html</anchorfile>
      <anchor>a6231ea626067c2f2c388364498a6fcb1</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>StringVector</type>
      <name>lookupExistingClassName</name>
      <anchorfile>classMsgCppGenerator.html</anchorfile>
      <anchor>a0e20cb400ae05139c6023f5b1494856e</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>StringVector</type>
      <name>lookupExistingEnumName</name>
      <anchorfile>classMsgCppGenerator.html</anchorfile>
      <anchor>a79646c2fa9f202dc60adaebee0367447</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isClassDeclared</name>
      <anchorfile>classMsgCppGenerator.html</anchorfile>
      <anchor>a5e1eb3acf5fb07ed3cce7355fb605955</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ClassType</type>
      <name>getClassType</name>
      <anchorfile>classMsgCppGenerator.html</anchorfile>
      <anchor>a3fb094845c3a3985e49914966eb36333</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ClassInfo</type>
      <name>extractClassInfo</name>
      <anchorfile>classMsgCppGenerator.html</anchorfile>
      <anchor>add4525bcdc01f773e45f437b2d7e3d9f</anchor>
      <arglist>(NEDElement *node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>extractClassDecl</name>
      <anchorfile>classMsgCppGenerator.html</anchorfile>
      <anchor>a9f78d86c0c1e1df21caa117302323c5d</anchor>
      <arglist>(NEDElement *node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Properties</type>
      <name>extractPropertiesOf</name>
      <anchorfile>classMsgCppGenerator.html</anchorfile>
      <anchor>a6f4ce190fe6d09cd061ffe9a091c01c9</anchor>
      <arglist>(NEDElement *node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>prepareFieldForCodeGeneration</name>
      <anchorfile>classMsgCppGenerator.html</anchorfile>
      <anchor>affdefc7c41cd588bc45099ca3dc907dc</anchor>
      <arglist>(ClassInfo &amp;info, ClassInfo::FieldInfo *it)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>prepareForCodeGeneration</name>
      <anchorfile>classMsgCppGenerator.html</anchorfile>
      <anchor>a90d1b2eeb9a73d8e32311938c8265f7c</anchor>
      <arglist>(ClassInfo &amp;classInfo)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>EnumInfo</type>
      <name>extractEnumInfo</name>
      <anchorfile>classMsgCppGenerator.html</anchorfile>
      <anchor>a905f71f78f6b8a8363d0c4983cd4e4f8</anchor>
      <arglist>(EnumElement *node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>generateClass</name>
      <anchorfile>classMsgCppGenerator.html</anchorfile>
      <anchor>adb037dcb9193cd6f698f09d7175b72cf</anchor>
      <arglist>(const ClassInfo &amp;classInfo)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>generateStruct</name>
      <anchorfile>classMsgCppGenerator.html</anchorfile>
      <anchor>aa4619f475f19860a393ab0eec73a18c7</anchor>
      <arglist>(const ClassInfo &amp;classInfo)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>generateDescriptorClass</name>
      <anchorfile>classMsgCppGenerator.html</anchorfile>
      <anchor>a5793383e9bcc6e59435d39aef03124e8</anchor>
      <arglist>(const ClassInfo &amp;a)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>generateEnum</name>
      <anchorfile>classMsgCppGenerator.html</anchorfile>
      <anchor>a459aa08bba72faec042575a014f66493</anchor>
      <arglist>(const EnumInfo &amp;enumInfo)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>generateNamespaceBegin</name>
      <anchorfile>classMsgCppGenerator.html</anchorfile>
      <anchor>aea984658d4f80904b9a0be191d6133d1</anchor>
      <arglist>(NEDElement *element)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>generateNamespaceEnd</name>
      <anchorfile>classMsgCppGenerator.html</anchorfile>
      <anchor>a4926419cd71c30e265bc02ffa132c2f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>generatePreComment</name>
      <anchorfile>classMsgCppGenerator.html</anchorfile>
      <anchor>a8ce621bc22a589525ed857ad90a30c56</anchor>
      <arglist>(NEDElement *nedElement)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>generateTemplates</name>
      <anchorfile>classMsgCppGenerator.html</anchorfile>
      <anchor>a5335c803b0a5a8b8d055d21755fde324</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>getPropertyAsBool</name>
      <anchorfile>classMsgCppGenerator.html</anchorfile>
      <anchor>ab214b77a4d45daaa8f4237b7d56ef233</anchor>
      <arglist>(const Properties &amp;p, const char *name, bool defval)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>getProperty</name>
      <anchorfile>classMsgCppGenerator.html</anchorfile>
      <anchor>a27509c1f1bcc078ecea5c1a71047b926</anchor>
      <arglist>(const Properties &amp;p, const char *name, const std::string &amp;defval=std::string())</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>generate</name>
      <anchorfile>classMsgCppGenerator.html</anchorfile>
      <anchor>a8ca3917699430db5faa4f382b771e86c</anchor>
      <arglist>(MsgFileElement *fileElement)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>hFilename</name>
      <anchorfile>classMsgCppGenerator.html</anchorfile>
      <anchor>a2125b762611b799165245a53d6523c14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>ccFilename</name>
      <anchorfile>classMsgCppGenerator.html</anchorfile>
      <anchor>ae2b4b2a77abef8dc9b89a7810c1492c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::ostream *</type>
      <name>hOutp</name>
      <anchorfile>classMsgCppGenerator.html</anchorfile>
      <anchor>ac8201a376714b8b8ce471acab3ca8cc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::ostream *</type>
      <name>ccOutp</name>
      <anchorfile>classMsgCppGenerator.html</anchorfile>
      <anchor>a74ac90e5c84005960c8812b4f639c590</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NEDErrorStore *</type>
      <name>errors</name>
      <anchorfile>classMsgCppGenerator.html</anchorfile>
      <anchor>a6ac4613e08a81970bacd8a3b26c206e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; std::string, ClassType &gt;</type>
      <name>classtype</name>
      <anchorfile>classMsgCppGenerator.html</anchorfile>
      <anchor>a4950cb6262ed76a19c30e56c6014e785</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; std::string, std::string &gt;</type>
      <name>enumtype</name>
      <anchorfile>classMsgCppGenerator.html</anchorfile>
      <anchor>ab4b7be98c535ff6737e2bdd517b8092c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>namespacename</name>
      <anchorfile>classMsgCppGenerator.html</anchorfile>
      <anchor>a8e2e30067ef72ca9fbbc16c743d400a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StringVector</type>
      <name>namespacenamevector</name>
      <anchorfile>classMsgCppGenerator.html</anchorfile>
      <anchor>abd77389d1e0c335617fda9fa8effd2fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MsgCppGeneratorOptions</type>
      <name>opts</name>
      <anchorfile>classMsgCppGenerator.html</anchorfile>
      <anchor>a6dc16980e224ffe8303654825d7dc4bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const TypeMap</type>
      <name>PRIMITIVE_TYPES</name>
      <anchorfile>classMsgCppGenerator.html</anchorfile>
      <anchor>ae8b0c5aebe896d3d83278f25c80e7f80</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MsgCppGenerator::ClassInfo</name>
    <filename>classMsgCppGenerator_1_1ClassInfo.html</filename>
    <class kind="class">MsgCppGenerator::ClassInfo::FieldInfo</class>
    <member kind="typedef">
      <type>std::vector&lt; FieldInfo &gt;</type>
      <name>Fieldlist</name>
      <anchorfile>classMsgCppGenerator_1_1ClassInfo.html</anchorfile>
      <anchor>a0d1f495b3b28e9977d07d710e4c46cf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ClassInfo</name>
      <anchorfile>classMsgCppGenerator_1_1ClassInfo.html</anchorfile>
      <anchor>a1a69ebbae57af32c63d9d3aba27e4393</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>NEDElement *</type>
      <name>nedElement</name>
      <anchorfile>classMsgCppGenerator_1_1ClassInfo.html</anchorfile>
      <anchor>a9466708d2f6d99ecad4840691feaa2c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>keyword</name>
      <anchorfile>classMsgCppGenerator_1_1ClassInfo.html</anchorfile>
      <anchor>ab9c7a0f55210605b1d0ed392bbf54f90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>msgname</name>
      <anchorfile>classMsgCppGenerator_1_1ClassInfo.html</anchorfile>
      <anchor>a8b2354d0c790b3116c9ff287944b375a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>msgbase</name>
      <anchorfile>classMsgCppGenerator_1_1ClassInfo.html</anchorfile>
      <anchor>ac2e855203edc09395522c717b79ac0a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Properties</type>
      <name>props</name>
      <anchorfile>classMsgCppGenerator_1_1ClassInfo.html</anchorfile>
      <anchor>ab52f0c572a7e4f49cac444cd08d21a24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>gap</name>
      <anchorfile>classMsgCppGenerator_1_1ClassInfo.html</anchorfile>
      <anchor>a68a3fe8e0fa0eb04e791b99852485b97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>omitgetverb</name>
      <anchorfile>classMsgCppGenerator_1_1ClassInfo.html</anchorfile>
      <anchor>af1384623755716f02649e5f8d2505ab7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ClassType</type>
      <name>classtype</name>
      <anchorfile>classMsgCppGenerator_1_1ClassInfo.html</anchorfile>
      <anchor>ad68ea75b29f432956231f5fa257f1b74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>msgclass</name>
      <anchorfile>classMsgCppGenerator_1_1ClassInfo.html</anchorfile>
      <anchor>a7383ded724e4b3aee9021090795d5952</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>realmsgclass</name>
      <anchorfile>classMsgCppGenerator_1_1ClassInfo.html</anchorfile>
      <anchor>a148365dfade77f0c4d416ea5bd63628c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>msgbaseclass</name>
      <anchorfile>classMsgCppGenerator_1_1ClassInfo.html</anchorfile>
      <anchor>abce3b35915340c8a5ad9705c5ab4c4a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>msgdescclass</name>
      <anchorfile>classMsgCppGenerator_1_1ClassInfo.html</anchorfile>
      <anchor>ad23857476c25918a9b3abb5cb35ac682</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Fieldlist</type>
      <name>fieldlist</name>
      <anchorfile>classMsgCppGenerator_1_1ClassInfo.html</anchorfile>
      <anchor>aca614203c1eace6eafdc6426c167f686</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Fieldlist</type>
      <name>baseclassFieldlist</name>
      <anchorfile>classMsgCppGenerator_1_1ClassInfo.html</anchorfile>
      <anchor>ab19ceb0c0fe29e76bf50124acc0d083b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>generate_class</name>
      <anchorfile>classMsgCppGenerator_1_1ClassInfo.html</anchorfile>
      <anchor>a9edeb9adf33ffbab1eefbefbb3e3dbc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>generate_descriptor</name>
      <anchorfile>classMsgCppGenerator_1_1ClassInfo.html</anchorfile>
      <anchor>a7d74ea69e0e28d23b812b571286ac3cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>generate_setters_in_descriptor</name>
      <anchorfile>classMsgCppGenerator_1_1ClassInfo.html</anchorfile>
      <anchor>a8d87acabed60e860457bd7621ec0442b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>msgqname</name>
      <anchorfile>classMsgCppGenerator_1_1ClassInfo.html</anchorfile>
      <anchor>a0cb5edc9751a87736edd55b15d671c86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>msgbaseqname</name>
      <anchorfile>classMsgCppGenerator_1_1ClassInfo.html</anchorfile>
      <anchor>a46f7a472e1ae9f2dc11f4416de4d1483</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>StringVector</type>
      <name>implements</name>
      <anchorfile>classMsgCppGenerator_1_1ClassInfo.html</anchorfile>
      <anchor>abed2e5e6cbc27c11d427d48cf4eaf745</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MsgCppGenerator::ClassInfo::FieldInfo</name>
    <filename>classMsgCppGenerator_1_1ClassInfo_1_1FieldInfo.html</filename>
    <member kind="function">
      <type></type>
      <name>FieldInfo</name>
      <anchorfile>classMsgCppGenerator_1_1ClassInfo_1_1FieldInfo.html</anchorfile>
      <anchor>abf0300e629d4102c84d1905bd29c7ae2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>NEDElement *</type>
      <name>nedElement</name>
      <anchorfile>classMsgCppGenerator_1_1ClassInfo_1_1FieldInfo.html</anchorfile>
      <anchor>ae635af4bd8d9f5c1e7f867db829104b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>fname</name>
      <anchorfile>classMsgCppGenerator_1_1ClassInfo_1_1FieldInfo.html</anchorfile>
      <anchor>a61098c65a2bf105f2728896e500fc3c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>ftype</name>
      <anchorfile>classMsgCppGenerator_1_1ClassInfo_1_1FieldInfo.html</anchorfile>
      <anchor>addaf7e47580a718441a3106b7fef73f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>ftypeqname</name>
      <anchorfile>classMsgCppGenerator_1_1ClassInfo_1_1FieldInfo.html</anchorfile>
      <anchor>ab4306f64a03a5e8edf48f6bb03ad92c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>fval</name>
      <anchorfile>classMsgCppGenerator_1_1ClassInfo_1_1FieldInfo.html</anchorfile>
      <anchor>a57edf7ec442931d56f60ea6ffddd9cbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>fisabstract</name>
      <anchorfile>classMsgCppGenerator_1_1ClassInfo_1_1FieldInfo.html</anchorfile>
      <anchor>ae5317b29057ec8dca53e74763de4eff1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>fispointer</name>
      <anchorfile>classMsgCppGenerator_1_1ClassInfo_1_1FieldInfo.html</anchorfile>
      <anchor>a637a18ccb42b56bc276b6ca37dcad819</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>fisarray</name>
      <anchorfile>classMsgCppGenerator_1_1ClassInfo_1_1FieldInfo.html</anchorfile>
      <anchor>aaf874406f4c92e625de81c18dd558fd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>farraysize</name>
      <anchorfile>classMsgCppGenerator_1_1ClassInfo_1_1FieldInfo.html</anchorfile>
      <anchor>ab0ca3036052c3e631ebe3b615ef82409</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Properties</type>
      <name>fprops</name>
      <anchorfile>classMsgCppGenerator_1_1ClassInfo_1_1FieldInfo.html</anchorfile>
      <anchor>ab1847e0df3befd72a45f800d8ddb6e90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>fkind</name>
      <anchorfile>classMsgCppGenerator_1_1ClassInfo_1_1FieldInfo.html</anchorfile>
      <anchor>af55e4411c5fc6f1fd264be73c192e03f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ClassType</type>
      <name>classtype</name>
      <anchorfile>classMsgCppGenerator_1_1ClassInfo_1_1FieldInfo.html</anchorfile>
      <anchor>a4969a8eb72773a2869b69d55d0600c70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>datatype</name>
      <anchorfile>classMsgCppGenerator_1_1ClassInfo_1_1FieldInfo.html</anchorfile>
      <anchor>af816961cddd5c6342a63f25390121bcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>argtype</name>
      <anchorfile>classMsgCppGenerator_1_1ClassInfo_1_1FieldInfo.html</anchorfile>
      <anchor>a5ad2d7590e16803eb9df3e5532774562</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>rettype</name>
      <anchorfile>classMsgCppGenerator_1_1ClassInfo_1_1FieldInfo.html</anchorfile>
      <anchor>afb95ddaad8e5ced47782f278dc2abc5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>var</name>
      <anchorfile>classMsgCppGenerator_1_1ClassInfo_1_1FieldInfo.html</anchorfile>
      <anchor>a76acce45a04561e7afd7ccd9760609cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>argname</name>
      <anchorfile>classMsgCppGenerator_1_1ClassInfo_1_1FieldInfo.html</anchorfile>
      <anchor>ad9fb3872b4306a7618cb858afd43e480</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>varsize</name>
      <anchorfile>classMsgCppGenerator_1_1ClassInfo_1_1FieldInfo.html</anchorfile>
      <anchor>a553fc3d7df81be98542cb7727ecaea70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>fsizetype</name>
      <anchorfile>classMsgCppGenerator_1_1ClassInfo_1_1FieldInfo.html</anchorfile>
      <anchor>abfd4b7df7d48da87758b0f5374fc41a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>getter</name>
      <anchorfile>classMsgCppGenerator_1_1ClassInfo_1_1FieldInfo.html</anchorfile>
      <anchor>a794bb6d8933077f9a870a53e21c27211</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>setter</name>
      <anchorfile>classMsgCppGenerator_1_1ClassInfo_1_1FieldInfo.html</anchorfile>
      <anchor>a3e178b8d8003b3fff1a79793ff0537f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>alloc</name>
      <anchorfile>classMsgCppGenerator_1_1ClassInfo_1_1FieldInfo.html</anchorfile>
      <anchor>abb7e3ada41900c8251288fa786c09ed1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>getsize</name>
      <anchorfile>classMsgCppGenerator_1_1ClassInfo_1_1FieldInfo.html</anchorfile>
      <anchor>a35af8ff8d130248267759648cbf3cdf2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>tostring</name>
      <anchorfile>classMsgCppGenerator_1_1ClassInfo_1_1FieldInfo.html</anchorfile>
      <anchor>ac8220a94257aa98f83fa08448931ed9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>fromstring</name>
      <anchorfile>classMsgCppGenerator_1_1ClassInfo_1_1FieldInfo.html</anchorfile>
      <anchor>a22dcd9e8261a479e9e27c5fc62ae4ef2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>maybe_c_str</name>
      <anchorfile>classMsgCppGenerator_1_1ClassInfo_1_1FieldInfo.html</anchorfile>
      <anchor>a474ff1717455f593c44fd49f5d988606</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>enumname</name>
      <anchorfile>classMsgCppGenerator_1_1ClassInfo_1_1FieldInfo.html</anchorfile>
      <anchor>a0ba1b5357c558952f7abdc270545b66c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>enumqname</name>
      <anchorfile>classMsgCppGenerator_1_1ClassInfo_1_1FieldInfo.html</anchorfile>
      <anchor>ab06e08b06bb501b403f5354cd7f0fd43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>fnopack</name>
      <anchorfile>classMsgCppGenerator_1_1ClassInfo_1_1FieldInfo.html</anchorfile>
      <anchor>a3892b068cd65fffdb76a8a254f031de2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>feditable</name>
      <anchorfile>classMsgCppGenerator_1_1ClassInfo_1_1FieldInfo.html</anchorfile>
      <anchor>ae42ff11d92f7b7a00f7a8c91b78fcb44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>fopaque</name>
      <anchorfile>classMsgCppGenerator_1_1ClassInfo_1_1FieldInfo.html</anchorfile>
      <anchor>a4d73ef1673cfa7ebd8431bde1a2566e1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MsgCppGenerator::EnumInfo</name>
    <filename>classMsgCppGenerator_1_1EnumInfo.html</filename>
    <class kind="class">MsgCppGenerator::EnumInfo::EnumItem</class>
    <member kind="typedef">
      <type>std::vector&lt; EnumItem &gt;</type>
      <name>FieldList</name>
      <anchorfile>classMsgCppGenerator_1_1EnumInfo.html</anchorfile>
      <anchor>addac942bff953210218b5f98aaa9f3ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EnumInfo</name>
      <anchorfile>classMsgCppGenerator_1_1EnumInfo.html</anchorfile>
      <anchor>a7790bb47f719d13faf21ec8efdce3ead</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>EnumElement *</type>
      <name>nedElement</name>
      <anchorfile>classMsgCppGenerator_1_1EnumInfo.html</anchorfile>
      <anchor>a63b9edf2d0da82ac1fdfc1d0d5258054</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>enumName</name>
      <anchorfile>classMsgCppGenerator_1_1EnumInfo.html</anchorfile>
      <anchor>ad02011628d180221bc4699c6b864dbeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>enumQName</name>
      <anchorfile>classMsgCppGenerator_1_1EnumInfo.html</anchorfile>
      <anchor>a406ce4a85e0cdc521434fea66c7ff494</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FieldList</type>
      <name>fieldlist</name>
      <anchorfile>classMsgCppGenerator_1_1EnumInfo.html</anchorfile>
      <anchor>aec53a9bc4b86d9fd0fc259bf4f3c18ff</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MsgCppGenerator::EnumInfo::EnumItem</name>
    <filename>classMsgCppGenerator_1_1EnumInfo_1_1EnumItem.html</filename>
    <member kind="function">
      <type></type>
      <name>EnumItem</name>
      <anchorfile>classMsgCppGenerator_1_1EnumInfo_1_1EnumItem.html</anchorfile>
      <anchor>ad51cd7cac91616180d774fe359efa1d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>NEDElement *</type>
      <name>nedElement</name>
      <anchorfile>classMsgCppGenerator_1_1EnumInfo_1_1EnumItem.html</anchorfile>
      <anchor>a619333ba07b2697bb63057957a95a22f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classMsgCppGenerator_1_1EnumInfo_1_1EnumItem.html</anchorfile>
      <anchor>a0352521ffdea69a1e96b3934b216a10c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>value</name>
      <anchorfile>classMsgCppGenerator_1_1EnumInfo_1_1EnumItem.html</anchorfile>
      <anchor>a5319d2447c569a4364e862b5885579d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>comment</name>
      <anchorfile>classMsgCppGenerator_1_1EnumInfo_1_1EnumItem.html</anchorfile>
      <anchor>a658dab403534b35d833509cd5a6a6ffc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>MsgCppGenerator::TypeDesc</name>
    <filename>structMsgCppGenerator_1_1TypeDesc.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeDesc</name>
      <anchorfile>structMsgCppGenerator_1_1TypeDesc.html</anchorfile>
      <anchor>a0d5eaca40318f3a980d7ade914c21e50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeDesc</name>
      <anchorfile>structMsgCppGenerator_1_1TypeDesc.html</anchorfile>
      <anchor>aaaa5bfd921e8a923a501e7aeafa86d5b</anchor>
      <arglist>(const char *fromstring, const char *tostring)</arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>fromstring</name>
      <anchorfile>structMsgCppGenerator_1_1TypeDesc.html</anchorfile>
      <anchor>a4b1f7c0f9e4ff8ad61eebc6576cbba93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>tostring</name>
      <anchorfile>structMsgCppGenerator_1_1TypeDesc.html</anchorfile>
      <anchor>a0022434fa94c228b062f97124354b710</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>MsgCppGeneratorOptions</name>
    <filename>structMsgCppGeneratorOptions.html</filename>
    <member kind="function">
      <type></type>
      <name>MsgCppGeneratorOptions</name>
      <anchorfile>structMsgCppGeneratorOptions.html</anchorfile>
      <anchor>ae067985bc3484ef7028613fd4529df47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>exportdef</name>
      <anchorfile>structMsgCppGeneratorOptions.html</anchorfile>
      <anchor>ae9fbc3e8e91a64748ce99aafd2ed5751</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>generate_classes</name>
      <anchorfile>structMsgCppGeneratorOptions.html</anchorfile>
      <anchor>aedb70a9213b59de6b58c7e58c13d2b49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>generate_descriptors</name>
      <anchorfile>structMsgCppGeneratorOptions.html</anchorfile>
      <anchor>a8c7982ef81d5eb29556fcaa9c0bab341</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>generate_setters_in_descriptors</name>
      <anchorfile>structMsgCppGeneratorOptions.html</anchorfile>
      <anchor>abaffd8e34fccd7d84adabc05f5801625</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MsgFileElement</name>
    <filename>classMsgFileElement.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>MsgFileElement</name>
      <anchorfile>classMsgFileElement.html</anchorfile>
      <anchor>a1194f2b8151dd87580bd1785126a7f54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MsgFileElement</name>
      <anchorfile>classMsgFileElement.html</anchorfile>
      <anchor>a3cb61785bab5a1abbb8f0874856fdf80</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MsgFileElement</name>
      <anchorfile>classMsgFileElement.html</anchorfile>
      <anchor>aa391d25993cfca1444783c63cc8316fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classMsgFileElement.html</anchorfile>
      <anchor>abd544b059529f20557624bcefd22681d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classMsgFileElement.html</anchorfile>
      <anchor>a0426d129b34c6183e2b02a68baabd3ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classMsgFileElement.html</anchorfile>
      <anchor>a3844bff265c95f955a4abe6b2bec983f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classMsgFileElement.html</anchorfile>
      <anchor>a9943f85654edc6f50af4f8277d4175d7</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classMsgFileElement.html</anchorfile>
      <anchor>a48b5bd97f79c331fa0ddb4ad5085c4da</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classMsgFileElement.html</anchorfile>
      <anchor>a842d1d724ae40ef62e467a25df9551ea</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classMsgFileElement.html</anchorfile>
      <anchor>a2fd92c9bdac9097908fd6293dcc6dc81</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classMsgFileElement.html</anchorfile>
      <anchor>aa5372a3317fd333aeaea2820e8506c80</anchor>
      <arglist>(const char *name, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classMsgFileElement.html</anchorfile>
      <anchor>a7e322ece9ead170617e13b9cf931657b</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MsgFileElement *</type>
      <name>dup</name>
      <anchorfile>classMsgFileElement.html</anchorfile>
      <anchor>a229ff849ea1672b65882ce88ab3eba33</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getFilename</name>
      <anchorfile>classMsgFileElement.html</anchorfile>
      <anchor>a3cf7cd751c9d01d115c91dfed18651a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFilename</name>
      <anchorfile>classMsgFileElement.html</anchorfile>
      <anchor>a06d98011d4262006c603b6aec5dd68c4</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getVersion</name>
      <anchorfile>classMsgFileElement.html</anchorfile>
      <anchor>a68e2388601a0a0607e8004111679b0b3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVersion</name>
      <anchorfile>classMsgFileElement.html</anchorfile>
      <anchor>ae6b6b6196dd58f6aae990345a6998b46</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MsgFileElement *</type>
      <name>getNextMsgFileSibling</name>
      <anchorfile>classMsgFileElement.html</anchorfile>
      <anchor>abfa656aef701219330ee77abb952c22e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CommentElement *</type>
      <name>getFirstCommentChild</name>
      <anchorfile>classMsgFileElement.html</anchorfile>
      <anchor>afa82488bed649a289248a623b5166b0b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NamespaceElement *</type>
      <name>getFirstNamespaceChild</name>
      <anchorfile>classMsgFileElement.html</anchorfile>
      <anchor>a313155484a19797fb7550449dda9d537</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PropertyDeclElement *</type>
      <name>getFirstPropertyDeclChild</name>
      <anchorfile>classMsgFileElement.html</anchorfile>
      <anchor>a51a3d33b2f4d2e282751679848707c64</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PropertyElement *</type>
      <name>getFirstPropertyChild</name>
      <anchorfile>classMsgFileElement.html</anchorfile>
      <anchor>abadfa4fa2f5b171feb44165880b823bf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CplusplusElement *</type>
      <name>getFirstCplusplusChild</name>
      <anchorfile>classMsgFileElement.html</anchorfile>
      <anchor>a9d537df7931a215004cff4b950429814</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StructDeclElement *</type>
      <name>getFirstStructDeclChild</name>
      <anchorfile>classMsgFileElement.html</anchorfile>
      <anchor>a06b094cefeacea0571ae6d58a4979f0b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ClassDeclElement *</type>
      <name>getFirstClassDeclChild</name>
      <anchorfile>classMsgFileElement.html</anchorfile>
      <anchor>af5ef06391d75ce329d26d6165c79f486</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MessageDeclElement *</type>
      <name>getFirstMessageDeclChild</name>
      <anchorfile>classMsgFileElement.html</anchorfile>
      <anchor>ae186063e080308ed9692890f415bfb2a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PacketDeclElement *</type>
      <name>getFirstPacketDeclChild</name>
      <anchorfile>classMsgFileElement.html</anchorfile>
      <anchor>aeb1145bb79e2a520af058527212b3a16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual EnumDeclElement *</type>
      <name>getFirstEnumDeclChild</name>
      <anchorfile>classMsgFileElement.html</anchorfile>
      <anchor>a22def0a49e89bd77416b46bdae0dcf8a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StructElement *</type>
      <name>getFirstStructChild</name>
      <anchorfile>classMsgFileElement.html</anchorfile>
      <anchor>af55b61e0d9b999f9b3b84efd339094b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ClassElement *</type>
      <name>getFirstClassChild</name>
      <anchorfile>classMsgFileElement.html</anchorfile>
      <anchor>a658f4961580accfa304d26eaaff6dbe2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MessageElement *</type>
      <name>getFirstMessageChild</name>
      <anchorfile>classMsgFileElement.html</anchorfile>
      <anchor>a32c2dc3735829484281366947d6a5048</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PacketElement *</type>
      <name>getFirstPacketChild</name>
      <anchorfile>classMsgFileElement.html</anchorfile>
      <anchor>a6a109232762f615d0f248a044d129b43</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual EnumElement *</type>
      <name>getFirstEnumChild</name>
      <anchorfile>classMsgFileElement.html</anchorfile>
      <anchor>a888f5b2c23ae96b2f6d54adb90323fce</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>my_yyltype</name>
    <filename>structmy__yyltype.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>dummy</name>
      <anchorfile>structmy__yyltype.html</anchorfile>
      <anchor>a1124325372be69b76d5f9b95fbed2d78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>first_line</name>
      <anchorfile>structmy__yyltype.html</anchorfile>
      <anchor>ac5932af440ccbef99721271a15bde6e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>first_column</name>
      <anchorfile>structmy__yyltype.html</anchorfile>
      <anchor>ac47ea06c03617f764b979da7bf3f9d5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>last_line</name>
      <anchorfile>structmy__yyltype.html</anchorfile>
      <anchor>a497f9626849c208f6a3ab7707449e5a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>last_column</name>
      <anchorfile>structmy__yyltype.html</anchorfile>
      <anchor>a78950c23bd753802728313277edfa122</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>text</name>
      <anchorfile>structmy__yyltype.html</anchorfile>
      <anchor>acf6b900c2e43ffc9c62300218379fba4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NamespaceElement</name>
    <filename>classNamespaceElement.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>NamespaceElement</name>
      <anchorfile>classNamespaceElement.html</anchorfile>
      <anchor>a7013b46290b9f05950d006362107824b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NamespaceElement</name>
      <anchorfile>classNamespaceElement.html</anchorfile>
      <anchor>a446217e538ee80d990e87fe2622b797c</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NamespaceElement</name>
      <anchorfile>classNamespaceElement.html</anchorfile>
      <anchor>a1b084cff47f26baaf974eb61964a5840</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classNamespaceElement.html</anchorfile>
      <anchor>a3360275535e5f98c2f38cb3286b83744</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classNamespaceElement.html</anchorfile>
      <anchor>a20675ae29b8f2376e4b99ba3cbf8346d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classNamespaceElement.html</anchorfile>
      <anchor>ac6a7be775a5dfeb6b4df0c1197296073</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classNamespaceElement.html</anchorfile>
      <anchor>ac1ac3ff7af63b0ecf6189d83251d18b0</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classNamespaceElement.html</anchorfile>
      <anchor>a5702ee10414d04258781070a975bfd28</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classNamespaceElement.html</anchorfile>
      <anchor>a30a4c42a83b812e1c5aed3406bd8acc1</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classNamespaceElement.html</anchorfile>
      <anchor>a269b6704961b82318061f7095cc2ef31</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classNamespaceElement.html</anchorfile>
      <anchor>a182369d6a02bbd6ba6169c829f483fad</anchor>
      <arglist>(const char *name, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classNamespaceElement.html</anchorfile>
      <anchor>a02c1847f937a4e3dbd46c049466b615e</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NamespaceElement *</type>
      <name>dup</name>
      <anchorfile>classNamespaceElement.html</anchorfile>
      <anchor>af9f1aa57ca80b2dcc1a01b4c121336c2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classNamespaceElement.html</anchorfile>
      <anchor>ae7c41f6398a27d3b1acbda9599595ca7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classNamespaceElement.html</anchorfile>
      <anchor>a0d2a0171007d319526fa56b45aa48a9d</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NamespaceElement *</type>
      <name>getNextNamespaceSibling</name>
      <anchorfile>classNamespaceElement.html</anchorfile>
      <anchor>a0642bd66dd034f1e8d679fd33e5cd919</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CommentElement *</type>
      <name>getFirstCommentChild</name>
      <anchorfile>classNamespaceElement.html</anchorfile>
      <anchor>af44d109d130559ac828395f75b6b5acd</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NED1Generator</name>
    <filename>classNED1Generator.html</filename>
    <member kind="function">
      <type></type>
      <name>NED1Generator</name>
      <anchorfile>classNED1Generator.html</anchorfile>
      <anchor>adbddd3cd86f15d8207fcf7ed21278ce9</anchor>
      <arglist>(NEDErrorStore *errors)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NED1Generator</name>
      <anchorfile>classNED1Generator.html</anchorfile>
      <anchor>aa0895a7031513595bab3b92b761e0961</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIndentSize</name>
      <anchorfile>classNED1Generator.html</anchorfile>
      <anchor>aac8171bb58a9136567aa7f93a9ad26a0</anchor>
      <arglist>(int indentsize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generate</name>
      <anchorfile>classNED1Generator.html</anchorfile>
      <anchor>a8e64991a1149fbdbed20f6856af266dc</anchor>
      <arglist>(std::ostream &amp;out, NEDElement *node, const char *indent)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>generate</name>
      <anchorfile>classNED1Generator.html</anchorfile>
      <anchor>aea81c766c30e2f071254ed30932ff8f7</anchor>
      <arglist>(NEDElement *node, const char *indent)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>generateNedItem</name>
      <anchorfile>classNED1Generator.html</anchorfile>
      <anchor>ad11e6efe46faba511540581166aa9f46</anchor>
      <arglist>(NEDElement *node, const char *indent, bool islast, const char *arg=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>generateChildren</name>
      <anchorfile>classNED1Generator.html</anchorfile>
      <anchor>aa01056c76ce29547798ae278d3784682</anchor>
      <arglist>(NEDElement *node, const char *indent, const char *arg=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>generateChildrenWithType</name>
      <anchorfile>classNED1Generator.html</anchorfile>
      <anchor>a00586cac57de7adb9260a0d537f1ca6f</anchor>
      <arglist>(NEDElement *node, int tagcode, const char *indent, const char *arg=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>generateChildrenWithTypes</name>
      <anchorfile>classNED1Generator.html</anchorfile>
      <anchor>a794d56094de82d357e87890190084205</anchor>
      <arglist>(NEDElement *node, int tagcodes[], const char *indent, const char *arg=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const char *</type>
      <name>increaseIndent</name>
      <anchorfile>classNED1Generator.html</anchorfile>
      <anchor>a55df20701be6a4033cdab54cb8643540</anchor>
      <arglist>(const char *indent)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const char *</type>
      <name>decreaseIndent</name>
      <anchorfile>classNED1Generator.html</anchorfile>
      <anchor>ad85fd694b9b77dfc8c14588e38fc5b91</anchor>
      <arglist>(const char *indent)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printInheritance</name>
      <anchorfile>classNED1Generator.html</anchorfile>
      <anchor>a83a536337e7b14a2e68b5999eaed4e9a</anchor>
      <arglist>(NEDElement *node, const char *indent)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>hasExpression</name>
      <anchorfile>classNED1Generator.html</anchorfile>
      <anchor>a2e3707b457cb87b2893d2b9772fad781</anchor>
      <arglist>(NEDElement *node, const char *attr)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printExpression</name>
      <anchorfile>classNED1Generator.html</anchorfile>
      <anchor>a8ab120c077467cb1db760a903db71090</anchor>
      <arglist>(NEDElement *node, const char *attr, const char *indent)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printOptVector</name>
      <anchorfile>classNED1Generator.html</anchorfile>
      <anchor>aff3b3216a2a88f34c2867ce0ecee6bb7</anchor>
      <arglist>(NEDElement *node, const char *attr, const char *indent)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>getDisplayStringOf</name>
      <anchorfile>classNED1Generator.html</anchorfile>
      <anchor>a6c1921d8c3266be3f1965f290483f5ab</anchor>
      <arglist>(NEDElement *node, PropertyElement *&amp;outDisplayProp)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const char *</type>
      <name>getPromptTextOf</name>
      <anchorfile>classNED1Generator.html</anchorfile>
      <anchor>a16046ed83ecd3ef7614164842fbc1047</anchor>
      <arglist>(ParamElement *param)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>concatInnerComments</name>
      <anchorfile>classNED1Generator.html</anchorfile>
      <anchor>a5dac57ffcac52f28885e404e623cc5d8</anchor>
      <arglist>(NEDElement *node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>getBannerComment</name>
      <anchorfile>classNED1Generator.html</anchorfile>
      <anchor>a5f330ea0965c8963fda16458183a9f5d</anchor>
      <arglist>(NEDElement *node, const char *indent)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>getRightComment</name>
      <anchorfile>classNED1Generator.html</anchorfile>
      <anchor>aebc78b0b6c8ad58a006609f1ddf150ec</anchor>
      <arglist>(NEDElement *node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>getInlineRightComment</name>
      <anchorfile>classNED1Generator.html</anchorfile>
      <anchor>a817db547fdbd82f12c82d98f08d8ad23</anchor>
      <arglist>(NEDElement *node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>getTrailingComment</name>
      <anchorfile>classNED1Generator.html</anchorfile>
      <anchor>af00058d3926c69d3a3c7f0359e416a14</anchor>
      <arglist>(NEDElement *node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doNedfiles</name>
      <anchorfile>classNED1Generator.html</anchorfile>
      <anchor>a2df28fb89b759634f7c40c3b956b3a43</anchor>
      <arglist>(FilesElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doNedfile</name>
      <anchorfile>classNED1Generator.html</anchorfile>
      <anchor>afc2f2e183dbb265c0feec3578ab6bb02</anchor>
      <arglist>(NedFileElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doImport</name>
      <anchorfile>classNED1Generator.html</anchorfile>
      <anchor>a9068539d22b65077d40f7f47ae87d5bb</anchor>
      <arglist>(ImportElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doPropertyDecl</name>
      <anchorfile>classNED1Generator.html</anchorfile>
      <anchor>a0f648ba092a7aa49e0e7da69f3eb7236</anchor>
      <arglist>(PropertyDeclElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doExtends</name>
      <anchorfile>classNED1Generator.html</anchorfile>
      <anchor>ad9fc12e51372992dc6cd81a698b9b057</anchor>
      <arglist>(ExtendsElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doInterfaceName</name>
      <anchorfile>classNED1Generator.html</anchorfile>
      <anchor>a9de94084a289723e99881cc0d8c8ef43</anchor>
      <arglist>(InterfaceNameElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doSimpleModule</name>
      <anchorfile>classNED1Generator.html</anchorfile>
      <anchor>a4014d60b2e0fd30e402c9867c74d1631</anchor>
      <arglist>(SimpleModuleElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doModuleInterface</name>
      <anchorfile>classNED1Generator.html</anchorfile>
      <anchor>a9e8473226c8d589446c711ac1d22afbd</anchor>
      <arglist>(ModuleInterfaceElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doCompoundModule</name>
      <anchorfile>classNED1Generator.html</anchorfile>
      <anchor>af153a234f6cad5d9c5c8682de8f3c62e</anchor>
      <arglist>(CompoundModuleElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doChannelInterface</name>
      <anchorfile>classNED1Generator.html</anchorfile>
      <anchor>aad4afe3bd684ca2c4a9b934f4c439814</anchor>
      <arglist>(ChannelInterfaceElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doChannel</name>
      <anchorfile>classNED1Generator.html</anchorfile>
      <anchor>a5a84243db233f4574415838096c4f9ee</anchor>
      <arglist>(ChannelElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doParameters</name>
      <anchorfile>classNED1Generator.html</anchorfile>
      <anchor>ab7aef0746a089d482f3459c80bee1b63</anchor>
      <arglist>(ParametersElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doModuleParameters</name>
      <anchorfile>classNED1Generator.html</anchorfile>
      <anchor>afe3e0bb0db5fa52989b8697688a78e16</anchor>
      <arglist>(ParametersElement *node, const char *indent)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doChannelParameters</name>
      <anchorfile>classNED1Generator.html</anchorfile>
      <anchor>a1245061ddacc79cf10c181d112aa46ae</anchor>
      <arglist>(ParametersElement *node, const char *indent)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doSubstParameters</name>
      <anchorfile>classNED1Generator.html</anchorfile>
      <anchor>a39914afd6972ac6bc4951574a38b3f37</anchor>
      <arglist>(ParametersElement *node, const char *indent)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doConnectionAttributes</name>
      <anchorfile>classNED1Generator.html</anchorfile>
      <anchor>a52d58546cea8e48f115bd88784ce2406</anchor>
      <arglist>(ParametersElement *node, const char *indent)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doParam</name>
      <anchorfile>classNED1Generator.html</anchorfile>
      <anchor>a0ecb24d7b03a601d11a8286ab0ba23a9</anchor>
      <arglist>(ParamElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doModuleParam</name>
      <anchorfile>classNED1Generator.html</anchorfile>
      <anchor>aab387db40645b1abe5c6cad8c294ee99</anchor>
      <arglist>(ParamElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doSubstParam</name>
      <anchorfile>classNED1Generator.html</anchorfile>
      <anchor>a6fdadd58117a8be50444c331b5be9bb8</anchor>
      <arglist>(ParamElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doChannelParam</name>
      <anchorfile>classNED1Generator.html</anchorfile>
      <anchor>aa843c3fbe9725eb0c6b3b957041b91e3</anchor>
      <arglist>(ParamElement *node, const char *indent)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doProperty</name>
      <anchorfile>classNED1Generator.html</anchorfile>
      <anchor>afaf7e217c14a9a2360d681b5a48ab171</anchor>
      <arglist>(PropertyElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doPropertyKey</name>
      <anchorfile>classNED1Generator.html</anchorfile>
      <anchor>a806cf86cd613e7433b01d5dc64ba169a</anchor>
      <arglist>(PropertyKeyElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doGates</name>
      <anchorfile>classNED1Generator.html</anchorfile>
      <anchor>a9caf10573927fc0c6ceec800502e67f7</anchor>
      <arglist>(GatesElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doModuleGates</name>
      <anchorfile>classNED1Generator.html</anchorfile>
      <anchor>acda8291bb123fcc403dcec9db024cb27</anchor>
      <arglist>(GatesElement *node, const char *indent)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doSubmoduleGatesizes</name>
      <anchorfile>classNED1Generator.html</anchorfile>
      <anchor>a2ed34f0001dc8b83d4fb6265ae689c32</anchor>
      <arglist>(GatesElement *node, const char *indent)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doGate</name>
      <anchorfile>classNED1Generator.html</anchorfile>
      <anchor>aef990252945dde8081f94e5b52d89842</anchor>
      <arglist>(GateElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doModuleGate</name>
      <anchorfile>classNED1Generator.html</anchorfile>
      <anchor>af77ac060ea29d8642a8a7481367da724</anchor>
      <arglist>(GateElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doGatesize</name>
      <anchorfile>classNED1Generator.html</anchorfile>
      <anchor>a0aa761771defdcddac46be99616ae08b</anchor>
      <arglist>(GateElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doTypes</name>
      <anchorfile>classNED1Generator.html</anchorfile>
      <anchor>a4d35ee7fcb2d176b4b8cc37f96381167</anchor>
      <arglist>(TypesElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doSubmodules</name>
      <anchorfile>classNED1Generator.html</anchorfile>
      <anchor>a25e69b9aebf7cbb645da09b9b992d540</anchor>
      <arglist>(SubmodulesElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doSubmodule</name>
      <anchorfile>classNED1Generator.html</anchorfile>
      <anchor>a41db5272ec76b86b87578f4be7cd329e</anchor>
      <arglist>(SubmoduleElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doConnections</name>
      <anchorfile>classNED1Generator.html</anchorfile>
      <anchor>af616822b583a3ee222b0d1a0dd350c81</anchor>
      <arglist>(ConnectionsElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doConnection</name>
      <anchorfile>classNED1Generator.html</anchorfile>
      <anchor>ab215d8697e1b9c29da863b7ea281ba1c</anchor>
      <arglist>(ConnectionElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doConnectionGroup</name>
      <anchorfile>classNED1Generator.html</anchorfile>
      <anchor>a8ce2bc56eae469481c2466d5ed1d2cfc</anchor>
      <arglist>(ConnectionGroupElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doLoop</name>
      <anchorfile>classNED1Generator.html</anchorfile>
      <anchor>a8e78a835414208d96777b90d5fbd8217</anchor>
      <arglist>(LoopElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doCondition</name>
      <anchorfile>classNED1Generator.html</anchorfile>
      <anchor>a86f4ab852fde6844bbddfa18521a6999</anchor>
      <arglist>(ConditionElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printConnectionGate</name>
      <anchorfile>classNED1Generator.html</anchorfile>
      <anchor>aa5b833c195f1460165b62854b87706df</anchor>
      <arglist>(NEDElement *conn, const char *modname, const char *modindexattr, const char *gatename, const char *gateindexattr, bool isplusplus, int gatesubg, const char *indent)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doExpression</name>
      <anchorfile>classNED1Generator.html</anchorfile>
      <anchor>a7b20561445a14eda6c66465891e6ada1</anchor>
      <arglist>(ExpressionElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>getOperatorPrecedence</name>
      <anchorfile>classNED1Generator.html</anchorfile>
      <anchor>acd65df607dac9191d033095468b4b04b</anchor>
      <arglist>(const char *op, int args)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isOperatorLeftAssoc</name>
      <anchorfile>classNED1Generator.html</anchorfile>
      <anchor>aa92198aa0ba0b26f683c0c228fddf786</anchor>
      <arglist>(const char *op)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doOperator</name>
      <anchorfile>classNED1Generator.html</anchorfile>
      <anchor>ac4a85a515f30c9c3356999f04e9f8f45</anchor>
      <arglist>(OperatorElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doFunction</name>
      <anchorfile>classNED1Generator.html</anchorfile>
      <anchor>a24c5c77be82d79f7bcb3cd6ff2a36bd1</anchor>
      <arglist>(FunctionElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doIdent</name>
      <anchorfile>classNED1Generator.html</anchorfile>
      <anchor>a95966a67d1f93e77045fa8428eb41621</anchor>
      <arglist>(IdentElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doLiteral</name>
      <anchorfile>classNED1Generator.html</anchorfile>
      <anchor>a5c3e9d30ee504d9b5dc7a49be2328051</anchor>
      <arglist>(LiteralElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>indentsize</name>
      <anchorfile>classNED1Generator.html</anchorfile>
      <anchor>a200f412a3139b6a3c2ecc6b8cc794e70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::ostream *</type>
      <name>outp</name>
      <anchorfile>classNED1Generator.html</anchorfile>
      <anchor>ac250f5e4fb36cd1df718c2ba79c19be2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NEDErrorStore *</type>
      <name>errors</name>
      <anchorfile>classNED1Generator.html</anchorfile>
      <anchor>a2ba286b1b57304edc734b57e17538dd9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NED2Generator</name>
    <filename>classNED2Generator.html</filename>
    <member kind="function">
      <type></type>
      <name>NED2Generator</name>
      <anchorfile>classNED2Generator.html</anchorfile>
      <anchor>a701a4fa4cebc3b8fbb6b9182c599f6f4</anchor>
      <arglist>(NEDErrorStore *errors)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NED2Generator</name>
      <anchorfile>classNED2Generator.html</anchorfile>
      <anchor>a5689c1dbf583ca01bd531c90614365f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIndentSize</name>
      <anchorfile>classNED2Generator.html</anchorfile>
      <anchor>a698a6d8ad1e7e2c6088bf3a881962c6e</anchor>
      <arglist>(int indentsize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generate</name>
      <anchorfile>classNED2Generator.html</anchorfile>
      <anchor>ad24c78a3fb8443d26c9f698f5b7aa874</anchor>
      <arglist>(std::ostream &amp;out, NEDElement *node, const char *indent)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>generate</name>
      <anchorfile>classNED2Generator.html</anchorfile>
      <anchor>a6cb5273315dfca19b7680f6438d02e47</anchor>
      <arglist>(NEDElement *node, const char *indent)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>generateNedItem</name>
      <anchorfile>classNED2Generator.html</anchorfile>
      <anchor>a072ea7e095c89acbadcc3674dfd1c99a</anchor>
      <arglist>(NEDElement *node, const char *indent, bool islast, const char *arg=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>generateChildren</name>
      <anchorfile>classNED2Generator.html</anchorfile>
      <anchor>a637d978376b441506c8012c8271b099e</anchor>
      <arglist>(NEDElement *node, const char *indent, const char *arg=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>generateChildrenWithType</name>
      <anchorfile>classNED2Generator.html</anchorfile>
      <anchor>a9a2fb01cad95daeb0a5ec68150a532d0</anchor>
      <arglist>(NEDElement *node, int tagcode, const char *indent, const char *arg=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>generateChildrenWithTypes</name>
      <anchorfile>classNED2Generator.html</anchorfile>
      <anchor>a6127454a88d4fe657627d6e5a965c365</anchor>
      <arglist>(NEDElement *node, int tagcodes[], const char *indent, const char *arg=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const char *</type>
      <name>increaseIndent</name>
      <anchorfile>classNED2Generator.html</anchorfile>
      <anchor>a2f332e717c695f2f5c0c1d6c56e897e9</anchor>
      <arglist>(const char *indent)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const char *</type>
      <name>decreaseIndent</name>
      <anchorfile>classNED2Generator.html</anchorfile>
      <anchor>ad16208ac2d1db8e389fb63b2230bb26c</anchor>
      <arglist>(const char *indent)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printInheritance</name>
      <anchorfile>classNED2Generator.html</anchorfile>
      <anchor>a5cd38d8560564eeabef6de63dab13a21</anchor>
      <arglist>(NEDElement *node, const char *indent)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>hasExpression</name>
      <anchorfile>classNED2Generator.html</anchorfile>
      <anchor>afb3604463fbfd7408b47f2272cf17b9a</anchor>
      <arglist>(NEDElement *node, const char *attr)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printExpression</name>
      <anchorfile>classNED2Generator.html</anchorfile>
      <anchor>a0d64b1b051266f60cdf435db93ec4530</anchor>
      <arglist>(NEDElement *node, const char *attr, const char *indent)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printOptVector</name>
      <anchorfile>classNED2Generator.html</anchorfile>
      <anchor>a56944927805f350a56463391a53923ce</anchor>
      <arglist>(NEDElement *node, const char *attr, const char *indent)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doMsgClassOrStructBody</name>
      <anchorfile>classNED2Generator.html</anchorfile>
      <anchor>a75ec62e51cbd650911092fa9ce74dbb5</anchor>
      <arglist>(NEDElement *msgclassorstruct, const char *indent)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>concatInnerComments</name>
      <anchorfile>classNED2Generator.html</anchorfile>
      <anchor>a774eea50477440480355ca357522a26d</anchor>
      <arglist>(NEDElement *node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>getBannerComment</name>
      <anchorfile>classNED2Generator.html</anchorfile>
      <anchor>adfd170fccba7fd920fc416e4eb5827cd</anchor>
      <arglist>(NEDElement *node, const char *indent)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>getRightComment</name>
      <anchorfile>classNED2Generator.html</anchorfile>
      <anchor>a135fbfeccd2878fc2c287357b14823f9</anchor>
      <arglist>(NEDElement *node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>getInlineRightComment</name>
      <anchorfile>classNED2Generator.html</anchorfile>
      <anchor>a86e0856457acaf329b6221c196019259</anchor>
      <arglist>(NEDElement *node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>getTrailingComment</name>
      <anchorfile>classNED2Generator.html</anchorfile>
      <anchor>a028fe11be4201e3ecf40ec5080ea21a4</anchor>
      <arglist>(NEDElement *node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doFiles</name>
      <anchorfile>classNED2Generator.html</anchorfile>
      <anchor>a6fa59ecfacbc872e206c0792dcea60d6</anchor>
      <arglist>(FilesElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doNedFile</name>
      <anchorfile>classNED2Generator.html</anchorfile>
      <anchor>a9fe8e63d3be4dc6921304b1a7d4dccd3</anchor>
      <arglist>(NedFileElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doPackage</name>
      <anchorfile>classNED2Generator.html</anchorfile>
      <anchor>a4d29c73d1d5688963becb4e8a734c92b</anchor>
      <arglist>(PackageElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doImport</name>
      <anchorfile>classNED2Generator.html</anchorfile>
      <anchor>aacfb42bc37322baf5cd8335adf61bf7c</anchor>
      <arglist>(ImportElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doPropertyDecl</name>
      <anchorfile>classNED2Generator.html</anchorfile>
      <anchor>ae81b0f65baf8a2853344139043ce377c</anchor>
      <arglist>(PropertyDeclElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doExtends</name>
      <anchorfile>classNED2Generator.html</anchorfile>
      <anchor>a43e62402598bbf7bbff4ca80c23bdcc6</anchor>
      <arglist>(ExtendsElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doInterfaceName</name>
      <anchorfile>classNED2Generator.html</anchorfile>
      <anchor>a3e37e79984590d5222a5e09ea28f1557</anchor>
      <arglist>(InterfaceNameElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doSimpleModule</name>
      <anchorfile>classNED2Generator.html</anchorfile>
      <anchor>aa675821327a2e727b45f4656e5bbdd5d</anchor>
      <arglist>(SimpleModuleElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doModuleInterface</name>
      <anchorfile>classNED2Generator.html</anchorfile>
      <anchor>a7d9a5f0a22247ae07200b051a56c7586</anchor>
      <arglist>(ModuleInterfaceElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doCompoundModule</name>
      <anchorfile>classNED2Generator.html</anchorfile>
      <anchor>a7aeeea5291d3be4f4674773a1130f19a</anchor>
      <arglist>(CompoundModuleElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doChannelInterface</name>
      <anchorfile>classNED2Generator.html</anchorfile>
      <anchor>a6157825fd286e84159a95b7ca0874066</anchor>
      <arglist>(ChannelInterfaceElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doChannel</name>
      <anchorfile>classNED2Generator.html</anchorfile>
      <anchor>a777b78748df93d47fe292f93b99badc6</anchor>
      <arglist>(ChannelElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doParameters</name>
      <anchorfile>classNED2Generator.html</anchorfile>
      <anchor>a2e028072745b2ff2818f6ebc6a05f7aa</anchor>
      <arglist>(ParametersElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doParam</name>
      <anchorfile>classNED2Generator.html</anchorfile>
      <anchor>a5540fcf12b13ad4e2d47f09376ff7406</anchor>
      <arglist>(ParamElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doProperty</name>
      <anchorfile>classNED2Generator.html</anchorfile>
      <anchor>af1bbf1fbd18004abf7509793931fb583</anchor>
      <arglist>(PropertyElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doPropertyKey</name>
      <anchorfile>classNED2Generator.html</anchorfile>
      <anchor>a9f66cba527bfffd69bbc159c5e0f1302</anchor>
      <arglist>(PropertyKeyElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doGates</name>
      <anchorfile>classNED2Generator.html</anchorfile>
      <anchor>aeeb0e44b56d2f9d666d8fd7e174212ed</anchor>
      <arglist>(GatesElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doGate</name>
      <anchorfile>classNED2Generator.html</anchorfile>
      <anchor>a4bfc93d732e30e1d69a41a1cb223f9ca</anchor>
      <arglist>(GateElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doTypes</name>
      <anchorfile>classNED2Generator.html</anchorfile>
      <anchor>aeeea361435ba7c401c47a1e48b4acd01</anchor>
      <arglist>(TypesElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doSubmodules</name>
      <anchorfile>classNED2Generator.html</anchorfile>
      <anchor>a18c60c9180808234871c93bc377f90a4</anchor>
      <arglist>(SubmodulesElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doSubmodule</name>
      <anchorfile>classNED2Generator.html</anchorfile>
      <anchor>ab3dfae2d3d09c92d95d74e3d38ba488b</anchor>
      <arglist>(SubmoduleElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doConnections</name>
      <anchorfile>classNED2Generator.html</anchorfile>
      <anchor>a09150204029514d29f504450cf6b8dcf</anchor>
      <arglist>(ConnectionsElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doConnection</name>
      <anchorfile>classNED2Generator.html</anchorfile>
      <anchor>a99cf23fe630107d5169f1ab141073141</anchor>
      <arglist>(ConnectionElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doConnectionGroup</name>
      <anchorfile>classNED2Generator.html</anchorfile>
      <anchor>af7daa8f7e978191d02c96238d966ee69</anchor>
      <arglist>(ConnectionGroupElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doLoop</name>
      <anchorfile>classNED2Generator.html</anchorfile>
      <anchor>a278d9421d6da40421ddb05aa48b7fecf</anchor>
      <arglist>(LoopElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doCondition</name>
      <anchorfile>classNED2Generator.html</anchorfile>
      <anchor>a30f3dc8aae0401b4c6f61fa51e61c334</anchor>
      <arglist>(ConditionElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printConnectionGate</name>
      <anchorfile>classNED2Generator.html</anchorfile>
      <anchor>a2183d3d7babd3965eb49286af2acb0d7</anchor>
      <arglist>(NEDElement *conn, const char *modname, const char *modindexattr, const char *gatename, const char *gateindexattr, bool isplusplus, int gatesubg, const char *indent)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doExpression</name>
      <anchorfile>classNED2Generator.html</anchorfile>
      <anchor>ac30abb3fedce98b329999f08fe5ba43a</anchor>
      <arglist>(ExpressionElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>getOperatorPrecedence</name>
      <anchorfile>classNED2Generator.html</anchorfile>
      <anchor>a8e80534476b88408375d53264aeffbb9</anchor>
      <arglist>(const char *op, int args)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isOperatorLeftAssoc</name>
      <anchorfile>classNED2Generator.html</anchorfile>
      <anchor>a83b492c375b507af76039589ab15fb7d</anchor>
      <arglist>(const char *op)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doOperator</name>
      <anchorfile>classNED2Generator.html</anchorfile>
      <anchor>a6d4d14bce5f28411af05125fdbdcbc40</anchor>
      <arglist>(OperatorElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doFunction</name>
      <anchorfile>classNED2Generator.html</anchorfile>
      <anchor>ad9a2dff997a5b704f54b7f7cd411b9c2</anchor>
      <arglist>(FunctionElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doIdent</name>
      <anchorfile>classNED2Generator.html</anchorfile>
      <anchor>aec6991d716dc5e66ec7afa7d2c048224</anchor>
      <arglist>(IdentElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doLiteral</name>
      <anchorfile>classNED2Generator.html</anchorfile>
      <anchor>a52ef0802245ab55bc9881cc270e26276</anchor>
      <arglist>(LiteralElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doMsgFile</name>
      <anchorfile>classNED2Generator.html</anchorfile>
      <anchor>aaaa5eaa07e1acab4194a2b3d87ff4794</anchor>
      <arglist>(MsgFileElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doNamespace</name>
      <anchorfile>classNED2Generator.html</anchorfile>
      <anchor>aed352096e0eddb3d07b148ae7f2efadb</anchor>
      <arglist>(NamespaceElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doCplusplus</name>
      <anchorfile>classNED2Generator.html</anchorfile>
      <anchor>a79c7ef720b76e688a239dec063709fec</anchor>
      <arglist>(CplusplusElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doStructDecl</name>
      <anchorfile>classNED2Generator.html</anchorfile>
      <anchor>a7ef1f857e75a63caf54477700a32fe17</anchor>
      <arglist>(StructDeclElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doClassDecl</name>
      <anchorfile>classNED2Generator.html</anchorfile>
      <anchor>a923801e5bec34877e65f2445a9f68ee0</anchor>
      <arglist>(ClassDeclElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doMessageDecl</name>
      <anchorfile>classNED2Generator.html</anchorfile>
      <anchor>a411a42a751ad402ffc2cb9b420bc9825</anchor>
      <arglist>(MessageDeclElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doPacketDecl</name>
      <anchorfile>classNED2Generator.html</anchorfile>
      <anchor>a7c9469bc9847c62a9f3f316fbfbb2874</anchor>
      <arglist>(PacketDeclElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doEnumDecl</name>
      <anchorfile>classNED2Generator.html</anchorfile>
      <anchor>a8549bf7f7f56d14f79bee9a3e336dc85</anchor>
      <arglist>(EnumDeclElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doEnum</name>
      <anchorfile>classNED2Generator.html</anchorfile>
      <anchor>a0d535e1d052dea245f9350415778d78d</anchor>
      <arglist>(EnumElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doEnumFields</name>
      <anchorfile>classNED2Generator.html</anchorfile>
      <anchor>a4540bbd28d84bb6c40cbdc268d0dc59a</anchor>
      <arglist>(EnumFieldsElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doEnumField</name>
      <anchorfile>classNED2Generator.html</anchorfile>
      <anchor>a3cfbe45fb2d70b2e5142feb5eba717e9</anchor>
      <arglist>(EnumFieldElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doMessage</name>
      <anchorfile>classNED2Generator.html</anchorfile>
      <anchor>afceb54ac35749b1612486bd2ba4232ab</anchor>
      <arglist>(MessageElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doPacket</name>
      <anchorfile>classNED2Generator.html</anchorfile>
      <anchor>ac545f050cfb898516c76c545870e11de</anchor>
      <arglist>(PacketElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doClass</name>
      <anchorfile>classNED2Generator.html</anchorfile>
      <anchor>a68625f751ed55cd383354cae4f348641</anchor>
      <arglist>(ClassElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doStruct</name>
      <anchorfile>classNED2Generator.html</anchorfile>
      <anchor>a6131552c7f916ee7832157725375d420</anchor>
      <arglist>(StructElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doField</name>
      <anchorfile>classNED2Generator.html</anchorfile>
      <anchor>ab754e99ca6cf4f3bc544ae47594fd9e9</anchor>
      <arglist>(FieldElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doComment</name>
      <anchorfile>classNED2Generator.html</anchorfile>
      <anchor>a9eb124e6228c77e1b2011b7b8a87c0fd</anchor>
      <arglist>(CommentElement *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>indentsize</name>
      <anchorfile>classNED2Generator.html</anchorfile>
      <anchor>adee390308a61dde67ab585f0c054d97c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::ostream *</type>
      <name>outp</name>
      <anchorfile>classNED2Generator.html</anchorfile>
      <anchor>adacfa2ad3cc263f48578f2dc4d394359</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NEDErrorStore *</type>
      <name>errors</name>
      <anchorfile>classNED2Generator.html</anchorfile>
      <anchor>aa8dd60273f27cc94ff79fbfcb8eb64d6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NEDCrossValidator</name>
    <filename>classNEDCrossValidator.html</filename>
    <base>NEDValidatorBase</base>
    <member kind="function">
      <type></type>
      <name>NEDCrossValidator</name>
      <anchorfile>classNEDCrossValidator.html</anchorfile>
      <anchor>a4f6e45519e6545a9b87e37c0fdb8ee61</anchor>
      <arglist>(bool parsedExpr, NEDResourceCache *resolver, NEDErrorStore *e)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NEDCrossValidator</name>
      <anchorfile>classNEDCrossValidator.html</anchorfile>
      <anchor>a9fc6b7e9617ba3935eb2fd77276c41cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>NEDElement *</type>
      <name>findChildWithTagAndAttribute</name>
      <anchorfile>classNEDCrossValidator.html</anchorfile>
      <anchor>a28167620f529c6303dc58b05bc1c5e68</anchor>
      <arglist>(NEDElement *node, int tag, const char *attr, const char *value)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkGate</name>
      <anchorfile>classNEDCrossValidator.html</anchorfile>
      <anchor>ab4d1019467dafb9cd7c0a67cf591ea27</anchor>
      <arglist>(GateElement *gate, bool hasGateIndex, bool isInput, NEDElement *conn, bool isSrcGate)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>validateConnGate</name>
      <anchorfile>classNEDCrossValidator.html</anchorfile>
      <anchor>ac8b222b1ed0eceb9d40728ec5ca1999a</anchor>
      <arglist>(const char *submodName, bool hasSubmodIndex, const char *gateName, bool hasGateIndex, NEDElement *parent, NEDElement *conn, bool isSrc)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>NEDElement *</type>
      <name>getXXXDeclaration</name>
      <anchorfile>classNEDCrossValidator.html</anchorfile>
      <anchor>ac61ac5229f462db4048c96e8d7b3822a</anchor>
      <arglist>(const char *name, int tagcode1, int tagcode2=-1)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>NEDElement *</type>
      <name>getModuleDeclaration</name>
      <anchorfile>classNEDCrossValidator.html</anchorfile>
      <anchor>a0e6b48255c33e1e446c61063887caff7</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>NEDElement *</type>
      <name>getChannelDeclaration</name>
      <anchorfile>classNEDCrossValidator.html</anchorfile>
      <anchor>a2bcea22b304b3c4da2ea4b6798e4be34</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>NEDElement *</type>
      <name>getModuleInterfaceDeclaration</name>
      <anchorfile>classNEDCrossValidator.html</anchorfile>
      <anchor>a81f1e8ee2c3ddf721f625c92ec4d06f4</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>NEDElement *</type>
      <name>getChannelInterfaceDeclaration</name>
      <anchorfile>classNEDCrossValidator.html</anchorfile>
      <anchor>ad90a9c5e6b47e4b7af6d29efc8c3b0b2</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>NEDElement *</type>
      <name>getEnumDeclaration</name>
      <anchorfile>classNEDCrossValidator.html</anchorfile>
      <anchor>ab93edb0eb7f31c3ed35fabc29504ca51</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>NEDElement *</type>
      <name>getClassDeclaration</name>
      <anchorfile>classNEDCrossValidator.html</anchorfile>
      <anchor>a0873ebfb20a295aa92ec47e6d9ab1385</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDCrossValidator.html</anchorfile>
      <anchor>a9a29896a0a034d4caf4f618537b5e6de</anchor>
      <arglist>(FilesElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDCrossValidator.html</anchorfile>
      <anchor>a96a2e5a2571cafc24d7c66fcef83efd8</anchor>
      <arglist>(NedFileElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDCrossValidator.html</anchorfile>
      <anchor>ac8ef20302080a249a3e86ce4e71e9290</anchor>
      <arglist>(CommentElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDCrossValidator.html</anchorfile>
      <anchor>aa4c8ccd1a2cda96abff18796288cbaa3</anchor>
      <arglist>(ImportElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDCrossValidator.html</anchorfile>
      <anchor>a76571849e56f0d72967f1bb79f1aad6e</anchor>
      <arglist>(PropertyDeclElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDCrossValidator.html</anchorfile>
      <anchor>a97840855483354bdeef69303198eee07</anchor>
      <arglist>(ExtendsElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDCrossValidator.html</anchorfile>
      <anchor>a7135004c51ea9e89ed2c31cad1f89d92</anchor>
      <arglist>(InterfaceNameElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDCrossValidator.html</anchorfile>
      <anchor>a51051e2507b0945855f122ce840083d5</anchor>
      <arglist>(SimpleModuleElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDCrossValidator.html</anchorfile>
      <anchor>a64acbf02a845a5d6f8af8f0ca92311f4</anchor>
      <arglist>(ModuleInterfaceElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDCrossValidator.html</anchorfile>
      <anchor>a5e76d626ab289e7c4061d64e536ca6fd</anchor>
      <arglist>(CompoundModuleElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDCrossValidator.html</anchorfile>
      <anchor>af11ddcea84f5c534f3699a81311e0a32</anchor>
      <arglist>(ChannelInterfaceElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDCrossValidator.html</anchorfile>
      <anchor>a2cfa678013b2d350a0c1dbdd9c9ca1e7</anchor>
      <arglist>(ChannelElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDCrossValidator.html</anchorfile>
      <anchor>aaa03e0c569bfbc6753b1b6eb48fb5ab5</anchor>
      <arglist>(ParametersElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDCrossValidator.html</anchorfile>
      <anchor>ae4733ed8c17708326f34f0a00ab307a3</anchor>
      <arglist>(ParamElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDCrossValidator.html</anchorfile>
      <anchor>aef1144f27e0747910e33e77211903c81</anchor>
      <arglist>(PropertyElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDCrossValidator.html</anchorfile>
      <anchor>a2a0b3d3a0e6efba09b345487e67b6a58</anchor>
      <arglist>(PropertyKeyElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDCrossValidator.html</anchorfile>
      <anchor>ad589a8c0f62b86e596c1fd287881ee81</anchor>
      <arglist>(GatesElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDCrossValidator.html</anchorfile>
      <anchor>ac96be267698594104f5a0432c452764d</anchor>
      <arglist>(GateElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDCrossValidator.html</anchorfile>
      <anchor>adb27ab37a3177786ec0db341b703cb50</anchor>
      <arglist>(TypesElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDCrossValidator.html</anchorfile>
      <anchor>a922b309470a9c76b69e5b5c8f6541f07</anchor>
      <arglist>(SubmodulesElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDCrossValidator.html</anchorfile>
      <anchor>a198764c0f7b8ce892c69cb9fe6b1c3a1</anchor>
      <arglist>(SubmoduleElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDCrossValidator.html</anchorfile>
      <anchor>aba9822a833c96f47ad8b6c30562b8302</anchor>
      <arglist>(ConnectionsElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDCrossValidator.html</anchorfile>
      <anchor>a4cd18abcaa728adfd178809cf306d5ee</anchor>
      <arglist>(ConnectionElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDCrossValidator.html</anchorfile>
      <anchor>a7a3daec01ff5f298df4b70089d463a6f</anchor>
      <arglist>(ConnectionGroupElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDCrossValidator.html</anchorfile>
      <anchor>aa1df8718e6e31f37d0aa112ff6444af9</anchor>
      <arglist>(LoopElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDCrossValidator.html</anchorfile>
      <anchor>a350f79202d0cf4b4bab48b8c34bfc855</anchor>
      <arglist>(ConditionElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDCrossValidator.html</anchorfile>
      <anchor>a1a4986877037207bad29188c7d1bdcc5</anchor>
      <arglist>(ExpressionElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDCrossValidator.html</anchorfile>
      <anchor>ad8633a548fab701deb0ae83fdcf8043e</anchor>
      <arglist>(OperatorElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDCrossValidator.html</anchorfile>
      <anchor>a8166ec9a9e0c28fd623f0aa52dcc2811</anchor>
      <arglist>(FunctionElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDCrossValidator.html</anchorfile>
      <anchor>adfb435cac0ad032adce838bdede011ea</anchor>
      <arglist>(IdentElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDCrossValidator.html</anchorfile>
      <anchor>a9984e58d1a04276d61f2b9d627d089d6</anchor>
      <arglist>(LiteralElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDCrossValidator.html</anchorfile>
      <anchor>ad9ab3e3a599fa2dd9dce063bafbf6bb1</anchor>
      <arglist>(MsgFileElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDCrossValidator.html</anchorfile>
      <anchor>ab1c73779c49fc1c21c979a525469c7d1</anchor>
      <arglist>(NamespaceElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDCrossValidator.html</anchorfile>
      <anchor>ac6b4107ac303f8990f31d0b5b3cabfdc</anchor>
      <arglist>(CplusplusElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDCrossValidator.html</anchorfile>
      <anchor>acfcc6d0f5172ded0c695ee579d8e52cf</anchor>
      <arglist>(StructDeclElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDCrossValidator.html</anchorfile>
      <anchor>ae00aea4735617f16d1ab69222efde500</anchor>
      <arglist>(ClassDeclElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDCrossValidator.html</anchorfile>
      <anchor>a2f7c77754e39d123319de64f886c2aed</anchor>
      <arglist>(MessageDeclElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDCrossValidator.html</anchorfile>
      <anchor>ab5d53d945e074178be6661704ef6493c</anchor>
      <arglist>(PacketDeclElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDCrossValidator.html</anchorfile>
      <anchor>a1a02019e9ac80a07d84056a49684514b</anchor>
      <arglist>(EnumDeclElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDCrossValidator.html</anchorfile>
      <anchor>a763f44ba6b996fb0c97f84ad3bf0e032</anchor>
      <arglist>(EnumElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDCrossValidator.html</anchorfile>
      <anchor>ae5f82047709a9393a39e3d4dcf0ff1a8</anchor>
      <arglist>(EnumFieldsElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDCrossValidator.html</anchorfile>
      <anchor>ab68c26eb98836c453d3262f7e968bc3c</anchor>
      <arglist>(EnumFieldElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDCrossValidator.html</anchorfile>
      <anchor>af8a9e6779f581b9269b00ca6e1125217</anchor>
      <arglist>(MessageElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDCrossValidator.html</anchorfile>
      <anchor>a08ad3cec420f6202660e22d5ef61ee9a</anchor>
      <arglist>(PacketElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDCrossValidator.html</anchorfile>
      <anchor>aaf97f147b1bec3c7651d440d0d4f124a</anchor>
      <arglist>(ClassElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDCrossValidator.html</anchorfile>
      <anchor>a5635bae8cbda6cc05e76c545a36f03a7</anchor>
      <arglist>(StructElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDCrossValidator.html</anchorfile>
      <anchor>aacfa81042460b6cd657bac36234e033c</anchor>
      <arglist>(FieldElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDCrossValidator.html</anchorfile>
      <anchor>a835073c4842791e493ea44e8d03b4f54</anchor>
      <arglist>(UnknownElement *node)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>parsedExpressions</name>
      <anchorfile>classNEDCrossValidator.html</anchorfile>
      <anchor>a9636b17ffb5749f8b9c7ac5224ee2982</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NEDResourceCache *</type>
      <name>resolver</name>
      <anchorfile>classNEDCrossValidator.html</anchorfile>
      <anchor>a559488770edcf41f543f6b1b95530a3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NEDElement *</type>
      <name>moduletypedecl</name>
      <anchorfile>classNEDCrossValidator.html</anchorfile>
      <anchor>a4941e96ed9bc7120223c2b75e50fa6df</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NEDDTDValidator</name>
    <filename>classNEDDTDValidator.html</filename>
    <base>NEDDTDValidatorBase</base>
    <member kind="function">
      <type></type>
      <name>NEDDTDValidator</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>a520ad2267764359b598220e4e4ce7bfc</anchor>
      <arglist>(NEDErrorStore *e)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NEDDTDValidator</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>a2a6b7713f5416f3e82af03fe8b73f274</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>a5cdceb65bca0973a476d01754dc00dbb</anchor>
      <arglist>(FilesElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>a7ec2370090764fbb2d33b4170d380adf</anchor>
      <arglist>(NedFileElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>ae5ef3d05a92c51e0ba4d2a9faaf72060</anchor>
      <arglist>(CommentElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>a140f1d1844f729ea1430e5918c76ef39</anchor>
      <arglist>(PackageElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>ab836217d3930c7bd9d5524e7582ff4f7</anchor>
      <arglist>(ImportElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>ab5586971a0c18fb888f565ff65d57daa</anchor>
      <arglist>(PropertyDeclElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>afe19cb89ae50be7dbcd54783ab7a6658</anchor>
      <arglist>(ExtendsElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>a93559ea4c8fb54ab9e9b39ce8ff5a7c7</anchor>
      <arglist>(InterfaceNameElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>a7aa24870dc405d0cdc7b06f27c08d008</anchor>
      <arglist>(SimpleModuleElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>adc85231305767bfe03812928c0bd92e1</anchor>
      <arglist>(ModuleInterfaceElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>ac46caffed382ffee88588c26e4faa597</anchor>
      <arglist>(CompoundModuleElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>a8abd00411391612d15ca0ad504ac11ab</anchor>
      <arglist>(ChannelInterfaceElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>a40868abd397d46c4f7b5e5dd4d6108ca</anchor>
      <arglist>(ChannelElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>afd4448fe9f0f23f7f1d509d80258ba24</anchor>
      <arglist>(ParametersElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>ad44db49cb20e70fe3b69887e6306ddee</anchor>
      <arglist>(ParamElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>a19545d256f66ad0da2c4b49ca0c1b319</anchor>
      <arglist>(PropertyElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>a4922b32ac6b1d53a7b90f05b39198f16</anchor>
      <arglist>(PropertyKeyElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>a7986c241f8aa13eda95c7d94b96ea105</anchor>
      <arglist>(GatesElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>a4c952b2a8a4f4067af5aea8283fe19f5</anchor>
      <arglist>(GateElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>a0e33ab8beb9bf3ffc2b01a08e9e5b892</anchor>
      <arglist>(TypesElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>a8d214a5891e4b4fa1d43de32a48eb651</anchor>
      <arglist>(SubmodulesElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>a7c98b9deb94979dfc6a08a34a2ad31c3</anchor>
      <arglist>(SubmoduleElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>a2d3f0bc0e42f3c01da7b2dc1bf54e844</anchor>
      <arglist>(ConnectionsElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>a01fe45712a351cb8da85d27a65e58c40</anchor>
      <arglist>(ConnectionElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>af2f70f9cdbd9175ad5c600d015ed0f78</anchor>
      <arglist>(ConnectionGroupElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>a4c0ace15798926cac19bb9e017e50dc7</anchor>
      <arglist>(LoopElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>ae22d2d7eb0ef37ffc350fc77e1cf0fc3</anchor>
      <arglist>(ConditionElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>a05c08a30e0654fd146c934610bce36f7</anchor>
      <arglist>(ExpressionElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>abc57690f2cd3b4f2c8ef6bec419c5834</anchor>
      <arglist>(OperatorElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>acde49f72b3bc3550a342f82514ca0a52</anchor>
      <arglist>(FunctionElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>a432776c4df5a8f3ef83cfe9a7d60f931</anchor>
      <arglist>(IdentElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>ac687b8b988438a3c87d8aa213b773f66</anchor>
      <arglist>(LiteralElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>acbae34259ce8f38074c0a8f897f17d03</anchor>
      <arglist>(MsgFileElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>a696cda6f8a89ebdc2dbfc290eae8afea</anchor>
      <arglist>(NamespaceElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>af0a08c63ecd0b3ed4746b08e224b3280</anchor>
      <arglist>(CplusplusElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>aa2b78289dc7038b43b5ec5b80cca07c6</anchor>
      <arglist>(StructDeclElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>acd5a50aaf1c871600871b08dcae1e768</anchor>
      <arglist>(ClassDeclElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>ae80f61ed03b0ea5068f06ab400090230</anchor>
      <arglist>(MessageDeclElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>a18ff32d9bd5151d0aa4092c90114a1e2</anchor>
      <arglist>(PacketDeclElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>af8eebe2b4539549bf7d7908e2787d214</anchor>
      <arglist>(EnumDeclElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>aa1cd76c2eb243e1e2607f152505aa80f</anchor>
      <arglist>(EnumElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>a2d547cb0cf6705699c74a196adc47c26</anchor>
      <arglist>(EnumFieldsElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>a1a3797e0262e0357040c887827b74314</anchor>
      <arglist>(EnumFieldElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>a1cfbc1d46faf6e1478141bfef60848db</anchor>
      <arglist>(MessageElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>add0dc365af75cbe777e0534f69c8378a</anchor>
      <arglist>(PacketElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>af9676f4c76c5031ff637c3d21be10044</anchor>
      <arglist>(ClassElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>a991286c1990a323683b77c1701b9a639</anchor>
      <arglist>(StructElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>acccc0191a914c91b3b1bfaccaa1d42fe</anchor>
      <arglist>(FieldElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>a198b1a9262a56a57a3c0edda2e4c7152</anchor>
      <arglist>(UnknownElement *node)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NEDDTDValidatorBase</name>
    <filename>classNEDDTDValidatorBase.html</filename>
    <base>NEDValidatorBase</base>
    <class kind="struct">NEDDTDValidatorBase::Choice</class>
    <member kind="function">
      <type></type>
      <name>NEDDTDValidatorBase</name>
      <anchorfile>classNEDDTDValidatorBase.html</anchorfile>
      <anchor>adaff8fb5cb55b85bb62f91de1b839c84</anchor>
      <arglist>(NEDErrorStore *e)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>tryCheckChoice</name>
      <anchorfile>classNEDDTDValidatorBase.html</anchorfile>
      <anchor>acf2046571f393616168f9be821b50410</anchor>
      <arglist>(NEDElement *node, NEDElement *&amp;curchild, int tags[], char mult)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkSequence</name>
      <anchorfile>classNEDDTDValidatorBase.html</anchorfile>
      <anchor>ac9e8f9e503a95b23ce5664b7c2f54f77</anchor>
      <arglist>(NEDElement *node, int tags[], char mult[])</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkChoice</name>
      <anchorfile>classNEDDTDValidatorBase.html</anchorfile>
      <anchor>a0379a35ce9c750b9162cde0eb103fc43</anchor>
      <arglist>(NEDElement *node, int tags[], char mult)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkSeqOfChoices</name>
      <anchorfile>classNEDDTDValidatorBase.html</anchorfile>
      <anchor>a1548ebef3928d89453b2f52a7486e768</anchor>
      <arglist>(NEDElement *node, Choice choices[], int n)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkEmpty</name>
      <anchorfile>classNEDDTDValidatorBase.html</anchorfile>
      <anchor>a6ea414b8d8260dca2f6064fdf387024c</anchor>
      <arglist>(NEDElement *node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkRequiredAttribute</name>
      <anchorfile>classNEDDTDValidatorBase.html</anchorfile>
      <anchor>ac60f1702d4577bcaf813440af9a94c84</anchor>
      <arglist>(NEDElement *node, const char *attr)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkEnumeratedAttribute</name>
      <anchorfile>classNEDDTDValidatorBase.html</anchorfile>
      <anchor>ad0d92fc5fbf31811a221d8b306e245ad</anchor>
      <arglist>(NEDElement *node, const char *attr, const char *vals[], int n)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkNameAttribute</name>
      <anchorfile>classNEDDTDValidatorBase.html</anchorfile>
      <anchor>afb4dcea6513862a3f7db46cdd7d8e53c</anchor>
      <arglist>(NEDElement *node, const char *attr)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkCommentAttribute</name>
      <anchorfile>classNEDDTDValidatorBase.html</anchorfile>
      <anchor>a5b6399f84c3459966247bd92c6c24b99</anchor>
      <arglist>(NEDElement *node, const char *attr)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>NEDDTDValidatorBase::Choice</name>
    <filename>structNEDDTDValidatorBase_1_1Choice.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>tags</name>
      <anchorfile>structNEDDTDValidatorBase_1_1Choice.html</anchorfile>
      <anchor>aca78039bd17f9d07280e59c3a44fa36d</anchor>
      <arglist>[20]</arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>mult</name>
      <anchorfile>structNEDDTDValidatorBase_1_1Choice.html</anchorfile>
      <anchor>a7a51286b55dfa82d0b490c7918176de2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NEDElement</name>
    <filename>classNEDElement.html</filename>
    <member kind="function">
      <type></type>
      <name>NEDElement</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>a150fce9ac6ab72088eb50b289e348a52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NEDElement</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>aae540ce25b7c00beaba23b0a36d5a396</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NEDElement</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>addf63060f4f3e4532ce98590418ea0c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual NEDElement *</type>
      <name>dup</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>a330b55acd48727274a4244a9d0f292e6</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NEDElement *</type>
      <name>dupTree</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>ad023c4449565e6e9ce31221ca285b55f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>aad5f24ca41d0613a11cd7742dba25f47</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>a96d65f0b87ffdaf6421a7b1ac941e3b5</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>getId</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>a2fac9778556dbd69f2bcebd42866af0f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setId</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>a901658abb3f29d40ed489ad6f3089fb7</anchor>
      <arglist>(long id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getSourceLocation</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>ad3045c1c3a95dcdbc20bd8319a3e3511</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSourceLocation</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>a2cc84869236bb532ef3308c49eb6ac2a</anchor>
      <arglist>(const char *loc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NEDSourceRegion &amp;</type>
      <name>getSourceRegion</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>a20bb26b793708de450eea05a0c9da0f6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSourceRegion</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>ad56f9e4c9bb9720cc1b962f2c1dbd083</anchor>
      <arglist>(const NEDSourceRegion &amp;region)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>applyDefaults</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>adba305757fac9fd821f908fdace0646b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>a028e3f1709d83254b9a005998ac57fa6</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>a667a2302bc29ff83f3c0353031787fb6</anchor>
      <arglist>(int k) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>lookupAttribute</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>a0d4f24f9f5054bcdba51f5e6d909fcea</anchor>
      <arglist>(const char *attr) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>abb0e68ce8c095f820916a8d213045341</anchor>
      <arglist>(int k) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>a7dc2b37862ff34dccadc8c60355f8001</anchor>
      <arglist>(const char *attr) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>a3aa8eb20fbd0fecd8fb2a0f5e66fd99d</anchor>
      <arglist>(int k, const char *value)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>a1e64d405d63c4ece5baecdaa7a23abd9</anchor>
      <arglist>(const char *attr, const char *value)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>a798534bcfbfc9c1ba45daa4bbcb36abb</anchor>
      <arglist>(int k) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>ae9a5af76c97812f1bab6eacdea0e1fd3</anchor>
      <arglist>(const char *attr) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NEDElement *</type>
      <name>getParent</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>abbce7c0950070a418f9433fb19ff85e4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NEDElement *</type>
      <name>getFirstChild</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>aba4ba6b0c789ac6a657dca297e8bcbd3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NEDElement *</type>
      <name>getLastChild</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>a2cdeee7fd5e3eb5ca7c15e3354ba815a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NEDElement *</type>
      <name>getNextSibling</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>a3a29a67fd9b7d52e7d83badd88fa0682</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NEDElement *</type>
      <name>getPrevSibling</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>a419e46c88a88142fc294cca33d6196fa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>appendChild</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>ad72aa365201a45a46f9614a925837c08</anchor>
      <arglist>(NEDElement *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertChildBefore</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>a7566998f868f802e08a3f0c1bb132ab6</anchor>
      <arglist>(NEDElement *where, NEDElement *newnode)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NEDElement *</type>
      <name>removeChild</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>a948264625ae9c4e18eff00fa98b22c3d</anchor>
      <arglist>(NEDElement *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NEDElement *</type>
      <name>getFirstChildWithTag</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>ab075bc5661a07d7b202f54a33076910e</anchor>
      <arglist>(int tagcode) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NEDElement *</type>
      <name>getNextSiblingWithTag</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>af11371f18d0680e07dc8cd741577a7bb</anchor>
      <arglist>(int tagcode) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumChildren</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>a0888baf35a5035610dd2e46c016567c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumChildrenWithTag</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>aad4ec43ef6e13628a04d7334e924df56</anchor>
      <arglist>(int tagcode) const </arglist>
    </member>
    <member kind="function">
      <type>NEDElement *</type>
      <name>getFirstChildWithAttribute</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>ad65ed23c12c7ef89b91b1ca7a911643c</anchor>
      <arglist>(int tagcode, const char *attr, const char *attrvalue=NULL)</arglist>
    </member>
    <member kind="function">
      <type>NEDElement *</type>
      <name>getParentWithTag</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>ae4e94bcddbbfa0736db9987d31d22435</anchor>
      <arglist>(int tagcode)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setUserData</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>a8f8b72addeaf41e83aa1dfe1e9d07b0e</anchor>
      <arglist>(NEDElementUserData *data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NEDElementUserData *</type>
      <name>getUserData</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>a66d8dcbdc98eab3a6248cc79eb8c165e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static long</type>
      <name>getNumCreated</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>a4b68b84edfd9ab1f28c32823ac57483d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static long</type>
      <name>getNumExisting</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>a6053433075b060e978e02d55528d4de3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static bool</type>
      <name>stringToBool</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>aeb116fdb333899f9a3845027e4039867</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static const char *</type>
      <name>boolToString</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>a7c1cdcf885beb64a3a832c4dadbe654e</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static int</type>
      <name>stringToEnum</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>adeac700b89f0f2996a9f015a764f3189</anchor>
      <arglist>(const char *s, const char *vals[], int nums[], int n)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static const char *</type>
      <name>enumToString</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>ac912116d6281c6095cf05725379ae4e4</anchor>
      <arglist>(int b, const char *vals[], int nums[], int n)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>validateEnum</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>a6e0f3513a2c6d19488e03a9c9c3eff51</anchor>
      <arglist>(int b, const char *vals[], int nums[], int n)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NEDElementFactory</name>
    <filename>classNEDElementFactory.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NEDElementFactory</name>
      <anchorfile>classNEDElementFactory.html</anchorfile>
      <anchor>ab2ece66835d8f80a90d1fe11588d9cee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NEDElement *</type>
      <name>createElementWithTag</name>
      <anchorfile>classNEDElementFactory.html</anchorfile>
      <anchor>a47d63761d7174147c962487d5b6f8afe</anchor>
      <arglist>(const char *tagname)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NEDElement *</type>
      <name>createElementWithTag</name>
      <anchorfile>classNEDElementFactory.html</anchorfile>
      <anchor>a330463787d5afefd521b1cbd737eec27</anchor>
      <arglist>(int tagcode)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static NEDElementFactory *</type>
      <name>getInstance</name>
      <anchorfile>classNEDElementFactory.html</anchorfile>
      <anchor>a9f2c035bb1591dc6bd1226e8fb0fc83f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NEDElementUserData</name>
    <filename>classNEDElementUserData.html</filename>
    <member kind="function">
      <type></type>
      <name>NEDElementUserData</name>
      <anchorfile>classNEDElementUserData.html</anchorfile>
      <anchor>a46b365f03364b521e1cd80e90faeb09c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NEDElementUserData</name>
      <anchorfile>classNEDElementUserData.html</anchorfile>
      <anchor>a0280085a77bb34733ea20c5801b692ba</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NEDElementUtil</name>
    <filename>classNEDElementUtil.html</filename>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>getLocalStringProperty</name>
      <anchorfile>classNEDElementUtil.html</anchorfile>
      <anchor>a6544ced85b44245218433d5cdf1fe3c1</anchor>
      <arglist>(NEDElement *parent, const char *name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>getLocalBoolProperty</name>
      <anchorfile>classNEDElementUtil.html</anchorfile>
      <anchor>afb0240412bf78ca30f2afa0e9423e62c</anchor>
      <arglist>(NEDElement *parent, const char *name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PropertyElement *</type>
      <name>getLocalProperty</name>
      <anchorfile>classNEDElementUtil.html</anchorfile>
      <anchor>abc888b2e81b0647bced30c2c11a8dec3</anchor>
      <arglist>(NEDElement *parent, const char *name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LiteralElement *</type>
      <name>getTheOnlyValueFrom</name>
      <anchorfile>classNEDElementUtil.html</anchorfile>
      <anchor>a60930297c67c7724d782519c72dc137b</anchor>
      <arglist>(PropertyElement *property)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>propertyAsBool</name>
      <anchorfile>classNEDElementUtil.html</anchorfile>
      <anchor>a2716bf8646792eb6d9c3c1af8165026e</anchor>
      <arglist>(PropertyElement *property)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>propertyAsString</name>
      <anchorfile>classNEDElementUtil.html</anchorfile>
      <anchor>a695a11172f5927372c36dedff1759206</anchor>
      <arglist>(PropertyElement *property)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>compare</name>
      <anchorfile>classNEDElementUtil.html</anchorfile>
      <anchor>a639785ed2248b2ae1895ffb72350f843</anchor>
      <arglist>(NEDElement *node1, NEDElement *node2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>compareTree</name>
      <anchorfile>classNEDElementUtil.html</anchorfile>
      <anchor>a285eb51166d78712cc9b29a48f0969f5</anchor>
      <arglist>(NEDElement *node1, NEDElement *node2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isNEDType</name>
      <anchorfile>classNEDElementUtil.html</anchorfile>
      <anchor>af6956ee515a9e0cb53e71597499bf954</anchor>
      <arglist>(NEDElement *node)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NEDErrorStore</name>
    <filename>classNEDErrorStore.html</filename>
    <member kind="function">
      <type></type>
      <name>NEDErrorStore</name>
      <anchorfile>classNEDErrorStore.html</anchorfile>
      <anchor>a5ea16b5f69b9ad380b265b90221691f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NEDErrorStore</name>
      <anchorfile>classNEDErrorStore.html</anchorfile>
      <anchor>a159b818c0de3893fb6663409e71c1af7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPrintToStderr</name>
      <anchorfile>classNEDErrorStore.html</anchorfile>
      <anchor>a9494099770adfeeb46c88112aeed829c</anchor>
      <arglist>(bool p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addError</name>
      <anchorfile>classNEDErrorStore.html</anchorfile>
      <anchor>a70076dbb9e9993d435c7fa5cb98a9080</anchor>
      <arglist>(NEDElement *context, const char *messagefmt,...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addError</name>
      <anchorfile>classNEDErrorStore.html</anchorfile>
      <anchor>af9042b030d8ddf371ce465e2d4d43921</anchor>
      <arglist>(const char *location, const char *messagefmt,...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addWarning</name>
      <anchorfile>classNEDErrorStore.html</anchorfile>
      <anchor>ab1ffdd9e312c7ff850ef358b19795ad9</anchor>
      <arglist>(NEDElement *context, const char *messagefmt,...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addWarning</name>
      <anchorfile>classNEDErrorStore.html</anchorfile>
      <anchor>a3c7c94af5a26efba0d74c194f1b85ddc</anchor>
      <arglist>(const char *location, const char *messagefmt,...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classNEDErrorStore.html</anchorfile>
      <anchor>a8473e08eeb986be087a5dc5de4e71d7c</anchor>
      <arglist>(NEDElement *context, int severity, const char *messagefmt,...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classNEDErrorStore.html</anchorfile>
      <anchor>ad043b111049a6bc93ff6ab2de1cc309e</anchor>
      <arglist>(const char *location, int severity, const char *messagefmt,...)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classNEDErrorStore.html</anchorfile>
      <anchor>a26929c94853d2a87c3dd300860d5b716</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numMessages</name>
      <anchorfile>classNEDErrorStore.html</anchorfile>
      <anchor>a86020f7ca998b24d5d012c57cd9ba27c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsError</name>
      <anchorfile>classNEDErrorStore.html</anchorfile>
      <anchor>a8eb74bea5d2772f21fa7866e239be899</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classNEDErrorStore.html</anchorfile>
      <anchor>a7b513b29402880cb48cbb370009a090c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>findFirstErrorFor</name>
      <anchorfile>classNEDErrorStore.html</anchorfile>
      <anchor>a23512ce893bb87ae41c195d83c02346c</anchor>
      <arglist>(NEDElement *node, int startIndex) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>errorSeverity</name>
      <anchorfile>classNEDErrorStore.html</anchorfile>
      <anchor>a2dba3fb607cb8dc5e5f19d5a4f393eed</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>errorSeverityCode</name>
      <anchorfile>classNEDErrorStore.html</anchorfile>
      <anchor>a8204132935d14b717f7566511d44841f</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>errorLocation</name>
      <anchorfile>classNEDErrorStore.html</anchorfile>
      <anchor>a53808f603f201da43438abae280bd29d</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>NEDElement *</type>
      <name>errorContext</name>
      <anchorfile>classNEDErrorStore.html</anchorfile>
      <anchor>aae778d52e80c117c64afc3673d03ae14</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>errorText</name>
      <anchorfile>classNEDErrorStore.html</anchorfile>
      <anchor>a60358b1171b7a109df44cccc3f15fe83</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>severityName</name>
      <anchorfile>classNEDErrorStore.html</anchorfile>
      <anchor>a22c869f017293d9f3cb709e370e9861f</anchor>
      <arglist>(int severity)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NEDException</name>
    <filename>classNEDException.html</filename>
    <member kind="function">
      <type></type>
      <name>NEDException</name>
      <anchorfile>classNEDException.html</anchorfile>
      <anchor>a83b87d00aa4abdc6ad55e13ea84c7d03</anchor>
      <arglist>(const char *messagefmt,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NEDException</name>
      <anchorfile>classNEDException.html</anchorfile>
      <anchor>a09e817280bed46d5b38a2ac8621a24ae</anchor>
      <arglist>(NEDElement *context, const char *messagefmt,...)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NEDException</name>
      <anchorfile>classNEDException.html</anchorfile>
      <anchor>a7be46e677bd77a1ca55cccec496519c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>what</name>
      <anchorfile>classNEDException.html</anchorfile>
      <anchor>a3df9fa24d59cee915a6145d068fbaf96</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>errormsg</name>
      <anchorfile>classNEDException.html</anchorfile>
      <anchor>ace491407827a0457d59af2a534e67061</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NEDFileBuffer</name>
    <filename>classNEDFileBuffer.html</filename>
    <member kind="function">
      <type></type>
      <name>NEDFileBuffer</name>
      <anchorfile>classNEDFileBuffer.html</anchorfile>
      <anchor>ad95258b50e93a66a5052d6838a25a603</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NEDFileBuffer</name>
      <anchorfile>classNEDFileBuffer.html</anchorfile>
      <anchor>aed84e2fcce5856de7f9ddfd233402bd8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readFile</name>
      <anchorfile>classNEDFileBuffer.html</anchorfile>
      <anchor>aba0c7c33eec39664fde117db6c51d5ff</anchor>
      <arglist>(const char *filename)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setData</name>
      <anchorfile>classNEDFileBuffer.html</anchorfile>
      <anchor>a6265482a10d8d9b25f7c6547dd852739</anchor>
      <arglist>(const char *data)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>get</name>
      <anchorfile>classNEDFileBuffer.html</anchorfile>
      <anchor>acb9c2c8efa72652336bc462d1ce6d29b</anchor>
      <arglist>(YYLTYPE pos)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getFileComment</name>
      <anchorfile>classNEDFileBuffer.html</anchorfile>
      <anchor>a735fa7bc68bda8888f34ae1d4169cdb2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getBannerComment</name>
      <anchorfile>classNEDFileBuffer.html</anchorfile>
      <anchor>af9996288f39dcdb0f9563e0895284f71</anchor>
      <arglist>(YYLTYPE pos)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getTrailingComment</name>
      <anchorfile>classNEDFileBuffer.html</anchorfile>
      <anchor>a28e61a48fcb3bb7b408d0330eb9c1fd3</anchor>
      <arglist>(YYLTYPE pos)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getNextInnerComment</name>
      <anchorfile>classNEDFileBuffer.html</anchorfile>
      <anchor>afe66f9c4e982d8131fa1dd0096281335</anchor>
      <arglist>(YYLTYPE &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>YYLTYPE</type>
      <name>getFullTextPos</name>
      <anchorfile>classNEDFileBuffer.html</anchorfile>
      <anchor>ab14550cbc70b931f190a67b71881b452</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getFullText</name>
      <anchorfile>classNEDFileBuffer.html</anchorfile>
      <anchor>a50d5e5c4aedc94103a84797a6583e0d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>trimSpaceAndComments</name>
      <anchorfile>classNEDFileBuffer.html</anchorfile>
      <anchor>aa828e0af86d0e15a62128bf94e4bf70f</anchor>
      <arglist>(YYLTYPE &amp;pos)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NedFileElement</name>
    <filename>classNedFileElement.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>NedFileElement</name>
      <anchorfile>classNedFileElement.html</anchorfile>
      <anchor>a0e1e89d536fd3e4554ceaf479e1fd3c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NedFileElement</name>
      <anchorfile>classNedFileElement.html</anchorfile>
      <anchor>aaed6fe4adf6da89a7c62d9e7945bb04a</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NedFileElement</name>
      <anchorfile>classNedFileElement.html</anchorfile>
      <anchor>add619aadbb98bf50566ff9cce481014f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classNedFileElement.html</anchorfile>
      <anchor>a7141164fc7db0d17f35083a69ce972de</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classNedFileElement.html</anchorfile>
      <anchor>af43b5fc11f25ece37a1bf48aeedc7256</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classNedFileElement.html</anchorfile>
      <anchor>a9d635ec891b3612af4c5aba25134c0be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classNedFileElement.html</anchorfile>
      <anchor>aab512c6888bdcd2f0b2d3bb92f624324</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classNedFileElement.html</anchorfile>
      <anchor>a727f7c487db493fc43de9ad90637ac20</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classNedFileElement.html</anchorfile>
      <anchor>a1afed4f492c41d111f47dc5ae3a2457c</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classNedFileElement.html</anchorfile>
      <anchor>afdce4971a123530bf227fdc565432204</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classNedFileElement.html</anchorfile>
      <anchor>ae7dda123fc87fe7d0b623b572e42415d</anchor>
      <arglist>(const char *name, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classNedFileElement.html</anchorfile>
      <anchor>a8525d6ddfe8a9b183f3924fcc56781bc</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NedFileElement *</type>
      <name>dup</name>
      <anchorfile>classNedFileElement.html</anchorfile>
      <anchor>adf510341b87e6d0cac36f0b35561167d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getFilename</name>
      <anchorfile>classNedFileElement.html</anchorfile>
      <anchor>afb8da83f813076d45c367786752b2aa9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFilename</name>
      <anchorfile>classNedFileElement.html</anchorfile>
      <anchor>a523e4cc7e9bc706ba5efca0a5d1a2d1c</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getVersion</name>
      <anchorfile>classNedFileElement.html</anchorfile>
      <anchor>a57a24ee9b110081659324b085edc89f6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVersion</name>
      <anchorfile>classNedFileElement.html</anchorfile>
      <anchor>ad9ed5fb982d63ac2f4cc27943e6dd6f7</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NedFileElement *</type>
      <name>getNextNedFileSibling</name>
      <anchorfile>classNedFileElement.html</anchorfile>
      <anchor>a157aab304801c706ccfff640417522b6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CommentElement *</type>
      <name>getFirstCommentChild</name>
      <anchorfile>classNedFileElement.html</anchorfile>
      <anchor>a123c565b46dc096645ba15ccd788b770</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PackageElement *</type>
      <name>getFirstPackageChild</name>
      <anchorfile>classNedFileElement.html</anchorfile>
      <anchor>a2535d82086bba2e6afd9bfba4c2b2f63</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ImportElement *</type>
      <name>getFirstImportChild</name>
      <anchorfile>classNedFileElement.html</anchorfile>
      <anchor>ae4884a8c085e7db570c583a8eb5d60d7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PropertyDeclElement *</type>
      <name>getFirstPropertyDeclChild</name>
      <anchorfile>classNedFileElement.html</anchorfile>
      <anchor>a0e515d0b80d8b6acc52796c1548d3a3c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PropertyElement *</type>
      <name>getFirstPropertyChild</name>
      <anchorfile>classNedFileElement.html</anchorfile>
      <anchor>acd00fb8d1e1d1fead6a2b6968c7e3526</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SimpleModuleElement *</type>
      <name>getFirstSimpleModuleChild</name>
      <anchorfile>classNedFileElement.html</anchorfile>
      <anchor>ad79117a1f1d7ee46fedc8b0071b06a01</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CompoundModuleElement *</type>
      <name>getFirstCompoundModuleChild</name>
      <anchorfile>classNedFileElement.html</anchorfile>
      <anchor>a6d7129d1f75052ab7a2cc91be2800e85</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModuleInterfaceElement *</type>
      <name>getFirstModuleInterfaceChild</name>
      <anchorfile>classNedFileElement.html</anchorfile>
      <anchor>a859274a057be12d80d6c0720c6ae34e2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ChannelElement *</type>
      <name>getFirstChannelChild</name>
      <anchorfile>classNedFileElement.html</anchorfile>
      <anchor>aab416a3ce8387ac5c1118b9ac719eb9a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ChannelInterfaceElement *</type>
      <name>getFirstChannelInterfaceChild</name>
      <anchorfile>classNedFileElement.html</anchorfile>
      <anchor>a18334806124e4ea1ea3c4d202eac66c2</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>NEDLookupContext</name>
    <filename>structNEDLookupContext.html</filename>
    <member kind="function">
      <type></type>
      <name>NEDLookupContext</name>
      <anchorfile>structNEDLookupContext.html</anchorfile>
      <anchor>acc9c0eceb52f3d0523adeced49907de3</anchor>
      <arglist>(NEDElement *e, const char *q)</arglist>
    </member>
    <member kind="variable">
      <type>NEDElement *</type>
      <name>element</name>
      <anchorfile>structNEDLookupContext.html</anchorfile>
      <anchor>ae79d1ab3276a0b158bee2800068c19b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>qname</name>
      <anchorfile>structNEDLookupContext.html</anchorfile>
      <anchor>abeb3976bc9dbca8439ca4cb2fc36dbd3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NEDParser</name>
    <filename>classNEDParser.html</filename>
    <member kind="function">
      <type>void</type>
      <name>error</name>
      <anchorfile>classNEDParser.html</anchorfile>
      <anchor>aa6a3d6a2b38534ee4e48ee544f043b1b</anchor>
      <arglist>(const char *msg, int line)</arglist>
    </member>
    <member kind="function">
      <type>NEDErrorStore *</type>
      <name>getErrors</name>
      <anchorfile>classNEDParser.html</anchorfile>
      <anchor>ad1a6b341c40bc808c9a954c233c2ab4c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NEDFileBuffer *</type>
      <name>getSource</name>
      <anchorfile>classNEDParser.html</anchorfile>
      <anchor>a175a9093c50fa5f608139b41f1c9e36f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NEDParser</name>
      <anchorfile>classNEDParser.html</anchorfile>
      <anchor>aff565fb034f76934f2d4a24823572e6d</anchor>
      <arglist>(NEDErrorStore *e)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NEDParser</name>
      <anchorfile>classNEDParser.html</anchorfile>
      <anchor>a181f2596ac1ec4bf51016095294898d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParseExpressions</name>
      <anchorfile>classNEDParser.html</anchorfile>
      <anchor>a1b7a1a174baae51aadfbccc994d0efd2</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStoreSource</name>
      <anchorfile>classNEDParser.html</anchorfile>
      <anchor>a066ddffe712ca088663aebf8324afbea</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getParseExpressionsFlag</name>
      <anchorfile>classNEDParser.html</anchorfile>
      <anchor>afb199315394a8f1632f2fbdf11f6a5ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getStoreSourceFlag</name>
      <anchorfile>classNEDParser.html</anchorfile>
      <anchor>a227a390900b735fa83b8ac83dc7395b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getFileName</name>
      <anchorfile>classNEDParser.html</anchorfile>
      <anchor>ac0058b5f4def14bbaa41979a69eab98e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NEDElement *</type>
      <name>parseNEDFile</name>
      <anchorfile>classNEDParser.html</anchorfile>
      <anchor>a0bb2755d3d6440b96ac456c730fd675c</anchor>
      <arglist>(const char *osfname, const char *fname=NULL)</arglist>
    </member>
    <member kind="function">
      <type>NEDElement *</type>
      <name>parseNEDText</name>
      <anchorfile>classNEDParser.html</anchorfile>
      <anchor>addd05dd8b84064f55ab7fedcabb6be89</anchor>
      <arglist>(const char *nedtext, const char *fname=NULL)</arglist>
    </member>
    <member kind="function">
      <type>NEDElement *</type>
      <name>parseNEDExpression</name>
      <anchorfile>classNEDParser.html</anchorfile>
      <anchor>ad885e4fd17cf624473788182c3f2b29b</anchor>
      <arglist>(const char *nedexpression)</arglist>
    </member>
    <member kind="function">
      <type>NEDElement *</type>
      <name>parseMSGFile</name>
      <anchorfile>classNEDParser.html</anchorfile>
      <anchor>a909d090e0bc921f3a867dbf4475d51c0</anchor>
      <arglist>(const char *osfname, const char *fname=NULL)</arglist>
    </member>
    <member kind="function">
      <type>NEDElement *</type>
      <name>parseMSGText</name>
      <anchorfile>classNEDParser.html</anchorfile>
      <anchor>ab25529550a5fb9a86069b76e84937941</anchor>
      <arglist>(const char *nedtext, const char *fname=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>getBuiltInDeclarations</name>
      <anchorfile>classNEDParser.html</anchorfile>
      <anchor>aa0cf93a6982913f50792b5f935b44bcf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>loadFile</name>
      <anchorfile>classNEDParser.html</anchorfile>
      <anchor>a924d3be607f43e712fe4a02bf9c606bb</anchor>
      <arglist>(const char *osfname, const char *fname)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>loadText</name>
      <anchorfile>classNEDParser.html</anchorfile>
      <anchor>af230f773ad981a8b2e82f3dc086722d5</anchor>
      <arglist>(const char *nedtext, const char *fname)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>NEDElement *</type>
      <name>parseNED</name>
      <anchorfile>classNEDParser.html</anchorfile>
      <anchor>a7f36b3f1e38375888adaa0c5c032d9a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>NEDElement *</type>
      <name>parseMSG</name>
      <anchorfile>classNEDParser.html</anchorfile>
      <anchor>adcc9c7115cf07906dec08f0fdbabf3a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static bool</type>
      <name>guessIsNEDInNewSyntax</name>
      <anchorfile>classNEDParser.html</anchorfile>
      <anchor>aab74c6d86a6df2211e97fe996740f0e7</anchor>
      <arglist>(const char *txt)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>parseexpr</name>
      <anchorfile>classNEDParser.html</anchorfile>
      <anchor>a5f852105b63abc6ae5622ef2d259546a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>storesrc</name>
      <anchorfile>classNEDParser.html</anchorfile>
      <anchor>aec8c4c245c59687ed1e77a738c436552</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const char *</type>
      <name>filename</name>
      <anchorfile>classNEDParser.html</anchorfile>
      <anchor>a4fa612b851cf13aae2eef96de8da4571</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NEDErrorStore *</type>
      <name>errors</name>
      <anchorfile>classNEDParser.html</anchorfile>
      <anchor>aaaf148f5449135d347fb589d0698cb0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NEDFileBuffer *</type>
      <name>nedsource</name>
      <anchorfile>classNEDParser.html</anchorfile>
      <anchor>a940cccca39da306ff822f747fb05d3bb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NEDResourceCache</name>
    <filename>classNEDResourceCache.html</filename>
    <class kind="class">NEDResourceCache::CachedTypeNames</class>
    <class kind="class">NEDResourceCache::INEDTypeNames</class>
    <class kind="struct">NEDResourceCache::PendingNedType</class>
    <member kind="function">
      <type></type>
      <name>NEDResourceCache</name>
      <anchorfile>classNEDResourceCache.html</anchorfile>
      <anchor>aeaa6cf6dd3d2e47457f8e8f4422381b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NEDResourceCache</name>
      <anchorfile>classNEDResourceCache.html</anchorfile>
      <anchor>ac776973f81d3686957d0ef94a1640fc4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>loadNedSourceFolder</name>
      <anchorfile>classNEDResourceCache.html</anchorfile>
      <anchor>a2bfa05e2bbadf6c6bea88eed167f820d</anchor>
      <arglist>(const char *foldername)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>loadNedFile</name>
      <anchorfile>classNEDResourceCache.html</anchorfile>
      <anchor>a411befc632cb58f8d10e745f08ea039e</anchor>
      <arglist>(const char *nedfname, const char *expectedPackage, bool isXML)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>loadNedText</name>
      <anchorfile>classNEDResourceCache.html</anchorfile>
      <anchor>a598709c972c84bb10deccb3b0538d7ac</anchor>
      <arglist>(const char *name, const char *nedtext, const char *expectedPackage, bool isXML)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doneLoadingNedFiles</name>
      <anchorfile>classNEDResourceCache.html</anchorfile>
      <anchor>ab466e76e46727fedefee9ca408b67456</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>addFile</name>
      <anchorfile>classNEDResourceCache.html</anchorfile>
      <anchor>afda409f2174c07b6fee3f816e487c027</anchor>
      <arglist>(const char *fname, NEDElement *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NEDElement *</type>
      <name>getFile</name>
      <anchorfile>classNEDResourceCache.html</anchorfile>
      <anchor>a32acada0b3edce3aaebb4757b4a8ac12</anchor>
      <arglist>(const char *fname) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NedFileElement *</type>
      <name>getParentPackageNedFile</name>
      <anchorfile>classNEDResourceCache.html</anchorfile>
      <anchor>a82435cac4c74c3f14f4667a5a1f62696</anchor>
      <arglist>(NedFileElement *nedfile) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NEDTypeInfo *</type>
      <name>lookup</name>
      <anchorfile>classNEDResourceCache.html</anchorfile>
      <anchor>a7f0d3d8613898a6541f2a4a8a8bad9ef</anchor>
      <arglist>(const char *qname) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NEDTypeInfo *</type>
      <name>getDecl</name>
      <anchorfile>classNEDResourceCache.html</anchorfile>
      <anchor>afc3cfe1cbd69a6c8b96311f0e8ccc892</anchor>
      <arglist>(const char *qname) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>resolveNedType</name>
      <anchorfile>classNEDResourceCache.html</anchorfile>
      <anchor>a921c4d04c689ed9fbe70cfe516da8692</anchor>
      <arglist>(const NEDLookupContext &amp;context, const char *nedtypename, INEDTypeNames *qnames)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>resolveNedType</name>
      <anchorfile>classNEDResourceCache.html</anchorfile>
      <anchor>abd153375f46736a8ad15cd6c2870e744</anchor>
      <arglist>(const NEDLookupContext &amp;context, const char *nedtypename)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::vector&lt; std::string &gt; &amp;</type>
      <name>getTypeNames</name>
      <anchorfile>classNEDResourceCache.html</anchorfile>
      <anchor>a4e9528f63f41427671860e24691f26b5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getNedPackageForFolder</name>
      <anchorfile>classNEDResourceCache.html</anchorfile>
      <anchor>ab34b74b789215b503541fde8aa5c034f</anchor>
      <arglist>(const char *folder) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static NEDLookupContext</type>
      <name>getParentContextOf</name>
      <anchorfile>classNEDResourceCache.html</anchorfile>
      <anchor>a64fdf34fd17bd06b99930cae222c7825</anchor>
      <arglist>(const char *qname, NEDElement *node)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; std::string, NEDElement * &gt;</type>
      <name>NEDFileMap</name>
      <anchorfile>classNEDResourceCache.html</anchorfile>
      <anchor>a9d75d60408b7f4c1984d04bf4bcc14bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; std::string, NEDTypeInfo * &gt;</type>
      <name>NEDTypeInfoMap</name>
      <anchorfile>classNEDResourceCache.html</anchorfile>
      <anchor>a71d413a64490f5f3d4016be79db09689</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; std::string, std::string &gt;</type>
      <name>StringMap</name>
      <anchorfile>classNEDResourceCache.html</anchorfile>
      <anchor>ab671c580592e2327eb51ae2101e4d98b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>registerBuiltinDeclarations</name>
      <anchorfile>classNEDResourceCache.html</anchorfile>
      <anchor>aae9f47d28cf0bf66fd2daa0c52ea1eb2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>doLoadNedSourceFolder</name>
      <anchorfile>classNEDResourceCache.html</anchorfile>
      <anchor>a502b2f7843ee80bd27697cfbc8ed9b9f</anchor>
      <arglist>(const char *foldername, const char *expectedPackage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>doLoadNedFileOrText</name>
      <anchorfile>classNEDResourceCache.html</anchorfile>
      <anchor>a665a1dbab7528eab38ffab640c4e5c09</anchor>
      <arglist>(const char *nedfname, const char *nedtext, const char *expectedPackage, bool isXML)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual NEDElement *</type>
      <name>parseAndValidateNedFileOrText</name>
      <anchorfile>classNEDResourceCache.html</anchorfile>
      <anchor>a457e4e04ec6fd3b72a1bc70348efc8b2</anchor>
      <arglist>(const char *nedfname, const char *nedtext, bool isXML)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::string</type>
      <name>determineRootPackageName</name>
      <anchorfile>classNEDResourceCache.html</anchorfile>
      <anchor>abdba5b769b53459624c9405df27aa1a4</anchor>
      <arglist>(const char *nedSourceFolderName)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getNedSourceFolderForFolder</name>
      <anchorfile>classNEDResourceCache.html</anchorfile>
      <anchor>ab82c803d6264bce6360c8cd5301dbcae</anchor>
      <arglist>(const char *folder) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>collectNedTypesFrom</name>
      <anchorfile>classNEDResourceCache.html</anchorfile>
      <anchor>aeb7276322fca195084743532253513fc</anchor>
      <arglist>(NEDElement *node, const std::string &amp;namespacePrefix, bool areInnerTypes)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>collectNedType</name>
      <anchorfile>classNEDResourceCache.html</anchorfile>
      <anchor>aa5e46f8904741c8bcf3aff3d3d29fa57</anchor>
      <arglist>(const char *qname, bool isInnerType, NEDElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>areDependenciesResolved</name>
      <anchorfile>classNEDResourceCache.html</anchorfile>
      <anchor>a6bff1f72299a42d834e4569aaf0d5c91</anchor>
      <arglist>(const char *qname, NEDElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>registerPendingNedTypes</name>
      <anchorfile>classNEDResourceCache.html</anchorfile>
      <anchor>a946c81cc3fd26f6ff9920412fa78a56e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>registerNedType</name>
      <anchorfile>classNEDResourceCache.html</anchorfile>
      <anchor>a1cd0b7100ef2c87bc30698a81acfedb0</anchor>
      <arglist>(const char *qname, bool isInnerType, NEDElement *node)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NEDFileMap</type>
      <name>files</name>
      <anchorfile>classNEDResourceCache.html</anchorfile>
      <anchor>a35791c05da41e9ce6b2ee8235209a957</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NEDTypeInfoMap</type>
      <name>nedTypes</name>
      <anchorfile>classNEDResourceCache.html</anchorfile>
      <anchor>a60e7e7168b636e991459dc7eedc8459c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>nedTypeNames</name>
      <anchorfile>classNEDResourceCache.html</anchorfile>
      <anchor>a715da0d42875b588769d8de52c1809c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StringMap</type>
      <name>folderPackages</name>
      <anchorfile>classNEDResourceCache.html</anchorfile>
      <anchor>a095fcec346c89c6a8004871b96912e7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; PendingNedType &gt;</type>
      <name>pendingList</name>
      <anchorfile>classNEDResourceCache.html</anchorfile>
      <anchor>a5e2923aa5e3c9de5d59ae95c737e2203</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NEDResourceCache::CachedTypeNames</name>
    <filename>classNEDResourceCache_1_1CachedTypeNames.html</filename>
    <base>NEDResourceCache::INEDTypeNames</base>
    <member kind="function">
      <type></type>
      <name>CachedTypeNames</name>
      <anchorfile>classNEDResourceCache_1_1CachedTypeNames.html</anchorfile>
      <anchor>af882d287dd58ec632bc7dc289a1f8c84</anchor>
      <arglist>(NEDResourceCache *p)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>contains</name>
      <anchorfile>classNEDResourceCache_1_1CachedTypeNames.html</anchorfile>
      <anchor>aaeafabba90f9ce14af65d763ed5f36df</anchor>
      <arglist>(const char *qname) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>size</name>
      <anchorfile>classNEDResourceCache_1_1CachedTypeNames.html</anchorfile>
      <anchor>a429b8b778814928fe93767df9610e712</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>get</name>
      <anchorfile>classNEDResourceCache_1_1CachedTypeNames.html</anchorfile>
      <anchor>a12d41dcbfd0e75f46d3f976d0135673e</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NEDResourceCache *</type>
      <name>p</name>
      <anchorfile>classNEDResourceCache_1_1CachedTypeNames.html</anchorfile>
      <anchor>a97e2b646c855902373acc31676942c79</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NEDResourceCache::INEDTypeNames</name>
    <filename>classNEDResourceCache_1_1INEDTypeNames.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>contains</name>
      <anchorfile>classNEDResourceCache_1_1INEDTypeNames.html</anchorfile>
      <anchor>ae1dd4f34ad19a456046ec515d3feb686</anchor>
      <arglist>(const char *qname) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>size</name>
      <anchorfile>classNEDResourceCache_1_1INEDTypeNames.html</anchorfile>
      <anchor>a21cad814630d5d32c2987d9f1a82a6eb</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>get</name>
      <anchorfile>classNEDResourceCache_1_1INEDTypeNames.html</anchorfile>
      <anchor>a26782e56f52358f23a2216aefa9fa0f8</anchor>
      <arglist>(int k) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~INEDTypeNames</name>
      <anchorfile>classNEDResourceCache_1_1INEDTypeNames.html</anchorfile>
      <anchor>a5986839fa6eccd848bf7c2cf3e815798</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>NEDResourceCache::PendingNedType</name>
    <filename>structNEDResourceCache_1_1PendingNedType.html</filename>
    <member kind="function">
      <type></type>
      <name>PendingNedType</name>
      <anchorfile>structNEDResourceCache_1_1PendingNedType.html</anchorfile>
      <anchor>a4ec03585cdd06dc333239c9dad747ad3</anchor>
      <arglist>(const char *q, bool inner, NEDElement *e)</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>qname</name>
      <anchorfile>structNEDResourceCache_1_1PendingNedType.html</anchorfile>
      <anchor>a41c7f0be02f304e1b63c32f353f2778c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isInnerType</name>
      <anchorfile>structNEDResourceCache_1_1PendingNedType.html</anchorfile>
      <anchor>ac8b406e520928ffd1108088055bf1459</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NEDElement *</type>
      <name>node</name>
      <anchorfile>structNEDResourceCache_1_1PendingNedType.html</anchorfile>
      <anchor>a7b65fa3aed5285bf99b8051ae4d5f542</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NEDSAXHandler</name>
    <filename>classNEDSAXHandler.html</filename>
    <base>SAXHandler</base>
    <member kind="function">
      <type></type>
      <name>NEDSAXHandler</name>
      <anchorfile>classNEDSAXHandler.html</anchorfile>
      <anchor>aa8886a48100bc3f2f9e32fad594ac1f7</anchor>
      <arglist>(const char *filename, NEDErrorStore *e)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NEDSAXHandler</name>
      <anchorfile>classNEDSAXHandler.html</anchorfile>
      <anchor>ad90052182bc68a2f5ceab207da598c91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NEDElement *</type>
      <name>getTree</name>
      <anchorfile>classNEDSAXHandler.html</anchorfile>
      <anchor>a19a3f5d1f17452556f61833e0b600ed3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>startElement</name>
      <anchorfile>classNEDSAXHandler.html</anchorfile>
      <anchor>a9850a0a0c0efe737275250d0c7ea0aee</anchor>
      <arglist>(const char *name, const char **atts)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>endElement</name>
      <anchorfile>classNEDSAXHandler.html</anchorfile>
      <anchor>a8e7d27bbcb616572a9f10c6ab415b9ae</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>characterData</name>
      <anchorfile>classNEDSAXHandler.html</anchorfile>
      <anchor>a017a67d04e793400b3d7b999e07323f1</anchor>
      <arglist>(const char *s, int len)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>processingInstruction</name>
      <anchorfile>classNEDSAXHandler.html</anchorfile>
      <anchor>aa5d037d0a2068f051d439c05e5d11293</anchor>
      <arglist>(const char *target, const char *data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>comment</name>
      <anchorfile>classNEDSAXHandler.html</anchorfile>
      <anchor>aa3dd05686a99b392c7dab5cb336a373b</anchor>
      <arglist>(const char *data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>startCdataSection</name>
      <anchorfile>classNEDSAXHandler.html</anchorfile>
      <anchor>a9fb5f9ebbbdec67f4540c1282ee87041</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>endCdataSection</name>
      <anchorfile>classNEDSAXHandler.html</anchorfile>
      <anchor>a31b85283ef5295115cfa35c48bf7da15</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>NEDSourceRegion</name>
    <filename>structNEDSourceRegion.html</filename>
    <member kind="function">
      <type></type>
      <name>NEDSourceRegion</name>
      <anchorfile>structNEDSourceRegion.html</anchorfile>
      <anchor>ab376cc617abd4f000f9580e8dae64e05</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>startLine</name>
      <anchorfile>structNEDSourceRegion.html</anchorfile>
      <anchor>a4cb19e0fa5b6912fb779f31d52bcc3d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>startColumn</name>
      <anchorfile>structNEDSourceRegion.html</anchorfile>
      <anchor>a5d9451f86d7d4f261f7b56db133d828d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>endLine</name>
      <anchorfile>structNEDSourceRegion.html</anchorfile>
      <anchor>a101be5b5dd97f17cb123a7db147f32df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>endColumn</name>
      <anchorfile>structNEDSourceRegion.html</anchorfile>
      <anchor>afee8ad04770b7e2c9cc177db6de11cb3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NEDSyntaxValidator</name>
    <filename>classNEDSyntaxValidator.html</filename>
    <base>NEDValidatorBase</base>
    <member kind="function">
      <type></type>
      <name>NEDSyntaxValidator</name>
      <anchorfile>classNEDSyntaxValidator.html</anchorfile>
      <anchor>a15d385462dcba562519bde97128e1b0a</anchor>
      <arglist>(bool parsedExpr, NEDErrorStore *e)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NEDSyntaxValidator</name>
      <anchorfile>classNEDSyntaxValidator.html</anchorfile>
      <anchor>a93ab1380b5990dec847cf279d92fa834</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkExpressionAttributes</name>
      <anchorfile>classNEDSyntaxValidator.html</anchorfile>
      <anchor>a45a69249092cf00381a9e5a7552d80f8</anchor>
      <arglist>(NEDElement *node, const char *attrs[], bool optional[], int n)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkDottedNameAttribute</name>
      <anchorfile>classNEDSyntaxValidator.html</anchorfile>
      <anchor>aaec2b4f5449202e7f1c365b02aa26f73</anchor>
      <arglist>(NEDElement *node, const char *attr, bool wildcardsAllowed)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkPropertyNameAttribute</name>
      <anchorfile>classNEDSyntaxValidator.html</anchorfile>
      <anchor>acf27e6cac1dd834d3efd3ee86e783961</anchor>
      <arglist>(NEDElement *node, const char *attr)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkPropertyIndexAttribute</name>
      <anchorfile>classNEDSyntaxValidator.html</anchorfile>
      <anchor>ae66f575958414679f2333f881e5e2080</anchor>
      <arglist>(NEDElement *node, const char *attr)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isWithinSubcomponent</name>
      <anchorfile>classNEDSyntaxValidator.html</anchorfile>
      <anchor>ab144c8275496b7209f376bbce90510af</anchor>
      <arglist>(NEDElement *node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isWithinInnerType</name>
      <anchorfile>classNEDSyntaxValidator.html</anchorfile>
      <anchor>ab978131bd200606c0bc086dd60d20f05</anchor>
      <arglist>(NEDElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSyntaxValidator.html</anchorfile>
      <anchor>a3410c083d9b741d44931d4ce9ec15313</anchor>
      <arglist>(FilesElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSyntaxValidator.html</anchorfile>
      <anchor>ae7ab36f9e9f17a92390360bb06d8acd7</anchor>
      <arglist>(NedFileElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSyntaxValidator.html</anchorfile>
      <anchor>a55a51d26e5d4528c21ae46f76703e555</anchor>
      <arglist>(CommentElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSyntaxValidator.html</anchorfile>
      <anchor>ade81109ed685e8d9bd9623e3910ba50e</anchor>
      <arglist>(PackageElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSyntaxValidator.html</anchorfile>
      <anchor>a94d7235ddde9dbdcfe88493d83d38800</anchor>
      <arglist>(ImportElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSyntaxValidator.html</anchorfile>
      <anchor>ab8014b1e19d2758110943d4090ddd76c</anchor>
      <arglist>(PropertyDeclElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSyntaxValidator.html</anchorfile>
      <anchor>a048c57d80abe556b281441f4d9b64de4</anchor>
      <arglist>(ExtendsElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSyntaxValidator.html</anchorfile>
      <anchor>a22e6e171df3d9a37d25ada0f9c7c6d11</anchor>
      <arglist>(InterfaceNameElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSyntaxValidator.html</anchorfile>
      <anchor>a007f7154cc210e483d6acb9c90288ab2</anchor>
      <arglist>(SimpleModuleElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSyntaxValidator.html</anchorfile>
      <anchor>a96ab265b7d2ccc2792a5b385bfed2322</anchor>
      <arglist>(ModuleInterfaceElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSyntaxValidator.html</anchorfile>
      <anchor>abcea8257917a903bd7de0572c73ad288</anchor>
      <arglist>(CompoundModuleElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSyntaxValidator.html</anchorfile>
      <anchor>ac5ae3c76cba50bdc91571a478bc575e1</anchor>
      <arglist>(ChannelInterfaceElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSyntaxValidator.html</anchorfile>
      <anchor>a93bbfdd1aeef672e4d10d6cb1db071eb</anchor>
      <arglist>(ChannelElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSyntaxValidator.html</anchorfile>
      <anchor>a726fbc0599b493e70d23d174ddf5471a</anchor>
      <arglist>(ParametersElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSyntaxValidator.html</anchorfile>
      <anchor>a10cd9dff86a6c5de55cc6f970fd3006a</anchor>
      <arglist>(ParamElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSyntaxValidator.html</anchorfile>
      <anchor>adb0e670034b79d4c38daa441b798cb74</anchor>
      <arglist>(PropertyElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSyntaxValidator.html</anchorfile>
      <anchor>ab7f3a795a303cef2d7a6eb9cf30af8d9</anchor>
      <arglist>(PropertyKeyElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSyntaxValidator.html</anchorfile>
      <anchor>add186d01b820720ace28fde37f61f8b5</anchor>
      <arglist>(GatesElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSyntaxValidator.html</anchorfile>
      <anchor>adb0b7f86d43f4d7eca87a10ed9417c9d</anchor>
      <arglist>(GateElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSyntaxValidator.html</anchorfile>
      <anchor>addaa311e2d52360cfaee089425e876f2</anchor>
      <arglist>(TypesElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSyntaxValidator.html</anchorfile>
      <anchor>afce202fc0860b9b1e6508d15bd21a22e</anchor>
      <arglist>(SubmodulesElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSyntaxValidator.html</anchorfile>
      <anchor>aa103b87191bdeb74549dd63d5d2d603d</anchor>
      <arglist>(SubmoduleElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSyntaxValidator.html</anchorfile>
      <anchor>a6daae9959837bc1257c7e241a616e322</anchor>
      <arglist>(ConnectionsElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSyntaxValidator.html</anchorfile>
      <anchor>adf872cc0d1acd51b0ff8d909a2c46830</anchor>
      <arglist>(ConnectionElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSyntaxValidator.html</anchorfile>
      <anchor>ad17b4bbebf17aaaf68dde5e2098c2123</anchor>
      <arglist>(ConnectionGroupElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSyntaxValidator.html</anchorfile>
      <anchor>a63d5be520e641abce94cb802d6592b0a</anchor>
      <arglist>(LoopElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSyntaxValidator.html</anchorfile>
      <anchor>af24afa29442d2c4571e47c491d8f174b</anchor>
      <arglist>(ConditionElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSyntaxValidator.html</anchorfile>
      <anchor>aa4bd119004169e74c30d3b7f9d19e62a</anchor>
      <arglist>(ExpressionElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSyntaxValidator.html</anchorfile>
      <anchor>af453b5efc63fa9bdc01cfd7b131fd4de</anchor>
      <arglist>(OperatorElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSyntaxValidator.html</anchorfile>
      <anchor>a3a0ea3682ad94f9e458b23a4990c4082</anchor>
      <arglist>(FunctionElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSyntaxValidator.html</anchorfile>
      <anchor>a5b6f81759a307c8a02dc8f6ac1fa0859</anchor>
      <arglist>(IdentElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSyntaxValidator.html</anchorfile>
      <anchor>a2571a523ac170c2eec8d277b86ea9dd5</anchor>
      <arglist>(LiteralElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSyntaxValidator.html</anchorfile>
      <anchor>a6be23731dc250b0390c53702c29904de</anchor>
      <arglist>(MsgFileElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSyntaxValidator.html</anchorfile>
      <anchor>aae63ec6f40b91fe0845847673605b6ba</anchor>
      <arglist>(NamespaceElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSyntaxValidator.html</anchorfile>
      <anchor>adf8345f4bd50c4cedfbf0a5c4577e92e</anchor>
      <arglist>(CplusplusElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSyntaxValidator.html</anchorfile>
      <anchor>ae54fa9eb2650433760aeacd894de4f8b</anchor>
      <arglist>(StructDeclElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSyntaxValidator.html</anchorfile>
      <anchor>a462ef9ce0837a407876e410115b73829</anchor>
      <arglist>(ClassDeclElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSyntaxValidator.html</anchorfile>
      <anchor>a4fae624a355229ec0ef438882f44d366</anchor>
      <arglist>(MessageDeclElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSyntaxValidator.html</anchorfile>
      <anchor>a045da25023938c833239e80c36946f2a</anchor>
      <arglist>(PacketDeclElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSyntaxValidator.html</anchorfile>
      <anchor>a77997785a0f8cd87797591195f8b4a5c</anchor>
      <arglist>(EnumDeclElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSyntaxValidator.html</anchorfile>
      <anchor>a5a8b9567e8b699d9b0a83e5d576bd843</anchor>
      <arglist>(EnumElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSyntaxValidator.html</anchorfile>
      <anchor>a3509623a451c77c5131277fa0bbf344a</anchor>
      <arglist>(EnumFieldsElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSyntaxValidator.html</anchorfile>
      <anchor>a4a471e66a204c85323993649724baf40</anchor>
      <arglist>(EnumFieldElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSyntaxValidator.html</anchorfile>
      <anchor>a0bf54146b18197a42e5b5fa6532e4756</anchor>
      <arglist>(MessageElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSyntaxValidator.html</anchorfile>
      <anchor>acbb236b8226a6b2e21ca841e900bdb04</anchor>
      <arglist>(PacketElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSyntaxValidator.html</anchorfile>
      <anchor>aec53015c61235ba969dbcfb2e6f776b8</anchor>
      <arglist>(ClassElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSyntaxValidator.html</anchorfile>
      <anchor>a328258117728d2e4542e14e24d185e0c</anchor>
      <arglist>(StructElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSyntaxValidator.html</anchorfile>
      <anchor>a7b471d31b1491d355e27d877946d364d</anchor>
      <arglist>(FieldElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSyntaxValidator.html</anchorfile>
      <anchor>aa56d465e73e8ec22731b19216f0f0247</anchor>
      <arglist>(UnknownElement *node)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>parsedExpressions</name>
      <anchorfile>classNEDSyntaxValidator.html</anchorfile>
      <anchor>a3d11bbb3264236b4b82b260c62919e6e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NEDTools</name>
    <filename>classNEDTools.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>repairNEDElementTree</name>
      <anchorfile>classNEDTools.html</anchorfile>
      <anchor>a5c6dd730d04af7f3459952f466fa72cd</anchor>
      <arglist>(NEDElement *tree)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>splitToFiles</name>
      <anchorfile>classNEDTools.html</anchorfile>
      <anchor>a55c730413a7faf91a5eaf6a1bd4695d1</anchor>
      <arglist>(FilesElement *tree)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NEDTypeInfo</name>
    <filename>classNEDTypeInfo.html</filename>
    <member kind="enumeration">
      <name>Type</name>
      <anchorfile>classNEDTypeInfo.html</anchorfile>
      <anchor>a56a830747b9feb3807729d7e029deeaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIMPLE_MODULE</name>
      <anchorfile>classNEDTypeInfo.html</anchorfile>
      <anchor>a56a830747b9feb3807729d7e029deeaaa15b79d651dac5a734dae886c8aa0f1f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COMPOUND_MODULE</name>
      <anchorfile>classNEDTypeInfo.html</anchorfile>
      <anchor>a56a830747b9feb3807729d7e029deeaaa4b16a9f8d1443239c8d9a0f8edc46c56</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MODULEINTERFACE</name>
      <anchorfile>classNEDTypeInfo.html</anchorfile>
      <anchor>a56a830747b9feb3807729d7e029deeaaa553f4a60b8d2961dda82589080afa084</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHANNEL</name>
      <anchorfile>classNEDTypeInfo.html</anchorfile>
      <anchor>a56a830747b9feb3807729d7e029deeaaa3a4f2ab13e62d8deb73f6d456a12b1e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHANNELINTERFACE</name>
      <anchorfile>classNEDTypeInfo.html</anchorfile>
      <anchor>a56a830747b9feb3807729d7e029deeaaaab0eecea28e2218fe0c3769ab07fe4bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NEDTypeInfo</name>
      <anchorfile>classNEDTypeInfo.html</anchorfile>
      <anchor>af1bb3d6101a6113ea92b8a5d09a1993b</anchor>
      <arglist>(NEDResourceCache *resolver, const char *qname, bool isInnerType, NEDElement *tree)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NEDTypeInfo</name>
      <anchorfile>classNEDTypeInfo.html</anchorfile>
      <anchor>a2d18000e0842641c954dfaa682346d5c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getName</name>
      <anchorfile>classNEDTypeInfo.html</anchorfile>
      <anchor>aa38403b0e51674e0ce61a131f328d856</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getFullName</name>
      <anchorfile>classNEDTypeInfo.html</anchorfile>
      <anchor>ab9f0ab06fa099af53f323a470b49c58c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NEDElement *</type>
      <name>getTree</name>
      <anchorfile>classNEDTypeInfo.html</anchorfile>
      <anchor>ae1f80805db0bc7c6afdbd9c32bb3e7c6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>NEDResourceCache *</type>
      <name>getResolver</name>
      <anchorfile>classNEDTypeInfo.html</anchorfile>
      <anchor>a5bb9f200e6b7fe6e6ec8dc32a6ac0c4f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Type</type>
      <name>getType</name>
      <anchorfile>classNEDTypeInfo.html</anchorfile>
      <anchor>ac9765f31131d50736d1543847459b653</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getPackage</name>
      <anchorfile>classNEDTypeInfo.html</anchorfile>
      <anchor>af954bae4ed72bdcce7c1f9fd972e3bed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classNEDTypeInfo.html</anchorfile>
      <anchor>a781f0ddfccb4201f3a42bfb8f42970b4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>nedSource</name>
      <anchorfile>classNEDTypeInfo.html</anchorfile>
      <anchor>afb5d571b20ea2ce4417832dcd770939a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>numExtendsNames</name>
      <anchorfile>classNEDTypeInfo.html</anchorfile>
      <anchor>abef072e1f4aa95d6a30695fbec287c27</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>extendsName</name>
      <anchorfile>classNEDTypeInfo.html</anchorfile>
      <anchor>a2aa4cf3f1de95a43987b7ea7f269afd5</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>numInterfaceNames</name>
      <anchorfile>classNEDTypeInfo.html</anchorfile>
      <anchor>aaab18f959da993c587fc14ab8b5ee39a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>interfaceName</name>
      <anchorfile>classNEDTypeInfo.html</anchorfile>
      <anchor>a905036dfe85213de463f9ba94cb67abb</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>supportsInterface</name>
      <anchorfile>classNEDTypeInfo.html</anchorfile>
      <anchor>a93acd727e3f111a835391e1ea20259b0</anchor>
      <arglist>(const char *qname)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isInnerType</name>
      <anchorfile>classNEDTypeInfo.html</anchorfile>
      <anchor>ad08bd0ec798cb63b502e73dcccf20953</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getEnclosingTypeName</name>
      <anchorfile>classNEDTypeInfo.html</anchorfile>
      <anchor>ac7bf2ba53310e574019904c70b1d9237</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isNetwork</name>
      <anchorfile>classNEDTypeInfo.html</anchorfile>
      <anchor>a9accc908c196bd6082e7f554a28e13a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getImplementationClassName</name>
      <anchorfile>classNEDTypeInfo.html</anchorfile>
      <anchor>a732ae773075bc5eb567014097c6ffea8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getPackageProperty</name>
      <anchorfile>classNEDTypeInfo.html</anchorfile>
      <anchor>a808dec679108d275246efd0da1519d81</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getCxxNamespace</name>
      <anchorfile>classNEDTypeInfo.html</anchorfile>
      <anchor>a2adb38cb982ccd3801c1f1c813e0d727</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NEDTypeInfo *</type>
      <name>getSuperDecl</name>
      <anchorfile>classNEDTypeInfo.html</anchorfile>
      <anchor>ac76c4a14549c4aff4ad59c0e013fdc78</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ParametersElement *</type>
      <name>getParametersElement</name>
      <anchorfile>classNEDTypeInfo.html</anchorfile>
      <anchor>a69b0062cadf6ec35c711fc7459d36a69</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GatesElement *</type>
      <name>getGatesElement</name>
      <anchorfile>classNEDTypeInfo.html</anchorfile>
      <anchor>a84bd168b51f7b94e5e76bf995908857a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SubmodulesElement *</type>
      <name>getSubmodulesElement</name>
      <anchorfile>classNEDTypeInfo.html</anchorfile>
      <anchor>a39535f87e510c2b05789fcbeade14866</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConnectionsElement *</type>
      <name>getConnectionsElement</name>
      <anchorfile>classNEDTypeInfo.html</anchorfile>
      <anchor>a974870c78228a1f37b499e12d870876b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SubmoduleElement *</type>
      <name>getLocalSubmoduleElement</name>
      <anchorfile>classNEDTypeInfo.html</anchorfile>
      <anchor>a1a577299c088f9ff48a46fcdb1f57706</anchor>
      <arglist>(const char *submoduleName) const </arglist>
    </member>
    <member kind="function">
      <type>ConnectionElement *</type>
      <name>getLocalConnectionElement</name>
      <anchorfile>classNEDTypeInfo.html</anchorfile>
      <anchor>ad5e6b3c00df9a6e2c9059e3e03b781ea</anchor>
      <arglist>(long id) const </arglist>
    </member>
    <member kind="function">
      <type>SubmoduleElement *</type>
      <name>getSubmoduleElement</name>
      <anchorfile>classNEDTypeInfo.html</anchorfile>
      <anchor>a691638bc1b3625f3b78c50eefb0035d1</anchor>
      <arglist>(const char *submoduleName) const </arglist>
    </member>
    <member kind="function">
      <type>ConnectionElement *</type>
      <name>getConnectionElement</name>
      <anchorfile>classNEDTypeInfo.html</anchorfile>
      <anchor>ae9c71676394f6b144129eee4da8856ce</anchor>
      <arglist>(long id) const </arglist>
    </member>
    <member kind="function">
      <type>ParamElement *</type>
      <name>findLocalParamDecl</name>
      <anchorfile>classNEDTypeInfo.html</anchorfile>
      <anchor>a66441e3e51fb0a5d3e004129d3cbe355</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
    <member kind="function">
      <type>ParamElement *</type>
      <name>findParamDecl</name>
      <anchorfile>classNEDTypeInfo.html</anchorfile>
      <anchor>aba976427bb8739d0c0f72134dd8296d1</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
    <member kind="function">
      <type>GateElement *</type>
      <name>findLocalGateDecl</name>
      <anchorfile>classNEDTypeInfo.html</anchorfile>
      <anchor>a63f0c18d084485ba94dfcb847f9b65c2</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
    <member kind="function">
      <type>GateElement *</type>
      <name>findGateDecl</name>
      <anchorfile>classNEDTypeInfo.html</anchorfile>
      <anchor>aea921bf176e72788d27c5026c9482216</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>StringVector</name>
      <anchorfile>classNEDTypeInfo.html</anchorfile>
      <anchor>a43ad9d119835e0c6c2a0599d1423bd23</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; std::string, int &gt;</type>
      <name>StringToIntMap</name>
      <anchorfile>classNEDTypeInfo.html</anchorfile>
      <anchor>aa92b3afa7bcb302616e937acb2beeb59</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkComplianceToInterface</name>
      <anchorfile>classNEDTypeInfo.html</anchorfile>
      <anchor>aaae5e3a2cdbfa11ec6f6c34bbbfd41bc</anchor>
      <arglist>(NEDTypeInfo *interfaceDecl)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NEDResourceCache *</type>
      <name>resolver</name>
      <anchorfile>classNEDTypeInfo.html</anchorfile>
      <anchor>abafa3c58d346231ef72052d32ae5ddf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Type</type>
      <name>type</name>
      <anchorfile>classNEDTypeInfo.html</anchorfile>
      <anchor>aaa798134c7b9f00821012f3e3634fb3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>qualifiedName</name>
      <anchorfile>classNEDTypeInfo.html</anchorfile>
      <anchor>a4666da0461fbe2ecac7d558cb2a35e12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isInner</name>
      <anchorfile>classNEDTypeInfo.html</anchorfile>
      <anchor>a52d945cc2704437283269db1435793db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NEDElement *</type>
      <name>tree</name>
      <anchorfile>classNEDTypeInfo.html</anchorfile>
      <anchor>ac330f40b96acdeb43832f5645b72a7bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StringVector</type>
      <name>extendsnames</name>
      <anchorfile>classNEDTypeInfo.html</anchorfile>
      <anchor>a92fd21accd854dcaaf6c70c6abed5504</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StringVector</type>
      <name>interfacenames</name>
      <anchorfile>classNEDTypeInfo.html</anchorfile>
      <anchor>a182f81c2169b0e19f6cb5dfb4fe4255f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>enclosingTypeName</name>
      <anchorfile>classNEDTypeInfo.html</anchorfile>
      <anchor>aa987e5810d4557f31c2c92c97e6b1ecc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>implClassName</name>
      <anchorfile>classNEDTypeInfo.html</anchorfile>
      <anchor>a6243abe5fd349fe6133690c4e3cd2800</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NEDValidatorBase</name>
    <filename>classNEDValidatorBase.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validate</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>ad159cbfeb58436b5ebf94eaa0fe552d1</anchor>
      <arglist>(NEDElement *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>aabf9af3b5d04d55fce7dc0667f685b5e</anchor>
      <arglist>(NEDElement *node)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NEDValidatorBase</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>a106480aebc401d8349f531704fdcf0fc</anchor>
      <arglist>(NEDErrorStore *e)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NEDValidatorBase</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>a88d3f8aacfa86fc6b3c7122e8773a974</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>a407b42a0328a86da68f69ce1c0b8d26b</anchor>
      <arglist>(FilesElement *node)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>afae2405e507a3b1a8ebf77741aac46c5</anchor>
      <arglist>(NedFileElement *node)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>a10075f762fee036b64272a6d945cd83b</anchor>
      <arglist>(CommentElement *node)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>a9570d4d1546a99687369044199e373fb</anchor>
      <arglist>(PackageElement *node)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>a1a5fe3cf1c2780ab5ccaec70fbd17480</anchor>
      <arglist>(ImportElement *node)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>aa1c0f4a642cc1e3a5dd25eeb03818520</anchor>
      <arglist>(PropertyDeclElement *node)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>ac4765b4c2d72dcd87534af1dc938c9ee</anchor>
      <arglist>(ExtendsElement *node)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>ad22e387a8a6596b0b6e9a58ccb12e0a6</anchor>
      <arglist>(InterfaceNameElement *node)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>a5624c9b64ae97ba114a3b44e7d524812</anchor>
      <arglist>(SimpleModuleElement *node)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>a16b95a5d5844f81547d1c05bd4215d85</anchor>
      <arglist>(ModuleInterfaceElement *node)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>a5216b2e27c5abe94fae1ec9872578124</anchor>
      <arglist>(CompoundModuleElement *node)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>a509d7323acd68f86732418f7c245a428</anchor>
      <arglist>(ChannelInterfaceElement *node)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>a0a56868188b5fa3a866fbc3a49262d04</anchor>
      <arglist>(ChannelElement *node)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>a65448fbfe2677fdd24fa5ea66c2c3e7e</anchor>
      <arglist>(ParametersElement *node)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>afd301eda1a910522fc7635b61e47467c</anchor>
      <arglist>(ParamElement *node)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>a01c9247cd6c8edca3d13857acc2532ff</anchor>
      <arglist>(PropertyElement *node)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>aa83cf40331d83b3880b2837dde84b9af</anchor>
      <arglist>(PropertyKeyElement *node)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>a5c290d031606ebfcd9d1494228e84cb6</anchor>
      <arglist>(GatesElement *node)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>a8019a72478369db7fb8c9e31717ccce9</anchor>
      <arglist>(GateElement *node)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>a7a3ba8ef05342daa2859367f8140917c</anchor>
      <arglist>(TypesElement *node)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>ac98d7610a53045096c8d9e1159ce5e18</anchor>
      <arglist>(SubmodulesElement *node)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>a9b68966c72e352046382a4c267773f44</anchor>
      <arglist>(SubmoduleElement *node)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>a6a5192ae28c1f6f4193fd3f05f428409</anchor>
      <arglist>(ConnectionsElement *node)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>a7636de69ea09ef8e3857e968c3309248</anchor>
      <arglist>(ConnectionElement *node)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>aba44178f9e28102be46647eb5439caf0</anchor>
      <arglist>(ConnectionGroupElement *node)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>a08a618e7035d9b82c71d132e059b507f</anchor>
      <arglist>(LoopElement *node)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>ad73ce7e09672273fe0df8b15b854d9f7</anchor>
      <arglist>(ConditionElement *node)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>a004acdbedd9acb12c91daf130920dd09</anchor>
      <arglist>(ExpressionElement *node)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>a824cc68e1c505c0bff933fdc6d2e2d60</anchor>
      <arglist>(OperatorElement *node)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>a9397e38a36ad3496a5476c0132d1ef5b</anchor>
      <arglist>(FunctionElement *node)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>a25634b60a5054970c00b49cd6bc27177</anchor>
      <arglist>(IdentElement *node)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>a17f6a26fa507dca24678d57153e829d8</anchor>
      <arglist>(LiteralElement *node)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>ad48f005998bd9290bd4c0954501ce6d9</anchor>
      <arglist>(MsgFileElement *node)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>a94cad2eea5558eb42a148a49ae5e1a30</anchor>
      <arglist>(NamespaceElement *node)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>ad19f99edd94875b412614fd784bfabf1</anchor>
      <arglist>(CplusplusElement *node)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>a8a8d5adaaa1a053fe0294fa60235a86d</anchor>
      <arglist>(StructDeclElement *node)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>a716770a0e6c326a26fd12eb20f72f815</anchor>
      <arglist>(ClassDeclElement *node)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>a332f58c9e112c210d45d2d540f5274c9</anchor>
      <arglist>(MessageDeclElement *node)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>aca6083af254c2a851642d16e7c1b7344</anchor>
      <arglist>(PacketDeclElement *node)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>a26c6c8d1e05468d72af2c240fc113040</anchor>
      <arglist>(EnumDeclElement *node)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>a38dfbc813ea940f95aa7a904b75efa75</anchor>
      <arglist>(EnumElement *node)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>a979d6698dd86c09d4c0d99cf978782e4</anchor>
      <arglist>(EnumFieldsElement *node)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>ac0b2730d3d2577bf0a5422861094aef8</anchor>
      <arglist>(EnumFieldElement *node)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>a72908ce7a04e397cef95d1cf2e769be2</anchor>
      <arglist>(MessageElement *node)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>a7e0d77e5f7b439731a10df8ff1e373cc</anchor>
      <arglist>(PacketElement *node)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>a4bac67b3e7c09f179ca87eabdc88c1e8</anchor>
      <arglist>(ClassElement *node)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>aa8bab1bde09ae9370e68411d428c9ccb</anchor>
      <arglist>(StructElement *node)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>a00f4e122f77ece04e9e26abbcabc5425</anchor>
      <arglist>(FieldElement *node)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>ad1b4ce856b776213ff057afe573477bf</anchor>
      <arglist>(UnknownElement *node)=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NEDErrorStore *</type>
      <name>errors</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>a3dc15343b80aab3a7862ca56741b7b91</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NEDXMLGenerator</name>
    <filename>classNEDXMLGenerator.html</filename>
    <member kind="function">
      <type></type>
      <name>NEDXMLGenerator</name>
      <anchorfile>classNEDXMLGenerator.html</anchorfile>
      <anchor>a3c9e1b9b1809a790a4cb46d89d8bb1ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NEDXMLGenerator</name>
      <anchorfile>classNEDXMLGenerator.html</anchorfile>
      <anchor>a132f8274ecb8bea44f06d068230cf1d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSourceLocationAttributes</name>
      <anchorfile>classNEDXMLGenerator.html</anchorfile>
      <anchor>aa94ace04d091737cdac8b4fa48245e75</anchor>
      <arglist>(bool srcloc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIndentSize</name>
      <anchorfile>classNEDXMLGenerator.html</anchorfile>
      <anchor>a6b8c7f44721a8bb8410007e9f0b7dc0f</anchor>
      <arglist>(int indentsize)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>generate</name>
      <anchorfile>classNEDXMLGenerator.html</anchorfile>
      <anchor>ad04e7c8451f2ba134470dbd0fc1f7c91</anchor>
      <arglist>(std::ostream &amp;out, NEDElement *tree)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>generate</name>
      <anchorfile>classNEDXMLGenerator.html</anchorfile>
      <anchor>aa47b7a362c0832d2d81b6c330f4de926</anchor>
      <arglist>(NEDElement *tree)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>printAttrValue</name>
      <anchorfile>classNEDXMLGenerator.html</anchorfile>
      <anchor>ab10255354263119e70b474d5a4f62f53</anchor>
      <arglist>(std::ostream &amp;out, const char *s)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>doGenerate</name>
      <anchorfile>classNEDXMLGenerator.html</anchorfile>
      <anchor>a68d9d985166722ca3c86c1d7d02eb6ae</anchor>
      <arglist>(std::ostream &amp;out, NEDElement *node, int level)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>printsrcloc</name>
      <anchorfile>classNEDXMLGenerator.html</anchorfile>
      <anchor>a949164096c0e56528e4cf6f06a0a6c87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>indentsize</name>
      <anchorfile>classNEDXMLGenerator.html</anchorfile>
      <anchor>ae049ce25a04d230b66879c0ffeb0ad22</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OperatorElement</name>
    <filename>classOperatorElement.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>OperatorElement</name>
      <anchorfile>classOperatorElement.html</anchorfile>
      <anchor>af4918d84d5492b16ba828b03bc19146a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OperatorElement</name>
      <anchorfile>classOperatorElement.html</anchorfile>
      <anchor>a0b986eba1b4f2e1897ef1ce190307729</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OperatorElement</name>
      <anchorfile>classOperatorElement.html</anchorfile>
      <anchor>a96b3c5bcce28bd3a2b12045fbcdb503f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classOperatorElement.html</anchorfile>
      <anchor>a8dc585ba1b340541100d5fb6c5b8191d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classOperatorElement.html</anchorfile>
      <anchor>a3bf70dabb53d28e5134343106977df7f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classOperatorElement.html</anchorfile>
      <anchor>a211ac6fea6392c1470997ba83b8b60c9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classOperatorElement.html</anchorfile>
      <anchor>a40ac212180937018849d90a8d3afa3ab</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classOperatorElement.html</anchorfile>
      <anchor>a0d8a96c37286ad84f64ae9fa17895564</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classOperatorElement.html</anchorfile>
      <anchor>ae8f34c5683109a52fdc608484e3e4c14</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classOperatorElement.html</anchorfile>
      <anchor>ae17ef3388eb0fde6eb94f8e0c657cd1e</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classOperatorElement.html</anchorfile>
      <anchor>ae387336ed8a2dedd936888408feca42f</anchor>
      <arglist>(const char *name, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classOperatorElement.html</anchorfile>
      <anchor>adacf79770a146f2cd30073f4dd410812</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OperatorElement *</type>
      <name>dup</name>
      <anchorfile>classOperatorElement.html</anchorfile>
      <anchor>aad51473e3c5ef913f49023d1ee888cec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classOperatorElement.html</anchorfile>
      <anchor>af060aabf2da1998b4d584c8aff33bf9d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classOperatorElement.html</anchorfile>
      <anchor>ac1324f61132f2a15dce2a8cfee8002f5</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OperatorElement *</type>
      <name>getNextOperatorSibling</name>
      <anchorfile>classOperatorElement.html</anchorfile>
      <anchor>ae181b5efc9db83ff8795afac4e3a2649</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CommentElement *</type>
      <name>getFirstCommentChild</name>
      <anchorfile>classOperatorElement.html</anchorfile>
      <anchor>a92b8772f4f247baa29afac105eb71831</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OperatorElement *</type>
      <name>getFirstOperatorChild</name>
      <anchorfile>classOperatorElement.html</anchorfile>
      <anchor>a46b6fb0632f15fa79bf2b081856495b5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FunctionElement *</type>
      <name>getFirstFunctionChild</name>
      <anchorfile>classOperatorElement.html</anchorfile>
      <anchor>ac77242704b8bab7891f4e75a0f302cf6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IdentElement *</type>
      <name>getFirstIdentChild</name>
      <anchorfile>classOperatorElement.html</anchorfile>
      <anchor>a40dfe262fdbb0c86b2734ccf804031c7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual LiteralElement *</type>
      <name>getFirstLiteralChild</name>
      <anchorfile>classOperatorElement.html</anchorfile>
      <anchor>a632aebfce9a28dbf810c81a6b43a772f</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PackageElement</name>
    <filename>classPackageElement.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>PackageElement</name>
      <anchorfile>classPackageElement.html</anchorfile>
      <anchor>a6d3a78e6af9b0f19eae7858666124fe2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PackageElement</name>
      <anchorfile>classPackageElement.html</anchorfile>
      <anchor>ac66b1a59ffa3d8dfe985c4587ea3a478</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PackageElement</name>
      <anchorfile>classPackageElement.html</anchorfile>
      <anchor>aa9748b1e76999fae2a461000a4090cc9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classPackageElement.html</anchorfile>
      <anchor>a57c2a8f20329e51e2665ab9d5b5ff953</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classPackageElement.html</anchorfile>
      <anchor>a1b355a2bd0b14c91812f63184e22d560</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classPackageElement.html</anchorfile>
      <anchor>a17303b1aa200335a445818f71e4c87bf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classPackageElement.html</anchorfile>
      <anchor>af0dcdcfccf23252717b01533144cd6fd</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classPackageElement.html</anchorfile>
      <anchor>ad649ca591035ef90ab513aacf65c79e5</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classPackageElement.html</anchorfile>
      <anchor>a3c31c69ec3db5cab8aad381d049a0038</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classPackageElement.html</anchorfile>
      <anchor>adea0f2395320316f3e397a2194b26f1b</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classPackageElement.html</anchorfile>
      <anchor>a8ea7cfd8bdc082d53ad322847af9a344</anchor>
      <arglist>(const char *name, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classPackageElement.html</anchorfile>
      <anchor>a1b375c09e652bac7078033bc1161d2fe</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PackageElement *</type>
      <name>dup</name>
      <anchorfile>classPackageElement.html</anchorfile>
      <anchor>a4819c3afd413e6870063dce0a01d7527</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classPackageElement.html</anchorfile>
      <anchor>af0fef51fe061b527d364bc60628742ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classPackageElement.html</anchorfile>
      <anchor>aeada54e1cb370b37eb4d919a79ac5bef</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PackageElement *</type>
      <name>getNextPackageSibling</name>
      <anchorfile>classPackageElement.html</anchorfile>
      <anchor>ac22985274cbcaf8060bd37411a43370c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CommentElement *</type>
      <name>getFirstCommentChild</name>
      <anchorfile>classPackageElement.html</anchorfile>
      <anchor>a46acc9b27b18da894ad9eaaf5514ff72</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PacketDeclElement</name>
    <filename>classPacketDeclElement.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>PacketDeclElement</name>
      <anchorfile>classPacketDeclElement.html</anchorfile>
      <anchor>a1c71c23266f2866985533972f86a2e48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PacketDeclElement</name>
      <anchorfile>classPacketDeclElement.html</anchorfile>
      <anchor>aaf90848c9e85748724b9a7872c278a5e</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PacketDeclElement</name>
      <anchorfile>classPacketDeclElement.html</anchorfile>
      <anchor>a9c34fd0a872523124c4b405f8fe9fd92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classPacketDeclElement.html</anchorfile>
      <anchor>a87f065ad0a430c74827472ff80f42435</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classPacketDeclElement.html</anchorfile>
      <anchor>a66dd3ca6f0724ba5a5c27b41362a7e4d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classPacketDeclElement.html</anchorfile>
      <anchor>acb337cd040c240d775186ff61b413232</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classPacketDeclElement.html</anchorfile>
      <anchor>a70c8848b46d4808cd0e8c1a270ed178b</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classPacketDeclElement.html</anchorfile>
      <anchor>aec25b7be41d6d99d25c496e826d76f05</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classPacketDeclElement.html</anchorfile>
      <anchor>a370b355cc0f6c0d1a59b48ebf04c92d9</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classPacketDeclElement.html</anchorfile>
      <anchor>ac2508c9a847673c0d03a4a09f5408b78</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classPacketDeclElement.html</anchorfile>
      <anchor>afecd210634b6a890431b97cde8b432e3</anchor>
      <arglist>(const char *name, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classPacketDeclElement.html</anchorfile>
      <anchor>a66907e4d5a59eea3a98d3db3248907da</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PacketDeclElement *</type>
      <name>dup</name>
      <anchorfile>classPacketDeclElement.html</anchorfile>
      <anchor>aba5a88abbbb91fa03273426baf8af6f6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classPacketDeclElement.html</anchorfile>
      <anchor>a6d82f042060103b7317f188f75de621b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classPacketDeclElement.html</anchorfile>
      <anchor>aa394d1766efecfad9d766ce8b2fff2a4</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PacketDeclElement *</type>
      <name>getNextPacketDeclSibling</name>
      <anchorfile>classPacketDeclElement.html</anchorfile>
      <anchor>abd4c63b7e0d720925582a67f0da935a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CommentElement *</type>
      <name>getFirstCommentChild</name>
      <anchorfile>classPacketDeclElement.html</anchorfile>
      <anchor>ad6b607b1fd811753b3b2ac3882f1b898</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PacketElement</name>
    <filename>classPacketElement.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>PacketElement</name>
      <anchorfile>classPacketElement.html</anchorfile>
      <anchor>a20d69af9a9c6a86859ed99b496a0bbde</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PacketElement</name>
      <anchorfile>classPacketElement.html</anchorfile>
      <anchor>aedc0a677aab4d580c0db5349ac398321</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PacketElement</name>
      <anchorfile>classPacketElement.html</anchorfile>
      <anchor>a095653d308d285720f5d16e4e37e3bf5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classPacketElement.html</anchorfile>
      <anchor>a78b8fefcfbf009aeabc796135db2a69e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classPacketElement.html</anchorfile>
      <anchor>a465dd162fcda617db6da2c6b111de8c6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classPacketElement.html</anchorfile>
      <anchor>a68ef55afa069ba46f8dc3612533f84fa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classPacketElement.html</anchorfile>
      <anchor>aafcfd93d3536f35331b70063fb788962</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classPacketElement.html</anchorfile>
      <anchor>aaf7398b2e4e4f931d982fdd45d3ec7c1</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classPacketElement.html</anchorfile>
      <anchor>a6c5caa5f1c85ca68f4eac9641026d44f</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classPacketElement.html</anchorfile>
      <anchor>a60a7b0d0c5c831b166ac474bfc9d06a1</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classPacketElement.html</anchorfile>
      <anchor>a5a04f3cfa9b32ca86b265ad7ac4f1413</anchor>
      <arglist>(const char *name, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classPacketElement.html</anchorfile>
      <anchor>a3221b3da00875adce8beab8e37d79e84</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PacketElement *</type>
      <name>dup</name>
      <anchorfile>classPacketElement.html</anchorfile>
      <anchor>aa8d70fc78112c32b4036d800c4c70780</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classPacketElement.html</anchorfile>
      <anchor>ab6f2778ce8393a042a510e9dc1332cb7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classPacketElement.html</anchorfile>
      <anchor>acf44e2334388cf91b0f2bb97cd642dfe</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getExtendsName</name>
      <anchorfile>classPacketElement.html</anchorfile>
      <anchor>a278ce2c3d1b5e5c26cdaff620ee98a78</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExtendsName</name>
      <anchorfile>classPacketElement.html</anchorfile>
      <anchor>af8a6820c57e07391f2c4b705d75b6162</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getSourceCode</name>
      <anchorfile>classPacketElement.html</anchorfile>
      <anchor>aab35f3c27886c0e70817817ec95a0d61</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSourceCode</name>
      <anchorfile>classPacketElement.html</anchorfile>
      <anchor>a1af486a0b47a2f0506c0584791ea694c</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PacketElement *</type>
      <name>getNextPacketSibling</name>
      <anchorfile>classPacketElement.html</anchorfile>
      <anchor>a0a275b2490c3c04f95ab241b88e0ded8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CommentElement *</type>
      <name>getFirstCommentChild</name>
      <anchorfile>classPacketElement.html</anchorfile>
      <anchor>a5ba8651bb948a7ed1d370b1440b213f7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PropertyElement *</type>
      <name>getFirstPropertyChild</name>
      <anchorfile>classPacketElement.html</anchorfile>
      <anchor>a1adf4d48a9595e8316d099a63620e69c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FieldElement *</type>
      <name>getFirstFieldChild</name>
      <anchorfile>classPacketElement.html</anchorfile>
      <anchor>ab0d6ef948652607224fe67f6b7bfb4ee</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ParamElement</name>
    <filename>classParamElement.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>ParamElement</name>
      <anchorfile>classParamElement.html</anchorfile>
      <anchor>a97f356e7e5d6f916d9ca0c168be8c9cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParamElement</name>
      <anchorfile>classParamElement.html</anchorfile>
      <anchor>aa3aa1c866aed544ee5d2c2378855b7d1</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ParamElement</name>
      <anchorfile>classParamElement.html</anchorfile>
      <anchor>a2fdd46c1d3721dbd991cbbee4e241c75</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classParamElement.html</anchorfile>
      <anchor>ac824d4aa1b331c57598962996e5e6a09</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classParamElement.html</anchorfile>
      <anchor>a714634c41ef60ec616f3de701cdffe12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classParamElement.html</anchorfile>
      <anchor>a4be6c0a2bae97a1eb596fda3e1ca7122</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classParamElement.html</anchorfile>
      <anchor>a97b2100c991aa0c755ebf8b2623cd4d8</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classParamElement.html</anchorfile>
      <anchor>a6ba59c6ef73901a6bf87eee7928dbd6d</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classParamElement.html</anchorfile>
      <anchor>ac4f75f2159a2e5485e0da77bfe6e179f</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classParamElement.html</anchorfile>
      <anchor>aade0708ce4e9efc50feef0243eb94dc0</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classParamElement.html</anchorfile>
      <anchor>aa6653795a89ca6beb20bab4082fac469</anchor>
      <arglist>(const char *name, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classParamElement.html</anchorfile>
      <anchor>a8b67f0e4a975676b2ed3ffdbe59f80b8</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParamElement *</type>
      <name>dup</name>
      <anchorfile>classParamElement.html</anchorfile>
      <anchor>aa4ef500c0dabfff48f2801164f1a684a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getType</name>
      <anchorfile>classParamElement.html</anchorfile>
      <anchor>a892f7d53b3d5cd52b244060b923b372c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setType</name>
      <anchorfile>classParamElement.html</anchorfile>
      <anchor>a4502ca42990c08cf66ec9e655a3232c9</anchor>
      <arglist>(int val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getIsVolatile</name>
      <anchorfile>classParamElement.html</anchorfile>
      <anchor>a990f188d73c5966d87c79f8c56d5863a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIsVolatile</name>
      <anchorfile>classParamElement.html</anchorfile>
      <anchor>aee6158c47e963df14cebd3a93c7b1364</anchor>
      <arglist>(bool val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classParamElement.html</anchorfile>
      <anchor>a540233ab429322c0de603152b5cfea64</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classParamElement.html</anchorfile>
      <anchor>a71bd7d50a901e7c84810c976d8091581</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getValue</name>
      <anchorfile>classParamElement.html</anchorfile>
      <anchor>a44242584dfadeb943c91184824471a83</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classParamElement.html</anchorfile>
      <anchor>a5141c003bd657ae363c2d3fc4226874f</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getIsPattern</name>
      <anchorfile>classParamElement.html</anchorfile>
      <anchor>a4fb5930cc65999eb55ccebdaa2742fd6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIsPattern</name>
      <anchorfile>classParamElement.html</anchorfile>
      <anchor>a8c783acb7fe3bbdbe3d06e163fc37d01</anchor>
      <arglist>(bool val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getIsDefault</name>
      <anchorfile>classParamElement.html</anchorfile>
      <anchor>a9fa875e97235b51755444838f362c860</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIsDefault</name>
      <anchorfile>classParamElement.html</anchorfile>
      <anchor>accecc3bcb8ae76f5ed3fd48496ce1f99</anchor>
      <arglist>(bool val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParamElement *</type>
      <name>getNextParamSibling</name>
      <anchorfile>classParamElement.html</anchorfile>
      <anchor>a34c7fa25e0b31c97ffa85680246077e9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CommentElement *</type>
      <name>getFirstCommentChild</name>
      <anchorfile>classParamElement.html</anchorfile>
      <anchor>add0107d35140a1ac60a24ffc6bf56786</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ExpressionElement *</type>
      <name>getFirstExpressionChild</name>
      <anchorfile>classParamElement.html</anchorfile>
      <anchor>abb4350d21baa6000b418e664d0e04c8e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PropertyElement *</type>
      <name>getFirstPropertyChild</name>
      <anchorfile>classParamElement.html</anchorfile>
      <anchor>a4e31a3e1437f2d51101fca9e4b9a6bb1</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ParametersElement</name>
    <filename>classParametersElement.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>ParametersElement</name>
      <anchorfile>classParametersElement.html</anchorfile>
      <anchor>a450d1def2bd2902e8e82f71d3a5943c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParametersElement</name>
      <anchorfile>classParametersElement.html</anchorfile>
      <anchor>a39e2e56ad373b03e817e3fd4db8ab9c0</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ParametersElement</name>
      <anchorfile>classParametersElement.html</anchorfile>
      <anchor>aceff245e9a8e76da351f8337857156fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classParametersElement.html</anchorfile>
      <anchor>a09102cd0a6b0176b166873c13f1974a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classParametersElement.html</anchorfile>
      <anchor>a89197541d90ee8464b8a8282148c76a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classParametersElement.html</anchorfile>
      <anchor>ad648b18dc67638c20e6a42feeaa2b6b2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classParametersElement.html</anchorfile>
      <anchor>aceed403c5f6736fd9b7bd81857c5b75e</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classParametersElement.html</anchorfile>
      <anchor>ad91d24777ef9f8319941b5522004d5af</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classParametersElement.html</anchorfile>
      <anchor>ab1bdc3fc93f77df4a94906ab9c87ece2</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classParametersElement.html</anchorfile>
      <anchor>aa2cd01a4f5261e5cf2a7bc72f51a9b96</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classParametersElement.html</anchorfile>
      <anchor>a1e6eff9a52daed003f5afc186f32a1ab</anchor>
      <arglist>(const char *name, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classParametersElement.html</anchorfile>
      <anchor>a406f79187fe9a4c18d735f2a32c73457</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParametersElement *</type>
      <name>dup</name>
      <anchorfile>classParametersElement.html</anchorfile>
      <anchor>a075f1e9d03ae328d532b5b8443b65d1c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getIsImplicit</name>
      <anchorfile>classParametersElement.html</anchorfile>
      <anchor>a1f363c40ba05e84bbc103f38d02a5ce7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIsImplicit</name>
      <anchorfile>classParametersElement.html</anchorfile>
      <anchor>a0d3328fdf7ca05386df46d3a9a4aa66e</anchor>
      <arglist>(bool val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParametersElement *</type>
      <name>getNextParametersSibling</name>
      <anchorfile>classParametersElement.html</anchorfile>
      <anchor>a29e74e7efdf67a775477d25d8368f197</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CommentElement *</type>
      <name>getFirstCommentChild</name>
      <anchorfile>classParametersElement.html</anchorfile>
      <anchor>abce60281a5e33634631605e6dfc76af3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PropertyElement *</type>
      <name>getFirstPropertyChild</name>
      <anchorfile>classParametersElement.html</anchorfile>
      <anchor>ab1ff10997998996b7cd398bd9ae3c0b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParamElement *</type>
      <name>getFirstParamChild</name>
      <anchorfile>classParametersElement.html</anchorfile>
      <anchor>aa03a7e204b894eb747c86b1ffa1735b5</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PropertyDeclElement</name>
    <filename>classPropertyDeclElement.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>PropertyDeclElement</name>
      <anchorfile>classPropertyDeclElement.html</anchorfile>
      <anchor>a387aa30ea62c0114e5d55359e9de1d87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PropertyDeclElement</name>
      <anchorfile>classPropertyDeclElement.html</anchorfile>
      <anchor>a77b0146a3fbc1c5efa75ebcde09aa55b</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PropertyDeclElement</name>
      <anchorfile>classPropertyDeclElement.html</anchorfile>
      <anchor>a2b0b52d677b0f5bb0a46a6faa0fe7bde</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classPropertyDeclElement.html</anchorfile>
      <anchor>a9a13f0b84ec15e6c36348be4c629a6f6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classPropertyDeclElement.html</anchorfile>
      <anchor>a481efe8edf25eab12c9754a4f6c65afc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classPropertyDeclElement.html</anchorfile>
      <anchor>abe01d24605e4142c6a98a95edc0c1742</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classPropertyDeclElement.html</anchorfile>
      <anchor>ae081667471f6b4f920a51d416c74cd84</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classPropertyDeclElement.html</anchorfile>
      <anchor>a87babfbd42b3948bf43c98488903df93</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classPropertyDeclElement.html</anchorfile>
      <anchor>ae0445e1eaaef4b1cc6a216bab34c4d23</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classPropertyDeclElement.html</anchorfile>
      <anchor>a3a626e9cfbb0c7d3b1840a0777745be8</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classPropertyDeclElement.html</anchorfile>
      <anchor>a4b91b3fe0d4dd27d2912e4e733a46664</anchor>
      <arglist>(const char *name, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classPropertyDeclElement.html</anchorfile>
      <anchor>a6d19d3fc57d116f11a241fc8481d5630</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PropertyDeclElement *</type>
      <name>dup</name>
      <anchorfile>classPropertyDeclElement.html</anchorfile>
      <anchor>a5b830d2892608e296274b4a71df53b2d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classPropertyDeclElement.html</anchorfile>
      <anchor>a9068a3e6c555add491887a827f6fddba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classPropertyDeclElement.html</anchorfile>
      <anchor>a5b05225e16b3a0c0dfe21983fe347357</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getIsArray</name>
      <anchorfile>classPropertyDeclElement.html</anchorfile>
      <anchor>aa9734315dc0442d3ee333eaaf5ca8f34</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIsArray</name>
      <anchorfile>classPropertyDeclElement.html</anchorfile>
      <anchor>a01097628985660e0b37b5e243ab7ada2</anchor>
      <arglist>(bool val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PropertyDeclElement *</type>
      <name>getNextPropertyDeclSibling</name>
      <anchorfile>classPropertyDeclElement.html</anchorfile>
      <anchor>a5b81c101ce786f03b5d700e1bc76cb26</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CommentElement *</type>
      <name>getFirstCommentChild</name>
      <anchorfile>classPropertyDeclElement.html</anchorfile>
      <anchor>a6eab5e499b6f4fca855cf147cc8fc85b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PropertyKeyElement *</type>
      <name>getFirstPropertyKeyChild</name>
      <anchorfile>classPropertyDeclElement.html</anchorfile>
      <anchor>a61f201c12825b1eacf1b43f161ed838a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PropertyElement *</type>
      <name>getFirstPropertyChild</name>
      <anchorfile>classPropertyDeclElement.html</anchorfile>
      <anchor>a3b434a9f70d805a798a68cd83f2572fe</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PropertyElement</name>
    <filename>classPropertyElement.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>PropertyElement</name>
      <anchorfile>classPropertyElement.html</anchorfile>
      <anchor>a07d9d5e3ac25d6325a1227a948266422</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PropertyElement</name>
      <anchorfile>classPropertyElement.html</anchorfile>
      <anchor>a7b7bbcae27e6ad8da60b75a460815a7f</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PropertyElement</name>
      <anchorfile>classPropertyElement.html</anchorfile>
      <anchor>a9a9e39ed4232b9bc97de225e01227db6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classPropertyElement.html</anchorfile>
      <anchor>ad6a563e703bb70a0a55ad848cbe7c205</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classPropertyElement.html</anchorfile>
      <anchor>a48ef7543ae5e0f897e3dde61ab87052b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classPropertyElement.html</anchorfile>
      <anchor>a059b0302dd1a6cb85dc225dfb06f9e29</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classPropertyElement.html</anchorfile>
      <anchor>a51073a3398942b846606fed11b5f52d5</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classPropertyElement.html</anchorfile>
      <anchor>a61883908ac6c168af2007711b475f902</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classPropertyElement.html</anchorfile>
      <anchor>aa3bc9846b119988e38fcf8e74f57f952</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classPropertyElement.html</anchorfile>
      <anchor>a32cf80631940913f2225d8b7d3f3bdf7</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classPropertyElement.html</anchorfile>
      <anchor>a97521dd5e02654c8b000cf6c71b63ad0</anchor>
      <arglist>(const char *name, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classPropertyElement.html</anchorfile>
      <anchor>ad1aac81b261f2427a2df557677a7e51d</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PropertyElement *</type>
      <name>dup</name>
      <anchorfile>classPropertyElement.html</anchorfile>
      <anchor>a4debf515c4a5a4fe80e718fc2c9a18a0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getIsImplicit</name>
      <anchorfile>classPropertyElement.html</anchorfile>
      <anchor>ad73ddc14eb968ec3fee8f6d063ad7207</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIsImplicit</name>
      <anchorfile>classPropertyElement.html</anchorfile>
      <anchor>af0daf408789de596eec62c98bfc2b41e</anchor>
      <arglist>(bool val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classPropertyElement.html</anchorfile>
      <anchor>af210654d78cdac473888ac480d981f45</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classPropertyElement.html</anchorfile>
      <anchor>a8f56513a017181b16a581538ac3edecb</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getIndex</name>
      <anchorfile>classPropertyElement.html</anchorfile>
      <anchor>afd3f407dc03e0a13fa3b7295c5efae05</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIndex</name>
      <anchorfile>classPropertyElement.html</anchorfile>
      <anchor>a2233aa49961afcf8cbe6f46180545c8d</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PropertyElement *</type>
      <name>getNextPropertySibling</name>
      <anchorfile>classPropertyElement.html</anchorfile>
      <anchor>ab20413314545476ecd8f69b7a02cd4ee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CommentElement *</type>
      <name>getFirstCommentChild</name>
      <anchorfile>classPropertyElement.html</anchorfile>
      <anchor>a5dd06e7bc1ec084819b88212d13d6af3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PropertyKeyElement *</type>
      <name>getFirstPropertyKeyChild</name>
      <anchorfile>classPropertyElement.html</anchorfile>
      <anchor>aa0c32f7c7d5e9ee7de630d66933adad0</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PropertyKeyElement</name>
    <filename>classPropertyKeyElement.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>PropertyKeyElement</name>
      <anchorfile>classPropertyKeyElement.html</anchorfile>
      <anchor>a8dbae410efa40a94e76a5413c5633def</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PropertyKeyElement</name>
      <anchorfile>classPropertyKeyElement.html</anchorfile>
      <anchor>ad7e836224c1b6b346dd1b8ba3e5b2a53</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PropertyKeyElement</name>
      <anchorfile>classPropertyKeyElement.html</anchorfile>
      <anchor>ae892e0e524bfbc534958ab076223824a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classPropertyKeyElement.html</anchorfile>
      <anchor>a5b8902cf9c1bf333510243d5ae0a79e1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classPropertyKeyElement.html</anchorfile>
      <anchor>a1eb935bb7952aa536d3744f42eca7a4b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classPropertyKeyElement.html</anchorfile>
      <anchor>a34c716c6134c567d890505213fe43ea0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classPropertyKeyElement.html</anchorfile>
      <anchor>aeaf680efc1571a15a6ff61feb42f619d</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classPropertyKeyElement.html</anchorfile>
      <anchor>a42bdcac808db7e7fd2daca8701789294</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classPropertyKeyElement.html</anchorfile>
      <anchor>ad3ee778d1a0edf5eb3f6de253b6cfa14</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classPropertyKeyElement.html</anchorfile>
      <anchor>aff085a5774cfdeb90ec7cc1b718d1c08</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classPropertyKeyElement.html</anchorfile>
      <anchor>abda681690103b369b9aa3bb344a3ca8f</anchor>
      <arglist>(const char *name, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classPropertyKeyElement.html</anchorfile>
      <anchor>ae0bfab388a30c4bf954acfb74d878398</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PropertyKeyElement *</type>
      <name>dup</name>
      <anchorfile>classPropertyKeyElement.html</anchorfile>
      <anchor>a55b93669e1b380746f6c73f47ca565e3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classPropertyKeyElement.html</anchorfile>
      <anchor>a72908d6b85c64eb4d0fe2a7cfea759a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classPropertyKeyElement.html</anchorfile>
      <anchor>afb86302d545f715e52fc806eed8537fa</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PropertyKeyElement *</type>
      <name>getNextPropertyKeySibling</name>
      <anchorfile>classPropertyKeyElement.html</anchorfile>
      <anchor>a58c585fb4b15a7306745c63632f1f5ef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CommentElement *</type>
      <name>getFirstCommentChild</name>
      <anchorfile>classPropertyKeyElement.html</anchorfile>
      <anchor>a8051409836cd31db99866975ee08a339</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual LiteralElement *</type>
      <name>getFirstLiteralChild</name>
      <anchorfile>classPropertyKeyElement.html</anchorfile>
      <anchor>ace3a7657aaffe7492f139c443fe1067f</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAXHandler</name>
    <filename>classSAXHandler.html</filename>
    <member kind="function">
      <type></type>
      <name>SAXHandler</name>
      <anchorfile>classSAXHandler.html</anchorfile>
      <anchor>a1282d36aa710d93233c52fc9b9578b76</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SAXHandler</name>
      <anchorfile>classSAXHandler.html</anchorfile>
      <anchor>a645b5725153be482a7d725edad425d93</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>startElement</name>
      <anchorfile>classSAXHandler.html</anchorfile>
      <anchor>ab130250f24c8336d99c73faa0536d870</anchor>
      <arglist>(const char *name, const char **atts)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>endElement</name>
      <anchorfile>classSAXHandler.html</anchorfile>
      <anchor>a8f8709aebd98cf4ab774a970556bd1b7</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>characterData</name>
      <anchorfile>classSAXHandler.html</anchorfile>
      <anchor>a4850e2ab904afd9c75da115695da308b</anchor>
      <arglist>(const char *s, int len)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>processingInstruction</name>
      <anchorfile>classSAXHandler.html</anchorfile>
      <anchor>ae7203bffe34434c5268659ffc246755d</anchor>
      <arglist>(const char *target, const char *data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>comment</name>
      <anchorfile>classSAXHandler.html</anchorfile>
      <anchor>acb58142ba91f363b57c5f5961a1749a0</anchor>
      <arglist>(const char *data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>startCdataSection</name>
      <anchorfile>classSAXHandler.html</anchorfile>
      <anchor>aff24ab745be5a16115c8c18618bae1e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>endCdataSection</name>
      <anchorfile>classSAXHandler.html</anchorfile>
      <anchor>a7135466a24f17f70afd594ec8190969e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setParser</name>
      <anchorfile>classSAXHandler.html</anchorfile>
      <anchor>aa7bd34501ba4b132fb56b97b424dbb43</anchor>
      <arglist>(SAXParser *p)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SAXParser *</type>
      <name>parser</name>
      <anchorfile>classSAXHandler.html</anchorfile>
      <anchor>aa1b1911c5945bac3a0e1fa53751f35da</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SAXParser</name>
      <anchorfile>classSAXHandler.html</anchorfile>
      <anchor>a3cd7ce0b7fec1cd7725288547858a2e7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAXParser</name>
    <filename>classSAXParser.html</filename>
    <member kind="function">
      <type></type>
      <name>SAXParser</name>
      <anchorfile>classSAXParser.html</anchorfile>
      <anchor>a8cce482dd9ff6639a920e9aa90b380f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHandler</name>
      <anchorfile>classSAXParser.html</anchorfile>
      <anchor>ae8646bd422d1454d05f12460df3d5949</anchor>
      <arglist>(SAXHandler *sh)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>parse</name>
      <anchorfile>classSAXParser.html</anchorfile>
      <anchor>a886feeb69a71e9ad5927234b9cbd3f0c</anchor>
      <arglist>(const char *filename)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>parseContent</name>
      <anchorfile>classSAXParser.html</anchorfile>
      <anchor>aa0bdf2cfc4f9c4d025940d7b3904628a</anchor>
      <arglist>(const char *content)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCurrentLineNumber</name>
      <anchorfile>classSAXParser.html</anchorfile>
      <anchor>a406904e1d9d497ac841a571d21da5bd7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getErrorMessage</name>
      <anchorfile>classSAXParser.html</anchorfile>
      <anchor>a30362ffe35699781863d3108d88fadc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>doParse</name>
      <anchorfile>classSAXParser.html</anchorfile>
      <anchor>ab9f4addbcf29b7b69c7ce29d695b569d</anchor>
      <arglist>(const char *filename, const char *content)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char</type>
      <name>errortext</name>
      <anchorfile>classSAXParser.html</anchorfile>
      <anchor>ad635202ad19eb7245ea37d139fe2c2a8</anchor>
      <arglist>[512]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SAXHandler *</type>
      <name>saxhandler</name>
      <anchorfile>classSAXParser.html</anchorfile>
      <anchor>afc77ad48e3ba22d454919908134abe8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void *</type>
      <name>currentparser</name>
      <anchorfile>classSAXParser.html</anchorfile>
      <anchor>a40297d8bec9a1951056b775c3927da0b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimpleModuleElement</name>
    <filename>classSimpleModuleElement.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>SimpleModuleElement</name>
      <anchorfile>classSimpleModuleElement.html</anchorfile>
      <anchor>aa3ebc13b149c252f4d14ffdc75d79b8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleModuleElement</name>
      <anchorfile>classSimpleModuleElement.html</anchorfile>
      <anchor>a799d0febd6ca5a319fd0ece481690d8d</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SimpleModuleElement</name>
      <anchorfile>classSimpleModuleElement.html</anchorfile>
      <anchor>afcd633d3b1646f7674b66ca9763ebbda</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classSimpleModuleElement.html</anchorfile>
      <anchor>a2a616b975e6c97084ebd923e1be04eee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classSimpleModuleElement.html</anchorfile>
      <anchor>ad299420b8154974042fe65271f91d41b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classSimpleModuleElement.html</anchorfile>
      <anchor>a7a6ef0d540066a99ba7242ebd2bec87c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classSimpleModuleElement.html</anchorfile>
      <anchor>a601835a854c4872f41ce79fda3d2eee2</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classSimpleModuleElement.html</anchorfile>
      <anchor>a994a084c336ed3bf2bc95f03f6c78f19</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classSimpleModuleElement.html</anchorfile>
      <anchor>a167bf9d20e180d40586fc456300132d4</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classSimpleModuleElement.html</anchorfile>
      <anchor>a94e67d2095237e82d09e653dd283fbbf</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classSimpleModuleElement.html</anchorfile>
      <anchor>a96ffe8e1c87516e159c4e8774ae9dd86</anchor>
      <arglist>(const char *name, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classSimpleModuleElement.html</anchorfile>
      <anchor>adc225bfd3b4eb8637209460f6aef21b4</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SimpleModuleElement *</type>
      <name>dup</name>
      <anchorfile>classSimpleModuleElement.html</anchorfile>
      <anchor>a801872ab52433aebaad8803008e5149e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classSimpleModuleElement.html</anchorfile>
      <anchor>a12f082571629a53f4b81af19a5d16297</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classSimpleModuleElement.html</anchorfile>
      <anchor>a8c37e7357f5b4246f012d00553062ab9</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SimpleModuleElement *</type>
      <name>getNextSimpleModuleSibling</name>
      <anchorfile>classSimpleModuleElement.html</anchorfile>
      <anchor>ad6c661b53a6df25da2892c30d5c040eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CommentElement *</type>
      <name>getFirstCommentChild</name>
      <anchorfile>classSimpleModuleElement.html</anchorfile>
      <anchor>aa40a08235541ca3257ea6b5efdd39357</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ExtendsElement *</type>
      <name>getFirstExtendsChild</name>
      <anchorfile>classSimpleModuleElement.html</anchorfile>
      <anchor>acbb898f70a9aa81f4526b704ce49daef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual InterfaceNameElement *</type>
      <name>getFirstInterfaceNameChild</name>
      <anchorfile>classSimpleModuleElement.html</anchorfile>
      <anchor>ab565264f0e8aa437a506071b084e95cc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParametersElement *</type>
      <name>getFirstParametersChild</name>
      <anchorfile>classSimpleModuleElement.html</anchorfile>
      <anchor>a9d21a7dcee1dc5749799f3b1004eda99</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GatesElement *</type>
      <name>getFirstGatesChild</name>
      <anchorfile>classSimpleModuleElement.html</anchorfile>
      <anchor>aebd4f8df4c957a9f8a63c6d566800994</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>struct</name>
    <filename>structstruct.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>li</name>
      <anchorfile>structstruct.html</anchorfile>
      <anchor>a06616eabcab9bd6f309c38f596ffb70f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>co</name>
      <anchorfile>structstruct.html</anchorfile>
      <anchor>a7f8325a23525743b5e0c1234eb916574</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StructDeclElement</name>
    <filename>classStructDeclElement.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>StructDeclElement</name>
      <anchorfile>classStructDeclElement.html</anchorfile>
      <anchor>a445c79dfab587b99a6b293b213357f98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StructDeclElement</name>
      <anchorfile>classStructDeclElement.html</anchorfile>
      <anchor>aca24e3d8fb320eaad4fdf55299e0e796</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~StructDeclElement</name>
      <anchorfile>classStructDeclElement.html</anchorfile>
      <anchor>a4401719ab774b61714760053d9b3de96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classStructDeclElement.html</anchorfile>
      <anchor>a8086dbd7414a136ba3a22f70ca6fc89a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classStructDeclElement.html</anchorfile>
      <anchor>a4a90dd23b8db63acd9017033f2694fd4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classStructDeclElement.html</anchorfile>
      <anchor>a82daba8fe5d07440b05fd2409d79b6cd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classStructDeclElement.html</anchorfile>
      <anchor>ade0bc36fc2bd864adc2e0027f09994b7</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classStructDeclElement.html</anchorfile>
      <anchor>a626e6a638a8bc1abc262d1efcb5b71ab</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classStructDeclElement.html</anchorfile>
      <anchor>afa11a46a02a1b8a3f0d0665a554fdd6c</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classStructDeclElement.html</anchorfile>
      <anchor>a7c6ab0c118c2ee2c134218e1b183aed8</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classStructDeclElement.html</anchorfile>
      <anchor>a743533a5b36bab0b92b980dbbefdb5e7</anchor>
      <arglist>(const char *name, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classStructDeclElement.html</anchorfile>
      <anchor>af719a7f2bb4f8586f563e368350a6356</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StructDeclElement *</type>
      <name>dup</name>
      <anchorfile>classStructDeclElement.html</anchorfile>
      <anchor>a67d032d7868a4a4647e42dc704145681</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classStructDeclElement.html</anchorfile>
      <anchor>ad8e17477aa26b4824096805f41a51579</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classStructDeclElement.html</anchorfile>
      <anchor>a6c0c5ee0462a9063fa8332ccdfa55ec4</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StructDeclElement *</type>
      <name>getNextStructDeclSibling</name>
      <anchorfile>classStructDeclElement.html</anchorfile>
      <anchor>aca3dac7b2c9832b6872efd596b47f78e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CommentElement *</type>
      <name>getFirstCommentChild</name>
      <anchorfile>classStructDeclElement.html</anchorfile>
      <anchor>a3f8f6072a2eb2fdf3efaac2dcca1f3ca</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StructElement</name>
    <filename>classStructElement.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>StructElement</name>
      <anchorfile>classStructElement.html</anchorfile>
      <anchor>a94704780e29217caa5f41d088c0b90b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StructElement</name>
      <anchorfile>classStructElement.html</anchorfile>
      <anchor>a75e1bd0575958d8ac7c974e48626351e</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~StructElement</name>
      <anchorfile>classStructElement.html</anchorfile>
      <anchor>ab4bbc7927544918dbb855c5dd52db62e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classStructElement.html</anchorfile>
      <anchor>aab3e58f79d3fefe7cec3e7452fcaab5f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classStructElement.html</anchorfile>
      <anchor>aad99e75578596f75f1afd3c8e7ea5101</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classStructElement.html</anchorfile>
      <anchor>a1042843bd1912b70e1f464fccda2871b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classStructElement.html</anchorfile>
      <anchor>af45485185819b8ccd90e5fd17bacd2d2</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classStructElement.html</anchorfile>
      <anchor>a4a60264ea76aa4cf14fcbbca09a0ace7</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classStructElement.html</anchorfile>
      <anchor>ac30f6103ca07f1e814fcc50b867fc780</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classStructElement.html</anchorfile>
      <anchor>a518de054e7cc099a6ccbdec24af4b984</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classStructElement.html</anchorfile>
      <anchor>ab8f8bafde039a7c5a46048e151154789</anchor>
      <arglist>(const char *name, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classStructElement.html</anchorfile>
      <anchor>a7f2924e4d78a97b408b75322049b521f</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StructElement *</type>
      <name>dup</name>
      <anchorfile>classStructElement.html</anchorfile>
      <anchor>a68fb3be0d62c33f2c1178a49bdd57f0a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classStructElement.html</anchorfile>
      <anchor>ace1ccf48f809287b798669bcec4e5ffe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classStructElement.html</anchorfile>
      <anchor>a8639357ba253255087731d126ecde821</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getExtendsName</name>
      <anchorfile>classStructElement.html</anchorfile>
      <anchor>a8f43b46f06ab20b2c7577db5e81a3f63</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExtendsName</name>
      <anchorfile>classStructElement.html</anchorfile>
      <anchor>aaafca5dfe82ae8d56bf9969fd905ede2</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getSourceCode</name>
      <anchorfile>classStructElement.html</anchorfile>
      <anchor>a7972edcb6749ea33d262aecf1e8ea405</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSourceCode</name>
      <anchorfile>classStructElement.html</anchorfile>
      <anchor>aeaefdae2cfa6d31ef4c0394d8737b671</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StructElement *</type>
      <name>getNextStructSibling</name>
      <anchorfile>classStructElement.html</anchorfile>
      <anchor>acd181ba1f8fc589849fd0790a19ae05c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CommentElement *</type>
      <name>getFirstCommentChild</name>
      <anchorfile>classStructElement.html</anchorfile>
      <anchor>a852ceb1412456387b49cb832fe469a3f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PropertyElement *</type>
      <name>getFirstPropertyChild</name>
      <anchorfile>classStructElement.html</anchorfile>
      <anchor>a2493e4338d5390a836dbd483a4cff8db</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FieldElement *</type>
      <name>getFirstFieldChild</name>
      <anchorfile>classStructElement.html</anchorfile>
      <anchor>af067f38308426d2dc00152b5e65736c4</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SubmoduleElement</name>
    <filename>classSubmoduleElement.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>SubmoduleElement</name>
      <anchorfile>classSubmoduleElement.html</anchorfile>
      <anchor>acd0e1d7763f755bcd97639d59ee667bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SubmoduleElement</name>
      <anchorfile>classSubmoduleElement.html</anchorfile>
      <anchor>a129cdc2a9b1757c9183e4dec41a3fb0c</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SubmoduleElement</name>
      <anchorfile>classSubmoduleElement.html</anchorfile>
      <anchor>a7a3965763babb23b2c83e00f205e35ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classSubmoduleElement.html</anchorfile>
      <anchor>a58ea4744f5da639dff66678edfe789ca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classSubmoduleElement.html</anchorfile>
      <anchor>a33b1cc3e2e72ce26c74baa19215751b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classSubmoduleElement.html</anchorfile>
      <anchor>aa6918e7bc4d49cee7c148a93b95eee1a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classSubmoduleElement.html</anchorfile>
      <anchor>a838ac91473a7fefa13dab71086393268</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classSubmoduleElement.html</anchorfile>
      <anchor>a7ba87b70209a9c8416fe5b853dde1ebd</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classSubmoduleElement.html</anchorfile>
      <anchor>ad65b83f90044b3a539764316955f02d7</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classSubmoduleElement.html</anchorfile>
      <anchor>a8f6f7d00fbfd5170761e58ff008cca1a</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classSubmoduleElement.html</anchorfile>
      <anchor>a7da08b81922086dd461e0bafa6dd0f52</anchor>
      <arglist>(const char *name, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classSubmoduleElement.html</anchorfile>
      <anchor>a2ad9028a89642ad7055371a6990cbd1a</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SubmoduleElement *</type>
      <name>dup</name>
      <anchorfile>classSubmoduleElement.html</anchorfile>
      <anchor>a6e25da68e26a5a14e620aa6f6fcb5aea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classSubmoduleElement.html</anchorfile>
      <anchor>ae12789c0e80cdf460acbad70fa21249d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classSubmoduleElement.html</anchorfile>
      <anchor>a0b743b79db1ffffffda589ee3824d9b9</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getType</name>
      <anchorfile>classSubmoduleElement.html</anchorfile>
      <anchor>a85b6ef68b455743b26dbbf93d582e014</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setType</name>
      <anchorfile>classSubmoduleElement.html</anchorfile>
      <anchor>aadf75b11e2baeb88e900ab41c176eef2</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getLikeType</name>
      <anchorfile>classSubmoduleElement.html</anchorfile>
      <anchor>a40811b21142066fcffee5a6d66c34571</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLikeType</name>
      <anchorfile>classSubmoduleElement.html</anchorfile>
      <anchor>ae12bc1dccb89e202958886485aabfce4</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getLikeExpr</name>
      <anchorfile>classSubmoduleElement.html</anchorfile>
      <anchor>a3ba41ec41838f616c28d92fcc8fa8e61</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLikeExpr</name>
      <anchorfile>classSubmoduleElement.html</anchorfile>
      <anchor>ad0af6c640621efac8e181dc249c12542</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getIsDefault</name>
      <anchorfile>classSubmoduleElement.html</anchorfile>
      <anchor>a30e4cf28225296b163a9ddf2e1f81dfb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIsDefault</name>
      <anchorfile>classSubmoduleElement.html</anchorfile>
      <anchor>a764cd21133d38d6ef59c9fbc27225c39</anchor>
      <arglist>(bool val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getVectorSize</name>
      <anchorfile>classSubmoduleElement.html</anchorfile>
      <anchor>a332e78d976a8ed73c0de14d0ba400c99</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVectorSize</name>
      <anchorfile>classSubmoduleElement.html</anchorfile>
      <anchor>ad82290e0eb9330c832987bbbdcbc52bb</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SubmoduleElement *</type>
      <name>getNextSubmoduleSibling</name>
      <anchorfile>classSubmoduleElement.html</anchorfile>
      <anchor>ad8ff13a9313ab817b4e8e83b8f09b2e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CommentElement *</type>
      <name>getFirstCommentChild</name>
      <anchorfile>classSubmoduleElement.html</anchorfile>
      <anchor>a5dedc03380ac7c0e7f9dbe9fe77b1923</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ExpressionElement *</type>
      <name>getFirstExpressionChild</name>
      <anchorfile>classSubmoduleElement.html</anchorfile>
      <anchor>a7517313b00af2d53891a5c0e2dc90979</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConditionElement *</type>
      <name>getFirstConditionChild</name>
      <anchorfile>classSubmoduleElement.html</anchorfile>
      <anchor>a0009a3ca4ffbafcdd9e56c2b500acce3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParametersElement *</type>
      <name>getFirstParametersChild</name>
      <anchorfile>classSubmoduleElement.html</anchorfile>
      <anchor>a45e090b8749614e68d4fe7a27c5bbc51</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GatesElement *</type>
      <name>getFirstGatesChild</name>
      <anchorfile>classSubmoduleElement.html</anchorfile>
      <anchor>a941bac913ec1657e6722101a3f9d1350</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SubmodulesElement</name>
    <filename>classSubmodulesElement.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>SubmodulesElement</name>
      <anchorfile>classSubmodulesElement.html</anchorfile>
      <anchor>ac501aca6686f28adb20ef76aa25873b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SubmodulesElement</name>
      <anchorfile>classSubmodulesElement.html</anchorfile>
      <anchor>adc906f8d71dcb7d9d2984579129a9282</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SubmodulesElement</name>
      <anchorfile>classSubmodulesElement.html</anchorfile>
      <anchor>af8e57bef4f2e2425d6b2ac8f8cdad6eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classSubmodulesElement.html</anchorfile>
      <anchor>a657b2e16bb550594349a8f3c17757cee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classSubmodulesElement.html</anchorfile>
      <anchor>ae93bf377b7cfd4b6a4c3b894938a825f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classSubmodulesElement.html</anchorfile>
      <anchor>a42480ad8c3d1130a3a61a8d6de45d16d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classSubmodulesElement.html</anchorfile>
      <anchor>aac0abd528d3052db014d1093f3af3fd1</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classSubmodulesElement.html</anchorfile>
      <anchor>ac7af9862f60b9890c85f790b84589e3c</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classSubmodulesElement.html</anchorfile>
      <anchor>a277424f6974276502d5ab4beb4626bfc</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classSubmodulesElement.html</anchorfile>
      <anchor>a9b023ac15ac37e78e0fd0469336f0720</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classSubmodulesElement.html</anchorfile>
      <anchor>a2bd2cc427e254401ffb4715d99698a9a</anchor>
      <arglist>(const char *name, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classSubmodulesElement.html</anchorfile>
      <anchor>ac4fa73f71090813344ff056b33dbc61c</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SubmodulesElement *</type>
      <name>dup</name>
      <anchorfile>classSubmodulesElement.html</anchorfile>
      <anchor>ac39dc4247b7d9128809d2de9745c1a23</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SubmodulesElement *</type>
      <name>getNextSubmodulesSibling</name>
      <anchorfile>classSubmodulesElement.html</anchorfile>
      <anchor>aa6c45c1d5feb6d8e4aac1cab13b17e3c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CommentElement *</type>
      <name>getFirstCommentChild</name>
      <anchorfile>classSubmodulesElement.html</anchorfile>
      <anchor>a284e058b27a9960344bce4e50f43f93b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SubmoduleElement *</type>
      <name>getFirstSubmoduleChild</name>
      <anchorfile>classSubmodulesElement.html</anchorfile>
      <anchor>addbe5b9b39a5477be036b42f70c7edee</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TypesElement</name>
    <filename>classTypesElement.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>TypesElement</name>
      <anchorfile>classTypesElement.html</anchorfile>
      <anchor>a00d82c1606eebeb12f47efd41f5acbe8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypesElement</name>
      <anchorfile>classTypesElement.html</anchorfile>
      <anchor>add1afb947f2d769bb59d537b011f9b68</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TypesElement</name>
      <anchorfile>classTypesElement.html</anchorfile>
      <anchor>a436b18bd4cd3195e545a72e165d52a0e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classTypesElement.html</anchorfile>
      <anchor>ac91b12e11d0f73b9a0cc45b88383d9eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classTypesElement.html</anchorfile>
      <anchor>aaf6ab5ecb03b223b1bc718fa52175c9f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classTypesElement.html</anchorfile>
      <anchor>aca3fa78f245ead33421279673c3e56cd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classTypesElement.html</anchorfile>
      <anchor>a4cbde45c4ef0d60326acbde39d2c5c98</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classTypesElement.html</anchorfile>
      <anchor>a61e3983bb496ad80cfb3b44e01fc03ed</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classTypesElement.html</anchorfile>
      <anchor>ae8116081399c31e1b6e6f9d716cf9700</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classTypesElement.html</anchorfile>
      <anchor>a4a57280d338bbb16ce056c00e82e0b4d</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classTypesElement.html</anchorfile>
      <anchor>aa24c223d60184427375943bb78c046c8</anchor>
      <arglist>(const char *name, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classTypesElement.html</anchorfile>
      <anchor>aa7f2268ca741be46b07f37f26766b89d</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TypesElement *</type>
      <name>dup</name>
      <anchorfile>classTypesElement.html</anchorfile>
      <anchor>a1788cc86a6f3301ee95be235a2a4a5bc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TypesElement *</type>
      <name>getNextTypesSibling</name>
      <anchorfile>classTypesElement.html</anchorfile>
      <anchor>aba994ec5c860edebb48393ccfeb33b37</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CommentElement *</type>
      <name>getFirstCommentChild</name>
      <anchorfile>classTypesElement.html</anchorfile>
      <anchor>a1daa8f566da08668f6ba44b2757d53cc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ChannelElement *</type>
      <name>getFirstChannelChild</name>
      <anchorfile>classTypesElement.html</anchorfile>
      <anchor>ab64d14bf7a1786c6f3a64aa528de288d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ChannelInterfaceElement *</type>
      <name>getFirstChannelInterfaceChild</name>
      <anchorfile>classTypesElement.html</anchorfile>
      <anchor>af513a1773d772630a19bc0427af79b67</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SimpleModuleElement *</type>
      <name>getFirstSimpleModuleChild</name>
      <anchorfile>classTypesElement.html</anchorfile>
      <anchor>a6df9af55fe20ec0548a6a6660f35fc05</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CompoundModuleElement *</type>
      <name>getFirstCompoundModuleChild</name>
      <anchorfile>classTypesElement.html</anchorfile>
      <anchor>ae71b0af90843dd344ab7f2117d22d77d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModuleInterfaceElement *</type>
      <name>getFirstModuleInterfaceChild</name>
      <anchorfile>classTypesElement.html</anchorfile>
      <anchor>ab5b05704b18eb3ab428316ff10559b83</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>UnknownElement</name>
    <filename>classUnknownElement.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>UnknownElement</name>
      <anchorfile>classUnknownElement.html</anchorfile>
      <anchor>a1ee12d4703793f9c0c9e0f1eb5154594</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnknownElement</name>
      <anchorfile>classUnknownElement.html</anchorfile>
      <anchor>a6e20e52a958a680c75373a00869b5b5e</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~UnknownElement</name>
      <anchorfile>classUnknownElement.html</anchorfile>
      <anchor>a181e25fc989411316facaf376fc3c048</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classUnknownElement.html</anchorfile>
      <anchor>a9f183db9c4defdcd4b5540a513412357</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classUnknownElement.html</anchorfile>
      <anchor>a911b2cc6afb4d479d542efb0b800bd09</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classUnknownElement.html</anchorfile>
      <anchor>a3ebd4cbc954c83e130d932945e080474</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classUnknownElement.html</anchorfile>
      <anchor>a81620fd576c3311dc6d67b3f9f71fab3</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classUnknownElement.html</anchorfile>
      <anchor>a28cb76395d284b68c4c9d69fdc0b3b52</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classUnknownElement.html</anchorfile>
      <anchor>ab44af9c8aac2fefd7c5d3ebf3f8c2006</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classUnknownElement.html</anchorfile>
      <anchor>a714efbc569d988001238cfaa5117742d</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classUnknownElement.html</anchorfile>
      <anchor>aee74c5094e9594095fc68dfd4c11e789</anchor>
      <arglist>(const char *name, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classUnknownElement.html</anchorfile>
      <anchor>a2283e32c34ce10fd61a0c4e0f982b209</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnknownElement *</type>
      <name>dup</name>
      <anchorfile>classUnknownElement.html</anchorfile>
      <anchor>acd3f925c4ad19d10d93f1f5309d0ca43</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getElement</name>
      <anchorfile>classUnknownElement.html</anchorfile>
      <anchor>a2c42da19b46ef1c28e092dc8792ce6e8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setElement</name>
      <anchorfile>classUnknownElement.html</anchorfile>
      <anchor>a59484ea9826c9a478fbe8001f1de0180</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnknownElement *</type>
      <name>getNextUnknownSibling</name>
      <anchorfile>classUnknownElement.html</anchorfile>
      <anchor>ac0836889c0c6d393fa476526f33cffd0</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="dir">
    <name>/home/default/omnetpp/src/nedxml/</name>
    <path>/home/default/omnetpp/src/nedxml/</path>
    <filename>dir_bb5ca580824bfbe7b43df903a68282c6.html</filename>
    <file>index.h</file>
    <file>msgcppgenerator.h</file>
    <file>ned1generator.h</file>
    <file>ned2generator.h</file>
    <file>nedcrossvalidator.h</file>
    <file>neddtdvalidator.h</file>
    <file>neddtdvalidatorbase.h</file>
    <file>nedelement.h</file>
    <file>nedelements.h</file>
    <file>nederror.h</file>
    <file>nedexception.h</file>
    <file>nedfilebuffer.h</file>
    <file>nedparser.h</file>
    <file>nedresourcecache.h</file>
    <file>nedsaxhandler.h</file>
    <file>nedsyntaxvalidator.h</file>
    <file>nedtools.h</file>
    <file>nedtypeinfo.h</file>
    <file>nedutil.h</file>
    <file>nedvalidator.h</file>
    <file>nedxmldefs.h</file>
    <file>nedxmlparser.h</file>
    <file>nedyydefs.h</file>
    <file>nedyylib.h</file>
    <file>saxparser.h</file>
    <file>xmlgenerator.h</file>
  </compound>
  <compound kind="dir">
    <name>/home/default/omnetpp/src/</name>
    <path>/home/default/omnetpp/src/</path>
    <filename>dir_3479df6010d17fb6a7e2825f4688bf91.html</filename>
    <dir>/home/default/omnetpp/src/nedxml/</dir>
  </compound>
</tagfile>
