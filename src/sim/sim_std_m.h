//
// Generated file, do not edit! Created by nedtool 4.6 from sim_std.msg.
//

#ifndef _SIM_STD_M_H_
#define _SIM_STD_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#ifdef _MSC_VER
#  pragma warning(disable:4996)  // deprecation (cLinkedList)
#endif

#ifdef __GNUC__
#  pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

NAMESPACE_BEGIN

//
// Register enums from the sim. kernel
//
typedef cPar::Type   cPar_Type;
typedef cGate::Type  cGate_Type;

Register_Enum(cPar_Type,  (cPar::BOOL, cPar::DOUBLE, cPar::LONG, cPar::STRING, cPar::XML));
Register_Enum(cGate_Type, (cGate::INPUT, cGate::OUTPUT, cGate::INOUT));

typedef cFigure::LineStyle  cFigure_LineStyle;
typedef cFigure::CapStyle   cFigure_CapStyle;
typedef cFigure::JoinStyle  cFigure_JoinStyle;
typedef cFigure::ArrowHead  cFigure_ArrowHead;
typedef cFigure::Anchor     cFigure_Anchor;
typedef cFigure::Alignment  cFigure_Alignment;

namespace aux {
#define cF cFigure
Register_Enum(cFigure_LineStyle, (cF::LINE_SOLID, cF::LINE_DOTTED, cF::LINE_DASHED));
Register_Enum(cFigure_CapStyle,  (cF::CAP_BUTT, cF::CAP_SQUARE, cF::CAP_ROUND));
Register_Enum(cFigure_JoinStyle, (cF::JOIN_BEVEL, cF::JOIN_MITER, cF::JOIN_ROUND));
Register_Enum(cFigure_ArrowHead, (cF::ARROW_NONE, cF::ARROW_SIMPLE, cF::ARROW_TRIANGLE, cF::ARROW_BARBED));
Register_Enum(cFigure_Anchor,    (cF::ANCHOR_CENTER, cF::ANCHOR_N, cF::ANCHOR_E, cF::ANCHOR_S, cF::ANCHOR_W, cF::ANCHOR_NW, cF::ANCHOR_NE, cF::ANCHOR_SE, cF::ANCHOR_SW));
Register_Enum(cFigure_Alignment, (cF::ALIGN_LEFT, cF::ALIGN_RIGHT, cF::ALIGN_CENTER));
#undef cF
};

//
// Define operator<< for some classes
//
inline std::ostream& operator<<(std::ostream& os, const cDisplayString& d) {
    return os << "\"" << d.str() << "\"";
}

typedef cDensityEstBase::Cell cDensityEstBase_Cell;
inline std::ostream& operator<<(std::ostream& os, const cDensityEstBase::Cell& cell) {
    return os << "[" << cell.lower << ", " << cell.upper << ")  ==>  " << cell.value << " (" << cell.relativeFreq << ")";
}

typedef cFigure::Point Point;
inline std::ostream& operator<<(std::ostream& os, const cFigure::Point& p) {
    return os << "(" << p.x << ", " << p.y << ")";
}

inline std::ostream& operator<<(std::ostream& os, const cFigure::Rectangle& r) {
    return os << "(" << r.x << ", " << r.y << ", w=" << r.width << ", h=" << r.height << ")";
}
// typedef cFigure::Rectangle Rectangle; // conflicts with MINGW's WINGDI.H Rectangle
#define Rectangle cFigure::Rectangle


typedef cFigure::Color Color;
inline std::ostream& operator<<(std::ostream& os, const cFigure::Color& c) {
    return os << "(" << (int)c.red << "," << (int)c.green << "," << (int)c.blue << ")";
}

typedef cFigure::Font Font;
static std::ostream& operator<<(std::ostream& os, const cFigure::Font& f)
{
    os << "(" << (f.typeface.empty()? "<default>" : f.typeface) << ", ";
    os << (int)f.pointSize << " pt";
    if (!f.style)
        os << ", none";
    else {
        os << ",";
        if (f.style & cFigure::FONT_BOLD)  os << " bold";
        if (f.style & cFigure::FONT_ITALIC)  os << " italic";
        if (f.style & cFigure::FONT_UNDERLINE)  os << " underline";
    }
    os << ")";
    return os;
}

/* XXX currently unused
typedef std::vector<std::string> StringVector;
static std::ostream& operator<<(std::ostream& os, const std::vector<std::string>& v)
{
    os << "[";
    for (int i = 0; i < (int)v.size(); i++) {
        if (i > 0) os << ", ";
        os << v[i];
    }
    os << "]";
    return os;
}
*/

//
// This function is to be referenced from sim. kernel classes, to force the
// linker to include this file in executables
//
void std_sim_descriptor_dummy() {}
// }}

// cplusplus {{
typedef cTopology::Node cTopology_Node;
typedef cTopology::Link cTopology_Link;
typedef cTopology::LinkIn cTopology_LinkIn;
typedef cTopology::LinkOut cTopology_LinkOut;
// }}

// cplusplus {{
NAMESPACE_END
// }}


#endif // ifndef _SIM_STD_M_H_

